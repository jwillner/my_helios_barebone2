
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	00 26 00 20 c5 1b 00 00 b1 6c 00 00 7d 1b 00 00     .&. .....l..}...
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
  10:	7d 1b 00 00 7d 1b 00 00 7d 1b 00 00 00 00 00 00     }...}...}.......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	1d 17 00 00 7d 1b 00 00 00 00 00 00 c5 16 00 00     ....}...........
	unsigned int s_ro_cnt = 0; /* number of ro strings */
  3c:	7d 1b 00 00                                         }...

00000040 <_irq_vector_table>:
	unsigned int s_rw_cnt = 0; /* number of rw strings */
  40:	f5 17 00 00 f5 17 00 00 f5 17 00 00 f5 17 00 00     ................

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  50:	f5 17 00 00 f5 17 00 00 f5 17 00 00 f5 17 00 00     ................
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
  60:	f5 17 00 00 f5 17 00 00 f5 17 00 00 f5 17 00 00     ................
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
  70:	f5 17 00 00 f5 17 00 00 f5 17 00 00 f5 17 00 00     ................
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
  80:	f5 17 00 00 f5 17 00 00 f5 17 00 00 f5 17 00 00     ................
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  90:	f5 17 00 00 f5 17 00 00 f5 17 00 00 f5 17 00 00     ................
					str_ptr_arg[s_idx] = arg_idx;
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
  a0:	f5 17 00 00 f5 17 00 00 f5 17 00 00 f5 17 00 00     ................
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
  b0:	f5 17 00 00 f5 17 00 00 f5 17 00 00 f5 17 00 00     ................
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  c0:	f5 17 00 00 f5 17 00 00 f5 17 00 00 f5 17 00 00     ................
				parsing = false;
  d0:	f5 17 00 00 f5 17 00 00 f5 17 00 00                 ............

Disassembly of section text:

000000e0 <memchr>:
					arg_idx++;
      e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
					parsing = true;
      e4:	2a10      	cmp	r2, #16
					align = VA_STACK_ALIGN(int);
      e6:	db2b      	blt.n	140 <CONFIG_IDLE_STACK_SIZE>
      e8:	f010 0f07 	tst.w	r0, #7
				continue;
      ec:	d008      	beq.n	100 <CONFIG_KOBJECT_TEXT_AREA>
			switch (*fmt) {
      ee:	f810 3b01 	ldrb.w	r3, [r0], #1
      f2:	3a01      	subs	r2, #1
      f4:	428b      	cmp	r3, r1
      f6:	d02d      	beq.n	154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
      f8:	f010 0f07 	tst.w	r0, #7
      fc:	b342      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
      fe:	d1f6      	bne.n	ee <memchr+0xe>
     100:	b4f0      	push	{r4, r5, r6, r7}
     102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     10a:	f022 0407 	bic.w	r4, r2, #7
     10e:	f07f 0700 	mvns.w	r7, #0
     112:	2300      	movs	r3, #0
     114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
				parsing = false;
     118:	3c08      	subs	r4, #8
     11a:	ea85 0501 	eor.w	r5, r5, r1
			switch (*fmt) {
     11e:	ea86 0601 	eor.w	r6, r6, r1
				arg_idx--;
     122:	fa85 f547 	uadd8	r5, r5, r7
				continue;
     126:	faa3 f587 	sel	r5, r3, r7
				parsing = false;
     12a:	fa86 f647 	uadd8	r6, r6, r7
			switch (*fmt) {
     12e:	faa5 f687 	sel	r6, r5, r7
     132:	b98e      	cbnz	r6, 158 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xe>
     134:	d1ee      	bne.n	114 <CONFIG_KOBJECT_TEXT_AREA+0x14>
				parsing = false;
     136:	bcf0      	pop	{r4, r5, r6, r7}
			if (*++fmt == '\0') {
     138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     13c:	f002 0207 	and.w	r2, r2, #7
     140:	b132      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
			if (!parsing) {
     142:	f810 3b01 	ldrb.w	r3, [r0], #1
			switch (*fmt) {
     146:	3a01      	subs	r2, #1
     148:	ea83 0301 	eor.w	r3, r3, r1
     14c:	b113      	cbz	r3, 154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
     14e:	d1f8      	bne.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     150:	2000      	movs	r0, #0
     152:	4770      	bx	lr
     154:	3801      	subs	r0, #1
     156:	4770      	bx	lr
     158:	2d00      	cmp	r5, #0
     15a:	bf06      	itte	eq
     15c:	4635      	moveq	r5, r6
     15e:	3803      	subeq	r0, #3
     160:	3807      	subne	r0, #7
     162:	f015 0f01 	tst.w	r5, #1
     166:	d107      	bne.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     168:	3001      	adds	r0, #1
     16a:	f415 7f80 	tst.w	r5, #256	; 0x100
     16e:	bf02      	ittt	eq
     170:	3001      	addeq	r0, #1
     172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     176:	3001      	addeq	r0, #1
     178:	bcf0      	pop	{r4, r5, r6, r7}
     17a:	3801      	subs	r0, #1
     17c:	4770      	bx	lr
     17e:	bf00      	nop

00000180 <__aeabi_uldivmod>:
     180:	b953      	cbnz	r3, 198 <__aeabi_uldivmod+0x18>
     182:	b94a      	cbnz	r2, 198 <__aeabi_uldivmod+0x18>
     184:	2900      	cmp	r1, #0
     186:	bf08      	it	eq
     188:	2800      	cmpeq	r0, #0
     18a:	bf1c      	itt	ne
     18c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     190:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     194:	f000 b80c 	b.w	1b0 <__aeabi_idiv0>
     198:	f1ad 0c08 	sub.w	ip, sp, #8
     19c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1a0:	f000 f808 	bl	1b4 <__udivmoddi4>
     1a4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1ac:	b004      	add	sp, #16
     1ae:	4770      	bx	lr

000001b0 <__aeabi_idiv0>:
     1b0:	4770      	bx	lr
     1b2:	bf00      	nop

000001b4 <__udivmoddi4>:
     1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1b8:	4686      	mov	lr, r0
     1ba:	468c      	mov	ip, r1
     1bc:	4608      	mov	r0, r1
     1be:	9e08      	ldr	r6, [sp, #32]
     1c0:	4615      	mov	r5, r2
     1c2:	4674      	mov	r4, lr
     1c4:	4619      	mov	r1, r3
     1c6:	2b00      	cmp	r3, #0
     1c8:	f040 80c2 	bne.w	350 <CONFIG_FLASH_SIZE+0x150>
     1cc:	4285      	cmp	r5, r0
     1ce:	fab2 f282 	clz	r2, r2
     1d2:	d945      	bls.n	260 <CONFIG_FLASH_SIZE+0x60>
     1d4:	b14a      	cbz	r2, 1ea <__udivmoddi4+0x36>
     1d6:	f1c2 0320 	rsb	r3, r2, #32
     1da:	fa00 fc02 	lsl.w	ip, r0, r2
     1de:	fa2e f303 	lsr.w	r3, lr, r3
     1e2:	4095      	lsls	r5, r2
     1e4:	ea43 0c0c 	orr.w	ip, r3, ip
     1e8:	4094      	lsls	r4, r2
     1ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ee:	b2a8      	uxth	r0, r5
     1f0:	fbbc f8fe 	udiv	r8, ip, lr
     1f4:	0c23      	lsrs	r3, r4, #16
     1f6:	fb0e cc18 	mls	ip, lr, r8, ip
     1fa:	fb08 f900 	mul.w	r9, r8, r0
     1fe:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     202:	4599      	cmp	r9, r3
     204:	d928      	bls.n	258 <CONFIG_FLASH_SIZE+0x58>
     206:	18eb      	adds	r3, r5, r3
     208:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     20c:	d204      	bcs.n	218 <CONFIG_FLASH_SIZE+0x18>
     20e:	4599      	cmp	r9, r3
     210:	d902      	bls.n	218 <CONFIG_FLASH_SIZE+0x18>
     212:	f1a8 0702 	sub.w	r7, r8, #2
     216:	442b      	add	r3, r5
				parsing = false;
     218:	eba3 0309 	sub.w	r3, r3, r9
				align = VA_STACK_ALIGN(size_t);
     21c:	b2a4      	uxth	r4, r4
     21e:	fbb3 fcfe 	udiv	ip, r3, lr
				continue;
     222:	fb0e 331c 	mls	r3, lr, ip, r3
				align = VA_STACK_ALIGN(ptrdiff_t);
     226:	fb0c f000 	mul.w	r0, ip, r0
				continue;
     22a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
				if (fmt[-1] == 'l') {
     22e:	42a0      	cmp	r0, r4
     230:	d914      	bls.n	25c <CONFIG_FLASH_SIZE+0x5c>
				parsing = false;
     232:	192c      	adds	r4, r5, r4
		buf = (void *) ROUND_UP(buf, align);
     234:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     238:	d204      	bcs.n	244 <CONFIG_FLASH_SIZE+0x44>
     23a:	42a0      	cmp	r0, r4
     23c:	d902      	bls.n	244 <CONFIG_FLASH_SIZE+0x44>
     23e:	f1ac 0302 	sub.w	r3, ip, #2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     242:	442c      	add	r4, r5
     244:	1a24      	subs	r4, r4, r0
     246:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     24a:	b11e      	cbz	r6, 254 <CONFIG_FLASH_SIZE+0x54>
		if (is_str_arg) {
     24c:	40d4      	lsrs	r4, r2
     24e:	2300      	movs	r3, #0
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     250:	6034      	str	r4, [r6, #0]
     252:	6073      	str	r3, [r6, #4]
     254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     258:	4647      	mov	r7, r8
     25a:	e7dd      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     25c:	4663      	mov	r3, ip
     25e:	e7f1      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
			long long v = va_arg(ap, long long);
     260:	bb92      	cbnz	r2, 2c8 <CONFIG_FLASH_SIZE+0xc8>
     262:	1b43      	subs	r3, r0, r5
     264:	2101      	movs	r1, #1
     266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     26a:	b2af      	uxth	r7, r5
     26c:	fbb3 fcfe 	udiv	ip, r3, lr
     270:	0c20      	lsrs	r0, r4, #16

			if (buf0 != NULL) {
     272:	fb0e 331c 	mls	r3, lr, ip, r3
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     276:	fb0c f807 	mul.w	r8, ip, r7
				}
			}
			buf += sizeof(long long);
     27a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
					if (fmt[-2] == 'l') {
     27e:	4598      	cmp	r8, r3
     280:	d962      	bls.n	348 <CONFIG_FLASH_SIZE+0x148>
     282:	18eb      	adds	r3, r5, r3
				parsing = false;
     284:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
						align = VA_STACK_ALIGN(long);
     288:	d204      	bcs.n	294 <CONFIG_FLASH_SIZE+0x94>
						size = sizeof(long);
     28a:	4598      	cmp	r8, r3
     28c:	d902      	bls.n	294 <CONFIG_FLASH_SIZE+0x94>
				parsing = false;
     28e:	f1ac 0002 	sub.w	r0, ip, #2
						align = VA_STACK_ALIGN(long long);
     292:	442b      	add	r3, r5
						size = sizeof(long long);
     294:	eba3 0308 	sub.w	r3, r3, r8
				if (fmt[-1] == 'L') {
     298:	b2a4      	uxth	r4, r4
     29a:	fbb3 fcfe 	udiv	ip, r3, lr
					v.d = va_arg(ap, double);
     29e:	fb0e 331c 	mls	r3, lr, ip, r3
     2a2:	fb0c f707 	mul.w	r7, ip, r7
     2a6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     2aa:	42a7      	cmp	r7, r4
     2ac:	d94e      	bls.n	34c <CONFIG_FLASH_SIZE+0x14c>
     2ae:	192c      	adds	r4, r5, r4
				buf = (void *) ROUND_UP(buf, align);
     2b0:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     2b4:	d204      	bcs.n	2c0 <CONFIG_FLASH_SIZE+0xc0>
				if (buf0 != NULL) {
     2b6:	42a7      	cmp	r7, r4
					if (BUF_OFFSET + size > len) {
     2b8:	d902      	bls.n	2c0 <CONFIG_FLASH_SIZE+0xc0>
     2ba:	f1ac 0302 	sub.w	r3, ip, #2
     2be:	442c      	add	r4, r5
					} else if (fmt[-1] == 'L') {
     2c0:	1be4      	subs	r4, r4, r7
     2c2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
						*(double *)buf = v.d;
     2c6:	e7c0      	b.n	24a <CONFIG_FLASH_SIZE+0x4a>
     2c8:	f1c2 0320 	rsb	r3, r2, #32
				parsing = false;
     2cc:	fa20 f103 	lsr.w	r1, r0, r3
				continue;
     2d0:	4095      	lsls	r5, r2
     2d2:	4090      	lsls	r0, r2
     2d4:	fa2e f303 	lsr.w	r3, lr, r3
					v.ld = va_arg(ap, long double);
     2d8:	4303      	orrs	r3, r0
     2da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2de:	b2af      	uxth	r7, r5
     2e0:	fbb1 fcfe 	udiv	ip, r1, lr
     2e4:	fb0e 101c 	mls	r0, lr, ip, r1
					size = sizeof(long double);
     2e8:	0c19      	lsrs	r1, r3, #16
						return -ENOSPC;
     2ea:	fb0c f807 	mul.w	r8, ip, r7
     2ee:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
						*(long double *)buf = v.ld;
     2f2:	4588      	cmp	r8, r1
     2f4:	fa04 f402 	lsl.w	r4, r4, r2
				align = VA_STACK_ALIGN(void *);
     2f8:	d922      	bls.n	340 <CONFIG_FLASH_SIZE+0x140>
     2fa:	1869      	adds	r1, r5, r1
				size = sizeof(void *);
     2fc:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
				is_str_arg = true;
     300:	d204      	bcs.n	30c <CONFIG_FLASH_SIZE+0x10c>
				parsing = false;
     302:	4588      	cmp	r8, r1
				align = VA_STACK_ALIGN(void *);
     304:	d902      	bls.n	30c <CONFIG_FLASH_SIZE+0x10c>
     306:	f1ac 0002 	sub.w	r0, ip, #2
				size = sizeof(void *);
     30a:	4429      	add	r1, r5
			s = va_arg(ap, char *);
     30c:	eba1 0108 	sub.w	r1, r1, r8
     310:	b29b      	uxth	r3, r3
     312:	fbb1 fcfe 	udiv	ip, r1, lr
     316:	fb0e 111c 	mls	r1, lr, ip, r1
			if (*++fmt == '\0') {
     31a:	fb0c f707 	mul.w	r7, ip, r7
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     31e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     322:	429f      	cmp	r7, r3
     324:	d90e      	bls.n	344 <CONFIG_FLASH_SIZE+0x144>
     326:	18eb      	adds	r3, r5, r3
     328:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     32c:	d204      	bcs.n	338 <CONFIG_FLASH_SIZE+0x138>
     32e:	429f      	cmp	r7, r3
     330:	d902      	bls.n	338 <CONFIG_FLASH_SIZE+0x138>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     332:	f1ac 0102 	sub.w	r1, ip, #2
     336:	442b      	add	r3, r5
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     338:	1bdb      	subs	r3, r3, r7
     33a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     33e:	e792      	b.n	266 <CONFIG_FLASH_SIZE+0x66>
     340:	4660      	mov	r0, ip
     342:	e7e3      	b.n	30c <CONFIG_FLASH_SIZE+0x10c>
     344:	4661      	mov	r1, ip
						s_rw_cnt++;
     346:	e7f7      	b.n	338 <CONFIG_FLASH_SIZE+0x138>
     348:	4660      	mov	r0, ip
     34a:	e7a3      	b.n	294 <CONFIG_FLASH_SIZE+0x94>
     34c:	4663      	mov	r3, ip
				} else if (is_ro) {
     34e:	e7b7      	b.n	2c0 <CONFIG_FLASH_SIZE+0xc0>
					len += 1;
     350:	4283      	cmp	r3, r0
     352:	d906      	bls.n	362 <CONFIG_FLASH_SIZE+0x162>
     354:	b916      	cbnz	r6, 35c <CONFIG_FLASH_SIZE+0x15c>
				} else if (rws_pos_en) {
     356:	2100      	movs	r1, #0
     358:	4608      	mov	r0, r1
					len += 2;
     35a:	e77b      	b.n	254 <CONFIG_FLASH_SIZE+0x54>
     35c:	e9c6 e000 	strd	lr, r0, [r6]
					len += strlen(s) + 1 + 1;
     360:	e7f9      	b.n	356 <CONFIG_FLASH_SIZE+0x156>
     362:	fab3 f783 	clz	r7, r3
     366:	b98f      	cbnz	r7, 38c <CONFIG_FLASH_SIZE+0x18c>
     368:	4283      	cmp	r3, r0
     36a:	d301      	bcc.n	370 <CONFIG_FLASH_SIZE+0x170>
     36c:	4572      	cmp	r2, lr
     36e:	d808      	bhi.n	382 <CONFIG_FLASH_SIZE+0x182>
			int v = va_arg(ap, int);
     370:	ebbe 0402 	subs.w	r4, lr, r2
     374:	eb60 0303 	sbc.w	r3, r0, r3
			if (buf0 != NULL) {
     378:	2001      	movs	r0, #1
				*(int *)buf = v;
     37a:	469c      	mov	ip, r3
			buf += sizeof(int);
     37c:	b91e      	cbnz	r6, 386 <CONFIG_FLASH_SIZE+0x186>
     37e:	2100      	movs	r1, #0
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     380:	e768      	b.n	254 <CONFIG_FLASH_SIZE+0x54>
     382:	4638      	mov	r0, r7
     384:	e7fa      	b.n	37c <CONFIG_FLASH_SIZE+0x17c>
     386:	e9c6 4c00 	strd	r4, ip, [r6]

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     38a:	e7f8      	b.n	37e <CONFIG_FLASH_SIZE+0x17e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     38c:	f1c7 0c20 	rsb	ip, r7, #32

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     390:	40bb      	lsls	r3, r7
     392:	fa22 f40c 	lsr.w	r4, r2, ip

	if (rws_pos_en) {
     396:	431c      	orrs	r4, r3
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     398:	fa2e f10c 	lsr.w	r1, lr, ip
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     39c:	fa20 f30c 	lsr.w	r3, r0, ip
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     3a0:	40b8      	lsls	r0, r7
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
     3a2:	4301      	orrs	r1, r0
     3a4:	ea4f 4914 	mov.w	r9, r4, lsr #16
     3a8:	fa0e f507 	lsl.w	r5, lr, r7
     3ac:	fbb3 f8f9 	udiv	r8, r3, r9
     3b0:	fa1f fe84 	uxth.w	lr, r4
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     3b4:	fb09 3018 	mls	r0, r9, r8, r3
     3b8:	0c0b      	lsrs	r3, r1, #16
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     3ba:	fb08 fa0e 	mul.w	sl, r8, lr
		pkg_hdr->desc.rw_str_cnt = 0;
     3be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		for (i = 0; i < s_idx; i++) {
     3c2:	459a      	cmp	sl, r3
     3c4:	fa02 f207 	lsl.w	r2, r2, r7
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     3c8:	d940      	bls.n	44c <CONFIG_MAIN_STACK_SIZE+0x4c>
     3ca:	18e3      	adds	r3, r4, r3
     3cc:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3d0:	d204      	bcs.n	3dc <CONFIG_FLASH_SIZE+0x1dc>
     3d2:	459a      	cmp	sl, r3
     3d4:	d902      	bls.n	3dc <CONFIG_FLASH_SIZE+0x1dc>
     3d6:	f1a8 0002 	sub.w	r0, r8, #2
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     3da:	4423      	add	r3, r4
			if (BUF_OFFSET + 1 > len) {
     3dc:	eba3 030a 	sub.w	r3, r3, sl
     3e0:	b289      	uxth	r1, r1
     3e2:	fbb3 f8f9 	udiv	r8, r3, r9
			*buf++ = pos;
     3e6:	fb09 3318 	mls	r3, r9, r8, r3
		for (i = 0; i < s_idx; i++) {
     3ea:	fb08 fe0e 	mul.w	lr, r8, lr
     3ee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
		if (rws_pos_en) {
     3f2:	458e      	cmp	lr, r1
			*buf++ = str_ptr_arg[i];
     3f4:	d92c      	bls.n	450 <CONFIG_MAIN_STACK_SIZE+0x50>
     3f6:	1861      	adds	r1, r4, r1
     3f8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3fc:	d204      	bcs.n	408 <CONFIG_MAIN_STACK_SIZE+0x8>
     3fe:	458e      	cmp	lr, r1
     400:	d902      	bls.n	408 <CONFIG_MAIN_STACK_SIZE+0x8>
			size = 0;
     402:	f1a8 0302 	sub.w	r3, r8, #2
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     406:	4421      	add	r1, r4
     408:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     40c:	fba0 9802 	umull	r9, r8, r0, r2
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     410:	eba1 010e 	sub.w	r1, r1, lr
     414:	4541      	cmp	r1, r8
     416:	46ce      	mov	lr, r9
     418:	4643      	mov	r3, r8
     41a:	d302      	bcc.n	422 <CONFIG_MAIN_STACK_SIZE+0x22>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
     41c:	d106      	bne.n	42c <CONFIG_MAIN_STACK_SIZE+0x2c>
     41e:	454d      	cmp	r5, r9
     420:	d204      	bcs.n	42c <CONFIG_MAIN_STACK_SIZE+0x2c>
     422:	ebb9 0e02 	subs.w	lr, r9, r2
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
     426:	eb68 0304 	sbc.w	r3, r8, r4
	for (i = 0; i < s_idx; i++) {
     42a:	3801      	subs	r0, #1
     42c:	2e00      	cmp	r6, #0
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     42e:	d0a6      	beq.n	37e <CONFIG_FLASH_SIZE+0x17e>
     430:	ebb5 020e 	subs.w	r2, r5, lr
     434:	eb61 0103 	sbc.w	r1, r1, r3
     438:	fa01 fc0c 	lsl.w	ip, r1, ip
     43c:	fa22 f307 	lsr.w	r3, r2, r7
     440:	ea4c 0303 	orr.w	r3, ip, r3
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     444:	40f9      	lsrs	r1, r7
     446:	e9c6 3100 	strd	r3, r1, [r6]
     44a:	e798      	b.n	37e <CONFIG_FLASH_SIZE+0x17e>
     44c:	4640      	mov	r0, r8
     44e:	e7c5      	b.n	3dc <CONFIG_FLASH_SIZE+0x1dc>
     450:	4643      	mov	r3, r8
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     452:	e7d9      	b.n	408 <CONFIG_MAIN_STACK_SIZE+0x8>

00000454 <strcmp>:
     454:	f810 2b01 	ldrb.w	r2, [r0], #1
			size = strlen(s) + 1;
     458:	f811 3b01 	ldrb.w	r3, [r1], #1
     45c:	2a01      	cmp	r2, #1
     45e:	bf28      	it	cs
     460:	429a      	cmpcs	r2, r3
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     462:	d0f7      	beq.n	454 <strcmp>

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     464:	1ad0      	subs	r0, r2, r3
     466:	4770      	bx	lr

00000468 <strlen>:
     468:	4603      	mov	r3, r0
		return -EFAULT;
     46a:	f813 2b01 	ldrb.w	r2, [r3], #1
     46e:	2a00      	cmp	r2, #0
		return -ENOSPC;
     470:	d1fb      	bne.n	46a <strlen+0x2>
     472:	1a18      	subs	r0, r3, r0
     474:	3801      	subs	r0, #1
			return -ENOSPC;
     476:	4770      	bx	lr

00000478 <pwm_set>:
 * @retval -ENOTSUP If requested period or pulse cycles are not supported.
 * @retval -errno Other negative errno code on failure.
 */
static inline int pwm_set(const struct device *dev, uint32_t channel,
			  uint32_t period, uint32_t pulse, pwm_flags_t flags)
{
     478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     47c:	b085      	sub	sp, #20
     47e:	4606      	mov	r6, r0
     480:	460f      	mov	r7, r1
     482:	4615      	mov	r5, r2
     484:	4698      	mov	r8, r3
	const struct pwm_driver_api *api =
     486:	6883      	ldr	r3, [r0, #8]
	return api->get_cycles_per_sec(dev, channel, cycles);
     488:	685b      	ldr	r3, [r3, #4]
     48a:	aa02      	add	r2, sp, #8
     48c:	4798      	blx	r3
	uint64_t pulse_cycles;
	uint64_t period_cycles;
	uint64_t cycles_per_sec;

	err = pwm_get_cycles_per_sec(dev, channel, &cycles_per_sec);
	if (err < 0) {
     48e:	2800      	cmp	r0, #0
     490:	db2f      	blt.n	4f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa>
		return err;
	}

	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
     492:	9c02      	ldr	r4, [sp, #8]
     494:	f8dd 900c 	ldr.w	r9, [sp, #12]
     498:	fba5 ab04 	umull	sl, fp, r5, r4
     49c:	fb05 bb09 	mla	fp, r5, r9, fp
     4a0:	a319      	add	r3, pc, #100	; (adr r3, 508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
     4a6:	4650      	mov	r0, sl
     4a8:	4659      	mov	r1, fp
     4aa:	f7ff fe69 	bl	180 <__aeabi_uldivmod>
     4ae:	4605      	mov	r5, r0
	if (period_cycles > UINT32_MAX) {
     4b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     4b4:	4553      	cmp	r3, sl
     4b6:	4b16      	ldr	r3, [pc, #88]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     4b8:	eb73 030b 	sbcs.w	r3, r3, fp
     4bc:	d31c      	bcc.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
     4be:	fba8 a404 	umull	sl, r4, r8, r4
     4c2:	fb08 4409 	mla	r4, r8, r9, r4
     4c6:	a310      	add	r3, pc, #64	; (adr r3, 508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
     4cc:	4650      	mov	r0, sl
     4ce:	4621      	mov	r1, r4
     4d0:	f7ff fe56 	bl	180 <__aeabi_uldivmod>
     4d4:	4603      	mov	r3, r0
	if (pulse_cycles > UINT32_MAX) {
     4d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     4da:	4552      	cmp	r2, sl
     4dc:	4a0c      	ldr	r2, [pc, #48]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     4de:	41a2      	sbcs	r2, r4
     4e0:	d30d      	bcc.n	4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
		return -ENOTSUP;
	}

	return pwm_set_cycles(dev, channel, (uint32_t)period_cycles,
     4e2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
     4e6:	9200      	str	r2, [sp, #0]
     4e8:	462a      	mov	r2, r5
     4ea:	4639      	mov	r1, r7
     4ec:	4630      	mov	r0, r6
     4ee:	f005 fde8 	bl	60c2 <pwm_set_cycles>
			      (uint32_t)pulse_cycles, flags);
}
     4f2:	b005      	add	sp, #20
     4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
     4f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
     4fc:	e7f9      	b.n	4f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa>
		return -ENOTSUP;
     4fe:	f06f 0085 	mvn.w	r0, #133	; 0x85
     502:	e7f6      	b.n	4f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa>
     504:	f3af 8000 	nop.w
     508:	3b9aca00 	.word	0x3b9aca00
     50c:	00000000 	.word	0x00000000
     510:	3b9ac9ff 	.word	0x3b9ac9ff

00000514 <button1_pressed>:
"\n",
"\n"
};

void button1_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
     514:	b508      	push	{r3, lr}
    gpio_pin_toggle_dt(&led);
     516:	4804      	ldr	r0, [pc, #16]	; (528 <button1_pressed+0x14>)
     518:	f005 fdbf 	bl	609a <gpio_pin_toggle_dt>
	helios_state1++;
     51c:	4a03      	ldr	r2, [pc, #12]	; (52c <button1_pressed+0x18>)
     51e:	7813      	ldrb	r3, [r2, #0]
     520:	3301      	adds	r3, #1
     522:	7013      	strb	r3, [r2, #0]
}
     524:	bd08      	pop	{r3, pc}
     526:	bf00      	nop
     528:	000092d4 	.word	0x000092d4
     52c:	200017f9 	.word	0x200017f9

00000530 <button2_pressed>:

void button2_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
     530:	b508      	push	{r3, lr}
    gpio_pin_toggle_dt(&led);
     532:	4804      	ldr	r0, [pc, #16]	; (544 <button2_pressed+0x14>)
     534:	f005 fdb1 	bl	609a <gpio_pin_toggle_dt>
	helios_state2++ ;
     538:	4a03      	ldr	r2, [pc, #12]	; (548 <button2_pressed+0x18>)
     53a:	7813      	ldrb	r3, [r2, #0]
     53c:	3301      	adds	r3, #1
     53e:	7013      	strb	r3, [r2, #0]
}
     540:	bd08      	pop	{r3, pc}
     542:	bf00      	nop
     544:	000092d4 	.word	0x000092d4
     548:	200017f8 	.word	0x200017f8

0000054c <interrupt_and_gpio_init>:

static struct gpio_callback button1_cb_data;
static struct gpio_callback button2_cb_data;

void interrupt_and_gpio_init(void)
{
     54c:	b538      	push	{r3, r4, r5, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     54e:	4822      	ldr	r0, [pc, #136]	; (5d8 <interrupt_and_gpio_init+0x8c>)
     550:	f007 fef1 	bl	8336 <z_device_is_ready>
	int ret;
	if (!device_is_ready(led.port)) {
     554:	b900      	cbnz	r0, 558 <interrupt_and_gpio_init+0xc>
	ret = gpio_pin_interrupt_configure_dt(&button2, GPIO_INT_EDGE_TO_ACTIVE);	
    gpio_init_callback(&button1_cb_data, button1_pressed, BIT(button1.pin)); 	
    gpio_init_callback(&button2_cb_data, button2_pressed, BIT(button2.pin)); 
	gpio_add_callback(button1.port, &button1_cb_data);
	gpio_add_callback(button2.port, &button2_cb_data);	
}          
     556:	bd38      	pop	{r3, r4, r5, pc}
     558:	481f      	ldr	r0, [pc, #124]	; (5d8 <interrupt_and_gpio_init+0x8c>)
     55a:	f007 feec 	bl	8336 <z_device_is_ready>
	if (!device_is_ready(button1.port)) {
     55e:	2800      	cmp	r0, #0
     560:	d0f9      	beq.n	556 <interrupt_and_gpio_init+0xa>
     562:	481d      	ldr	r0, [pc, #116]	; (5d8 <interrupt_and_gpio_init+0x8c>)
     564:	f007 fee7 	bl	8336 <z_device_is_ready>
	if (!device_is_ready(button2.port)) {
     568:	2800      	cmp	r0, #0
     56a:	d0f4      	beq.n	556 <interrupt_and_gpio_init+0xa>
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
     56c:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     570:	481a      	ldr	r0, [pc, #104]	; (5dc <interrupt_and_gpio_init+0x90>)
     572:	f005 fd87 	bl	6084 <gpio_pin_configure_dt>
	if (ret < 0) {
     576:	2800      	cmp	r0, #0
     578:	dbed      	blt.n	556 <interrupt_and_gpio_init+0xa>
	ret = gpio_pin_configure_dt(&button1, GPIO_INPUT);
     57a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     57e:	4818      	ldr	r0, [pc, #96]	; (5e0 <interrupt_and_gpio_init+0x94>)
     580:	f005 fd80 	bl	6084 <gpio_pin_configure_dt>
	if (ret < 0) {
     584:	2800      	cmp	r0, #0
     586:	dbe6      	blt.n	556 <interrupt_and_gpio_init+0xa>
	ret = gpio_pin_configure_dt(&button2, GPIO_INPUT);
     588:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     58c:	4815      	ldr	r0, [pc, #84]	; (5e4 <interrupt_and_gpio_init+0x98>)
     58e:	f005 fd79 	bl	6084 <gpio_pin_configure_dt>
	if (ret < 0) {
     592:	2800      	cmp	r0, #0
     594:	dbdf      	blt.n	556 <interrupt_and_gpio_init+0xa>
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
     596:	4c10      	ldr	r4, [pc, #64]	; (5d8 <interrupt_and_gpio_init+0x8c>)
     598:	f04f 62b8 	mov.w	r2, #96468992	; 0x5c00000
     59c:	210d      	movs	r1, #13
     59e:	4620      	mov	r0, r4
     5a0:	f005 fd34 	bl	600c <z_impl_gpio_pin_interrupt_configure>
     5a4:	f04f 62b8 	mov.w	r2, #96468992	; 0x5c00000
     5a8:	210e      	movs	r1, #14
     5aa:	4620      	mov	r0, r4
     5ac:	f005 fd2e 	bl	600c <z_impl_gpio_pin_interrupt_configure>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     5b0:	490d      	ldr	r1, [pc, #52]	; (5e8 <interrupt_and_gpio_init+0x9c>)
     5b2:	4b0e      	ldr	r3, [pc, #56]	; (5ec <interrupt_and_gpio_init+0xa0>)
     5b4:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     5b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ba:	608b      	str	r3, [r1, #8]
	callback->handler = handler;
     5bc:	4d0c      	ldr	r5, [pc, #48]	; (5f0 <interrupt_and_gpio_init+0xa4>)
     5be:	4b0d      	ldr	r3, [pc, #52]	; (5f4 <interrupt_and_gpio_init+0xa8>)
     5c0:	606b      	str	r3, [r5, #4]
	callback->pin_mask = pin_mask;
     5c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
     5c6:	60ab      	str	r3, [r5, #8]
	gpio_add_callback(button1.port, &button1_cb_data);
     5c8:	4620      	mov	r0, r4
     5ca:	f005 fd70 	bl	60ae <gpio_add_callback>
	gpio_add_callback(button2.port, &button2_cb_data);	
     5ce:	4629      	mov	r1, r5
     5d0:	4620      	mov	r0, r4
     5d2:	f005 fd6c 	bl	60ae <gpio_add_callback>
     5d6:	e7be      	b.n	556 <interrupt_and_gpio_init+0xa>
     5d8:	00008dd0 	.word	0x00008dd0
     5dc:	000092d4 	.word	0x000092d4
     5e0:	000092e4 	.word	0x000092e4
     5e4:	000092dc 	.word	0x000092dc
     5e8:	20000cc4 	.word	0x20000cc4
     5ec:	00000515 	.word	0x00000515
     5f0:	20000cb8 	.word	0x20000cb8
     5f4:	00000531 	.word	0x00000531

000005f8 <pwm_init>:

void pwm_init(void)
{
     5f8:	b508      	push	{r3, lr}
     5fa:	480f      	ldr	r0, [pc, #60]	; (638 <pwm_init+0x40>)
     5fc:	f007 fe9b 	bl	8336 <z_device_is_ready>
	if (!device_is_ready(pwm_led0.dev)) {
     600:	b140      	cbz	r0, 614 <pwm_init+0x1c>
     602:	480d      	ldr	r0, [pc, #52]	; (638 <pwm_init+0x40>)
     604:	f007 fe97 	bl	8336 <z_device_is_ready>
		printk("Error: PWM device %s is not ready\n",
				pwm_led0.dev->name);
	}

	if (!device_is_ready(pwm_led1.dev)) {
     608:	b150      	cbz	r0, 620 <pwm_init+0x28>
     60a:	480b      	ldr	r0, [pc, #44]	; (638 <pwm_init+0x40>)
     60c:	f007 fe93 	bl	8336 <z_device_is_ready>
		printk("Error: PWM device %s is not ready\n",
				pwm_led1.dev->name);
		}
	
	if (!device_is_ready(pwm_led2.dev)) {
     610:	b160      	cbz	r0, 62c <pwm_init+0x34>
		printk("Error: PWM device %s is not ready\n",
				pwm_led2.dev->name);
	}
}
     612:	bd08      	pop	{r3, pc}
		printk("Error: PWM device %s is not ready\n",
     614:	4b08      	ldr	r3, [pc, #32]	; (638 <pwm_init+0x40>)
     616:	6819      	ldr	r1, [r3, #0]
     618:	4808      	ldr	r0, [pc, #32]	; (63c <pwm_init+0x44>)
     61a:	f005 fd93 	bl	6144 <printk>
     61e:	e7f0      	b.n	602 <pwm_init+0xa>
		printk("Error: PWM device %s is not ready\n",
     620:	4b05      	ldr	r3, [pc, #20]	; (638 <pwm_init+0x40>)
     622:	6819      	ldr	r1, [r3, #0]
     624:	4805      	ldr	r0, [pc, #20]	; (63c <pwm_init+0x44>)
     626:	f005 fd8d 	bl	6144 <printk>
     62a:	e7ee      	b.n	60a <pwm_init+0x12>
		printk("Error: PWM device %s is not ready\n",
     62c:	4b02      	ldr	r3, [pc, #8]	; (638 <pwm_init+0x40>)
     62e:	6819      	ldr	r1, [r3, #0]
     630:	4802      	ldr	r0, [pc, #8]	; (63c <pwm_init+0x44>)
     632:	f005 fd87 	bl	6144 <printk>
}
     636:	e7ec      	b.n	612 <pwm_init+0x1a>
     638:	00008e18 	.word	0x00008e18
     63c:	00009058 	.word	0x00009058

00000640 <adc_init>:

void adc_init(void)
{
     640:	b508      	push	{r3, lr}
     642:	4813      	ldr	r0, [pc, #76]	; (690 <adc_init+0x50>)
     644:	f007 fe77 	bl	8336 <z_device_is_ready>
	int err;
	/* Configure channels individually prior to sampling. */

		if (!device_is_ready(adc_channels[0].dev)) {
     648:	b178      	cbz	r0, 66a <adc_init+0x2a>
			printk("ADC controller device %s not ready\n", adc_channels[0].dev->name);
			return 0;
		}


		err = adc_channel_setup_dt(&adc_channels[0]);
     64a:	4812      	ldr	r0, [pc, #72]	; (694 <adc_init+0x54>)
     64c:	f005 fd55 	bl	60fa <adc_channel_setup_dt>
		if (err < 0) {
     650:	1e01      	subs	r1, r0, #0
     652:	db10      	blt.n	676 <adc_init+0x36>
			printk("Could not setup channel #0 (%d)\n", err);
		}
		err = adc_channel_setup_dt(&adc_channels[1]);
     654:	4810      	ldr	r0, [pc, #64]	; (698 <adc_init+0x58>)
     656:	f005 fd50 	bl	60fa <adc_channel_setup_dt>
		if (err < 0) {
     65a:	1e01      	subs	r1, r0, #0
     65c:	db0f      	blt.n	67e <adc_init+0x3e>
			printk("Could not setup channel #1 (%d)\n", err);
		}
		err = adc_channel_setup_dt(&adc_channels[2]);
     65e:	480f      	ldr	r0, [pc, #60]	; (69c <adc_init+0x5c>)
     660:	f005 fd4b 	bl	60fa <adc_channel_setup_dt>
		if (err < 0) {
     664:	1e01      	subs	r1, r0, #0
     666:	db0e      	blt.n	686 <adc_init+0x46>
			printk("Could not setup channel #2 (%d)\n", err);
		}
        if(err<0) return; 
}
     668:	bd08      	pop	{r3, pc}
			printk("ADC controller device %s not ready\n", adc_channels[0].dev->name);
     66a:	4b09      	ldr	r3, [pc, #36]	; (690 <adc_init+0x50>)
     66c:	6819      	ldr	r1, [r3, #0]
     66e:	480c      	ldr	r0, [pc, #48]	; (6a0 <adc_init+0x60>)
     670:	f005 fd68 	bl	6144 <printk>
			return 0;
     674:	e7f8      	b.n	668 <adc_init+0x28>
			printk("Could not setup channel #0 (%d)\n", err);
     676:	480b      	ldr	r0, [pc, #44]	; (6a4 <adc_init+0x64>)
     678:	f005 fd64 	bl	6144 <printk>
     67c:	e7ea      	b.n	654 <adc_init+0x14>
			printk("Could not setup channel #1 (%d)\n", err);
     67e:	480a      	ldr	r0, [pc, #40]	; (6a8 <adc_init+0x68>)
     680:	f005 fd60 	bl	6144 <printk>
     684:	e7eb      	b.n	65e <adc_init+0x1e>
			printk("Could not setup channel #2 (%d)\n", err);
     686:	4809      	ldr	r0, [pc, #36]	; (6ac <adc_init+0x6c>)
     688:	f005 fd5c 	bl	6144 <printk>
        if(err<0) return; 
     68c:	e7ec      	b.n	668 <adc_init+0x28>
     68e:	bf00      	nop
     690:	00008e00 	.word	0x00008e00
     694:	00009268 	.word	0x00009268
     698:	0000927c 	.word	0x0000927c
     69c:	00009290 	.word	0x00009290
     6a0:	0000907c 	.word	0x0000907c
     6a4:	000090a0 	.word	0x000090a0
     6a8:	000090c4 	.word	0x000090c4
     6ac:	000090e8 	.word	0x000090e8

000006b0 <read_adc>:

//--adc--------------------------------------------------------------------------------------------------

int32_t read_adc(uint8_t channel)
{
     6b0:	b500      	push	{lr}
     6b2:	b087      	sub	sp, #28
	int err;
	uint16_t buf;
	int32_t val_mv;
	struct adc_sequence sequence = {
     6b4:	2300      	movs	r3, #0
     6b6:	9300      	str	r3, [sp, #0]
     6b8:	9301      	str	r3, [sp, #4]
     6ba:	9302      	str	r3, [sp, #8]
     6bc:	9303      	str	r3, [sp, #12]
     6be:	9304      	str	r3, [sp, #16]
     6c0:	f10d 0316 	add.w	r3, sp, #22
     6c4:	9302      	str	r3, [sp, #8]
     6c6:	2302      	movs	r3, #2
     6c8:	9303      	str	r3, [sp, #12]
		.buffer = &buf,
		/* buffer size in bytes, not number of samples */
		.buffer_size = sizeof(buf),
	};

    switch(channel){
     6ca:	4298      	cmp	r0, r3
     6cc:	d01a      	beq.n	704 <read_adc+0x54>
     6ce:	2803      	cmp	r0, #3
     6d0:	d02e      	beq.n	730 <read_adc+0x80>
     6d2:	2801      	cmp	r0, #1
     6d4:	d003      	beq.n	6de <read_adc+0x2e>
     6d6:	4820      	ldr	r0, [pc, #128]	; (758 <read_adc+0xa8>)
		break;
    default:
	        val_mv = -32768;
	}
	return(val_mv);
}
     6d8:	b007      	add	sp, #28
     6da:	f85d fb04 	ldr.w	pc, [sp], #4
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
     6de:	2301      	movs	r3, #1
     6e0:	9301      	str	r3, [sp, #4]
	seq->resolution = spec->resolution;
     6e2:	230c      	movs	r3, #12
     6e4:	f88d 3010 	strb.w	r3, [sp, #16]
	const struct adc_driver_api *api =
     6e8:	481c      	ldr	r0, [pc, #112]	; (75c <read_adc+0xac>)
     6ea:	6883      	ldr	r3, [r0, #8]
	return api->read(dev, sequence);
     6ec:	685b      	ldr	r3, [r3, #4]
     6ee:	4669      	mov	r1, sp
     6f0:	4798      	blx	r3
			if (err < 0) {
     6f2:	1e01      	subs	r1, r0, #0
     6f4:	db02      	blt.n	6fc <read_adc+0x4c>
			val_mv = (int32_t)buf;
     6f6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
		break;
     6fa:	e7ed      	b.n	6d8 <read_adc+0x28>
				printk("Could not read channel0 err=(%d)\n", err);
     6fc:	4818      	ldr	r0, [pc, #96]	; (760 <read_adc+0xb0>)
     6fe:	f005 fd21 	bl	6144 <printk>
            	return;
     702:	e7e9      	b.n	6d8 <read_adc+0x28>
	seq->channels = BIT(spec->channel_id);
     704:	2302      	movs	r3, #2
     706:	9301      	str	r3, [sp, #4]
	seq->resolution = spec->resolution;
     708:	230e      	movs	r3, #14
     70a:	f88d 3010 	strb.w	r3, [sp, #16]
	seq->oversampling = spec->oversampling;
     70e:	2308      	movs	r3, #8
     710:	f88d 3011 	strb.w	r3, [sp, #17]
	const struct adc_driver_api *api =
     714:	4811      	ldr	r0, [pc, #68]	; (75c <read_adc+0xac>)
     716:	6883      	ldr	r3, [r0, #8]
	return api->read(dev, sequence);
     718:	685b      	ldr	r3, [r3, #4]
     71a:	4669      	mov	r1, sp
     71c:	4798      	blx	r3
			if (err < 0) {
     71e:	1e01      	subs	r1, r0, #0
     720:	db02      	blt.n	728 <read_adc+0x78>
			val_mv = (int32_t)buf;
     722:	f8bd 0016 	ldrh.w	r0, [sp, #22]
		break;
     726:	e7d7      	b.n	6d8 <read_adc+0x28>
				printk("Could not read channel1 err=(%d)\n", err);
     728:	480e      	ldr	r0, [pc, #56]	; (764 <read_adc+0xb4>)
     72a:	f005 fd0b 	bl	6144 <printk>
            	return;
     72e:	e7d3      	b.n	6d8 <read_adc+0x28>
	seq->channels = BIT(spec->channel_id);
     730:	2380      	movs	r3, #128	; 0x80
     732:	9301      	str	r3, [sp, #4]
	seq->resolution = spec->resolution;
     734:	230c      	movs	r3, #12
     736:	f88d 3010 	strb.w	r3, [sp, #16]
	const struct adc_driver_api *api =
     73a:	4808      	ldr	r0, [pc, #32]	; (75c <read_adc+0xac>)
     73c:	6883      	ldr	r3, [r0, #8]
	return api->read(dev, sequence);
     73e:	685b      	ldr	r3, [r3, #4]
     740:	4669      	mov	r1, sp
     742:	4798      	blx	r3
			if (err < 0) {
     744:	1e01      	subs	r1, r0, #0
     746:	db02      	blt.n	74e <read_adc+0x9e>
			val_mv = (int32_t)buf;
     748:	f8bd 0016 	ldrh.w	r0, [sp, #22]
		break;
     74c:	e7c4      	b.n	6d8 <read_adc+0x28>
				printk("Could not read channel2(%d)\n", err);
     74e:	4806      	ldr	r0, [pc, #24]	; (768 <read_adc+0xb8>)
     750:	f005 fcf8 	bl	6144 <printk>
			    return;
     754:	e7c0      	b.n	6d8 <read_adc+0x28>
     756:	bf00      	nop
     758:	ffff8000 	.word	0xffff8000
     75c:	00008e00 	.word	0x00008e00
     760:	0000910c 	.word	0x0000910c
     764:	00009130 	.word	0x00009130
     768:	00009154 	.word	0x00009154

0000076c <command_interpreter>:


void command_interpreter(void)
{
     76c:	b5f0      	push	{r4, r5, r6, r7, lr}
     76e:	b083      	sub	sp, #12
	char *input_string = console_getline();
     770:	f000 feea 	bl	1548 <console_getline>
	input_string = strupr(input_string);
     774:	f005 f8ea 	bl	594c <strupr>
	sscanf(input_string,"%s %s %s %s",command_string,address_string,data_string,option_string);
     778:	4d75      	ldr	r5, [pc, #468]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     77a:	4c76      	ldr	r4, [pc, #472]	; (954 <__z_interrupt_stack_SIZEOF+0x114>)
     77c:	4f76      	ldr	r7, [pc, #472]	; (958 <__z_interrupt_stack_SIZEOF+0x118>)
     77e:	9701      	str	r7, [sp, #4]
     780:	4e76      	ldr	r6, [pc, #472]	; (95c <__z_interrupt_stack_SIZEOF+0x11c>)
     782:	9600      	str	r6, [sp, #0]
     784:	462b      	mov	r3, r5
     786:	4622      	mov	r2, r4
     788:	4975      	ldr	r1, [pc, #468]	; (960 <__z_interrupt_stack_SIZEOF+0x120>)
     78a:	f005 f82d 	bl	57e8 <siscanf>
	printk("command=%s address=%s data=%s option=%s\n",command_string,address_string,data_string,option_string);
     78e:	9700      	str	r7, [sp, #0]
     790:	4633      	mov	r3, r6
     792:	462a      	mov	r2, r5
     794:	4621      	mov	r1, r4
     796:	4873      	ldr	r0, [pc, #460]	; (964 <__z_interrupt_stack_SIZEOF+0x124>)
     798:	f005 fcd4 	bl	6144 <printk>

 //--help---------------------------------------------------------------------------------------
  if((strcmp("HELP",command_string)==0)||(strcmp("?",command_string)==0))
     79c:	4621      	mov	r1, r4
     79e:	4872      	ldr	r0, [pc, #456]	; (968 <__z_interrupt_stack_SIZEOF+0x128>)
     7a0:	f7ff fe58 	bl	454 <strcmp>
     7a4:	4604      	mov	r4, r0
     7a6:	2800      	cmp	r0, #0
     7a8:	d060      	beq.n	86c <__z_interrupt_stack_SIZEOF+0x2c>
     7aa:	496a      	ldr	r1, [pc, #424]	; (954 <__z_interrupt_stack_SIZEOF+0x114>)
     7ac:	486f      	ldr	r0, [pc, #444]	; (96c <__z_interrupt_stack_SIZEOF+0x12c>)
     7ae:	f7ff fe51 	bl	454 <strcmp>
     7b2:	4604      	mov	r4, r0
     7b4:	2800      	cmp	r0, #0
     7b6:	d059      	beq.n	86c <__z_interrupt_stack_SIZEOF+0x2c>
      }
      return;
  }

 //--version----------------------------------------------------------------------------------
  if((strcmp("VERSION",command_string)==0)||(strcmp("V",command_string)==0))
     7b8:	4966      	ldr	r1, [pc, #408]	; (954 <__z_interrupt_stack_SIZEOF+0x114>)
     7ba:	486d      	ldr	r0, [pc, #436]	; (970 <__z_interrupt_stack_SIZEOF+0x130>)
     7bc:	f7ff fe4a 	bl	454 <strcmp>
     7c0:	2800      	cmp	r0, #0
     7c2:	d057      	beq.n	874 <__z_interrupt_stack_SIZEOF+0x34>
     7c4:	4963      	ldr	r1, [pc, #396]	; (954 <__z_interrupt_stack_SIZEOF+0x114>)
     7c6:	486b      	ldr	r0, [pc, #428]	; (974 <__z_interrupt_stack_SIZEOF+0x134>)
     7c8:	f7ff fe44 	bl	454 <strcmp>
     7cc:	2800      	cmp	r0, #0
     7ce:	d051      	beq.n	874 <__z_interrupt_stack_SIZEOF+0x34>
      printk("%s", version);
      return;
  }

   //--state----------------------------------------------------------------------------------
  if((strcmp("STATE",command_string)==0)||(strcmp("S",command_string)==0))
     7d0:	4960      	ldr	r1, [pc, #384]	; (954 <__z_interrupt_stack_SIZEOF+0x114>)
     7d2:	4869      	ldr	r0, [pc, #420]	; (978 <__z_interrupt_stack_SIZEOF+0x138>)
     7d4:	f7ff fe3e 	bl	454 <strcmp>
     7d8:	2800      	cmp	r0, #0
     7da:	d050      	beq.n	87e <__z_interrupt_stack_SIZEOF+0x3e>
     7dc:	495d      	ldr	r1, [pc, #372]	; (954 <__z_interrupt_stack_SIZEOF+0x114>)
     7de:	4867      	ldr	r0, [pc, #412]	; (97c <__z_interrupt_stack_SIZEOF+0x13c>)
     7e0:	f7ff fe38 	bl	454 <strcmp>
     7e4:	2800      	cmp	r0, #0
     7e6:	d04a      	beq.n	87e <__z_interrupt_stack_SIZEOF+0x3e>
	  printk("Helios-State1 = %d Helios-State2 = %d\n",helios_state1,helios_state2);
      return;
  }

   //--pwm----------------------------------------------------------------------------------
  if((strcmp("PWM",command_string)==0)||(strcmp("P",command_string)==0))
     7e8:	495a      	ldr	r1, [pc, #360]	; (954 <__z_interrupt_stack_SIZEOF+0x114>)
     7ea:	4865      	ldr	r0, [pc, #404]	; (980 <__z_interrupt_stack_SIZEOF+0x140>)
     7ec:	f7ff fe32 	bl	454 <strcmp>
     7f0:	b128      	cbz	r0, 7fe <command_interpreter+0x92>
     7f2:	4958      	ldr	r1, [pc, #352]	; (954 <__z_interrupt_stack_SIZEOF+0x114>)
     7f4:	4863      	ldr	r0, [pc, #396]	; (984 <__z_interrupt_stack_SIZEOF+0x144>)
     7f6:	f7ff fe2d 	bl	454 <strcmp>
     7fa:	2800      	cmp	r0, #0
     7fc:	d161      	bne.n	8c2 <__z_interrupt_stack_SIZEOF+0x82>
  {
      if((strcmp("CH1",address_string)==0)||(strcmp("1",address_string)==0))
     7fe:	4954      	ldr	r1, [pc, #336]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     800:	4861      	ldr	r0, [pc, #388]	; (988 <__z_interrupt_stack_SIZEOF+0x148>)
     802:	f7ff fe27 	bl	454 <strcmp>
     806:	2800      	cmp	r0, #0
     808:	d041      	beq.n	88e <__z_interrupt_stack_SIZEOF+0x4e>
     80a:	4951      	ldr	r1, [pc, #324]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     80c:	485f      	ldr	r0, [pc, #380]	; (98c <__z_interrupt_stack_SIZEOF+0x14c>)
     80e:	f7ff fe21 	bl	454 <strcmp>
     812:	2800      	cmp	r0, #0
     814:	d03b      	beq.n	88e <__z_interrupt_stack_SIZEOF+0x4e>
		}
		printk("out of value range");
		return;
	  }

      if((strcmp("CH2",address_string)==0)||(strcmp("2",address_string)==0))
     816:	494e      	ldr	r1, [pc, #312]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     818:	485d      	ldr	r0, [pc, #372]	; (990 <__z_interrupt_stack_SIZEOF+0x150>)
     81a:	f7ff fe1b 	bl	454 <strcmp>
     81e:	2800      	cmp	r0, #0
     820:	d042      	beq.n	8a8 <__z_interrupt_stack_SIZEOF+0x68>
     822:	494b      	ldr	r1, [pc, #300]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     824:	485b      	ldr	r0, [pc, #364]	; (994 <__z_interrupt_stack_SIZEOF+0x154>)
     826:	f7ff fe15 	bl	454 <strcmp>
     82a:	2800      	cmp	r0, #0
     82c:	d03c      	beq.n	8a8 <__z_interrupt_stack_SIZEOF+0x68>
		}
		printk("out of value range");
		return;
	  }

	  if((strcmp("CH3",address_string)==0)||(strcmp("3",address_string)==0))
     82e:	4948      	ldr	r1, [pc, #288]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     830:	4859      	ldr	r0, [pc, #356]	; (998 <__z_interrupt_stack_SIZEOF+0x158>)
     832:	f7ff fe0f 	bl	454 <strcmp>
     836:	b120      	cbz	r0, 842 <__z_interrupt_stack_SIZEOF+0x2>
     838:	4945      	ldr	r1, [pc, #276]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     83a:	4858      	ldr	r0, [pc, #352]	; (99c <__z_interrupt_stack_SIZEOF+0x15c>)
     83c:	f7ff fe0a 	bl	454 <strcmp>
     840:	b9b0      	cbnz	r0, 870 <__z_interrupt_stack_SIZEOF+0x30>
	  {
		uint8_t pwm_value;
		pwm_value = atoi(data_string);
     842:	4846      	ldr	r0, [pc, #280]	; (95c <__z_interrupt_stack_SIZEOF+0x11c>)
     844:	f008 f951 	bl	8aea <atoi>
		if((pwm_value>-1)||(pwm_value<101))
		{
			pwm_set_dt(&pwm_led2, PWM_PERIOD, 100*pwm_value);
     848:	b2c0      	uxtb	r0, r0
     84a:	2264      	movs	r2, #100	; 0x64
     84c:	fb00 f202 	mul.w	r2, r0, r2
     850:	f242 7110 	movw	r1, #10000	; 0x2710
     854:	4852      	ldr	r0, [pc, #328]	; (9a0 <__z_interrupt_stack_SIZEOF+0x160>)
     856:	f005 fc43 	bl	60e0 <pwm_set_dt>
			return;
     85a:	e009      	b.n	870 <__z_interrupt_stack_SIZEOF+0x30>
        printk("%s", help_text[i]);
     85c:	ebc4 2304 	rsb	r3, r4, r4, lsl #8
     860:	4950      	ldr	r1, [pc, #320]	; (9a4 <__z_interrupt_stack_SIZEOF+0x164>)
     862:	4419      	add	r1, r3
     864:	4850      	ldr	r0, [pc, #320]	; (9a8 <__z_interrupt_stack_SIZEOF+0x168>)
     866:	f005 fc6d 	bl	6144 <printk>
      for (int i = 0; i < HELP_MEMBERS; i++)
     86a:	3401      	adds	r4, #1
     86c:	2c08      	cmp	r4, #8
     86e:	ddf5      	ble.n	85c <__z_interrupt_stack_SIZEOF+0x1c>
      return;
  }

  //--no valid command----------------------------------------------------------------------------------
   printk("no valid command found\n");
}
     870:	b003      	add	sp, #12
     872:	bdf0      	pop	{r4, r5, r6, r7, pc}
      printk("%s", version);
     874:	494d      	ldr	r1, [pc, #308]	; (9ac <__z_interrupt_stack_SIZEOF+0x16c>)
     876:	484c      	ldr	r0, [pc, #304]	; (9a8 <__z_interrupt_stack_SIZEOF+0x168>)
     878:	f005 fc64 	bl	6144 <printk>
      return;
     87c:	e7f8      	b.n	870 <__z_interrupt_stack_SIZEOF+0x30>
	  printk("Helios-State1 = %d Helios-State2 = %d\n",helios_state1,helios_state2);
     87e:	4b4c      	ldr	r3, [pc, #304]	; (9b0 <__z_interrupt_stack_SIZEOF+0x170>)
     880:	781a      	ldrb	r2, [r3, #0]
     882:	4b4c      	ldr	r3, [pc, #304]	; (9b4 <__z_interrupt_stack_SIZEOF+0x174>)
     884:	7819      	ldrb	r1, [r3, #0]
     886:	484c      	ldr	r0, [pc, #304]	; (9b8 <__z_interrupt_stack_SIZEOF+0x178>)
     888:	f005 fc5c 	bl	6144 <printk>
      return;
     88c:	e7f0      	b.n	870 <__z_interrupt_stack_SIZEOF+0x30>
		pwm_value = atoi(data_string);
     88e:	4833      	ldr	r0, [pc, #204]	; (95c <__z_interrupt_stack_SIZEOF+0x11c>)
     890:	f008 f92b 	bl	8aea <atoi>
			pwm_set_dt(&pwm_led0, PWM_PERIOD, 100*pwm_value);
     894:	b2c0      	uxtb	r0, r0
     896:	2264      	movs	r2, #100	; 0x64
     898:	fb00 f202 	mul.w	r2, r0, r2
     89c:	f242 7110 	movw	r1, #10000	; 0x2710
     8a0:	4846      	ldr	r0, [pc, #280]	; (9bc <__z_interrupt_stack_SIZEOF+0x17c>)
     8a2:	f005 fc1d 	bl	60e0 <pwm_set_dt>
			return;
     8a6:	e7e3      	b.n	870 <__z_interrupt_stack_SIZEOF+0x30>
		pwm_value = atoi(data_string);
     8a8:	482c      	ldr	r0, [pc, #176]	; (95c <__z_interrupt_stack_SIZEOF+0x11c>)
     8aa:	f008 f91e 	bl	8aea <atoi>
			pwm_set_dt(&pwm_led1, PWM_PERIOD, 100*pwm_value);
     8ae:	b2c0      	uxtb	r0, r0
     8b0:	2264      	movs	r2, #100	; 0x64
     8b2:	fb00 f202 	mul.w	r2, r0, r2
     8b6:	f242 7110 	movw	r1, #10000	; 0x2710
     8ba:	4841      	ldr	r0, [pc, #260]	; (9c0 <__z_interrupt_stack_SIZEOF+0x180>)
     8bc:	f005 fc10 	bl	60e0 <pwm_set_dt>
			return;
     8c0:	e7d6      	b.n	870 <__z_interrupt_stack_SIZEOF+0x30>
  if((strcmp("ADC",command_string)==0)||(strcmp("A",command_string)==0))
     8c2:	4924      	ldr	r1, [pc, #144]	; (954 <__z_interrupt_stack_SIZEOF+0x114>)
     8c4:	483f      	ldr	r0, [pc, #252]	; (9c4 <__z_interrupt_stack_SIZEOF+0x184>)
     8c6:	f7ff fdc5 	bl	454 <strcmp>
     8ca:	b128      	cbz	r0, 8d8 <__z_interrupt_stack_SIZEOF+0x98>
     8cc:	4921      	ldr	r1, [pc, #132]	; (954 <__z_interrupt_stack_SIZEOF+0x114>)
     8ce:	483e      	ldr	r0, [pc, #248]	; (9c8 <__z_interrupt_stack_SIZEOF+0x188>)
     8d0:	f7ff fdc0 	bl	454 <strcmp>
     8d4:	2800      	cmp	r0, #0
     8d6:	d136      	bne.n	946 <__z_interrupt_stack_SIZEOF+0x106>
      if((strcmp("CH1",address_string)==0)||(strcmp("1",address_string)==0))
     8d8:	491d      	ldr	r1, [pc, #116]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     8da:	482b      	ldr	r0, [pc, #172]	; (988 <__z_interrupt_stack_SIZEOF+0x148>)
     8dc:	f7ff fdba 	bl	454 <strcmp>
     8e0:	b308      	cbz	r0, 926 <__z_interrupt_stack_SIZEOF+0xe6>
     8e2:	491b      	ldr	r1, [pc, #108]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     8e4:	4829      	ldr	r0, [pc, #164]	; (98c <__z_interrupt_stack_SIZEOF+0x14c>)
     8e6:	f7ff fdb5 	bl	454 <strcmp>
     8ea:	b1e0      	cbz	r0, 926 <__z_interrupt_stack_SIZEOF+0xe6>
      if((strcmp("CH2",address_string)==0)||(strcmp("2",address_string)==0))
     8ec:	4918      	ldr	r1, [pc, #96]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     8ee:	4828      	ldr	r0, [pc, #160]	; (990 <__z_interrupt_stack_SIZEOF+0x150>)
     8f0:	f7ff fdb0 	bl	454 <strcmp>
     8f4:	b1f8      	cbz	r0, 936 <__z_interrupt_stack_SIZEOF+0xf6>
     8f6:	4916      	ldr	r1, [pc, #88]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     8f8:	4826      	ldr	r0, [pc, #152]	; (994 <__z_interrupt_stack_SIZEOF+0x154>)
     8fa:	f7ff fdab 	bl	454 <strcmp>
     8fe:	b1d0      	cbz	r0, 936 <__z_interrupt_stack_SIZEOF+0xf6>
	  if((strcmp("CH3",address_string)==0)||(strcmp("3",address_string)==0))
     900:	4913      	ldr	r1, [pc, #76]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     902:	4825      	ldr	r0, [pc, #148]	; (998 <__z_interrupt_stack_SIZEOF+0x158>)
     904:	f7ff fda6 	bl	454 <strcmp>
     908:	b128      	cbz	r0, 916 <__z_interrupt_stack_SIZEOF+0xd6>
     90a:	4911      	ldr	r1, [pc, #68]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     90c:	4823      	ldr	r0, [pc, #140]	; (99c <__z_interrupt_stack_SIZEOF+0x15c>)
     90e:	f7ff fda1 	bl	454 <strcmp>
     912:	2800      	cmp	r0, #0
     914:	d1ac      	bne.n	870 <__z_interrupt_stack_SIZEOF+0x30>
		adc_value = read_adc(3);
     916:	2003      	movs	r0, #3
     918:	f7ff feca 	bl	6b0 <read_adc>
     91c:	4601      	mov	r1, r0
		printk("%d\n",adc_value);
     91e:	482b      	ldr	r0, [pc, #172]	; (9cc <__z_interrupt_stack_SIZEOF+0x18c>)
     920:	f005 fc10 	bl	6144 <printk>
		return;
     924:	e7a4      	b.n	870 <__z_interrupt_stack_SIZEOF+0x30>
		adc_value = read_adc(1);
     926:	2001      	movs	r0, #1
     928:	f7ff fec2 	bl	6b0 <read_adc>
     92c:	4601      	mov	r1, r0
		printk("%d\n",adc_value);
     92e:	4827      	ldr	r0, [pc, #156]	; (9cc <__z_interrupt_stack_SIZEOF+0x18c>)
     930:	f005 fc08 	bl	6144 <printk>
		return;
     934:	e79c      	b.n	870 <__z_interrupt_stack_SIZEOF+0x30>
		adc_value = read_adc(2);
     936:	2002      	movs	r0, #2
     938:	f7ff feba 	bl	6b0 <read_adc>
     93c:	4601      	mov	r1, r0
		printk("%d\n",adc_value);
     93e:	4823      	ldr	r0, [pc, #140]	; (9cc <__z_interrupt_stack_SIZEOF+0x18c>)
     940:	f005 fc00 	bl	6144 <printk>
		return;
     944:	e794      	b.n	870 <__z_interrupt_stack_SIZEOF+0x30>
   printk("no valid command found\n");
     946:	4822      	ldr	r0, [pc, #136]	; (9d0 <__z_interrupt_stack_SIZEOF+0x190>)
     948:	f005 fbfc 	bl	6144 <printk>
     94c:	e790      	b.n	870 <__z_interrupt_stack_SIZEOF+0x30>
     94e:	bf00      	nop
     950:	20000ed0 	.word	0x20000ed0
     954:	20000fd0 	.word	0x20000fd0
     958:	20000cd0 	.word	0x20000cd0
     95c:	20000dd0 	.word	0x20000dd0
     960:	00009174 	.word	0x00009174
     964:	00009180 	.word	0x00009180
     968:	000091ac 	.word	0x000091ac
     96c:	000091b4 	.word	0x000091b4
     970:	000091bc 	.word	0x000091bc
     974:	000091c4 	.word	0x000091c4
     978:	000091c8 	.word	0x000091c8
     97c:	000091d0 	.word	0x000091d0
     980:	000091fc 	.word	0x000091fc
     984:	00009200 	.word	0x00009200
     988:	00009204 	.word	0x00009204
     98c:	00009208 	.word	0x00009208
     990:	0000920c 	.word	0x0000920c
     994:	00009210 	.word	0x00009210
     998:	00009214 	.word	0x00009214
     99c:	00009218 	.word	0x00009218
     9a0:	000092a4 	.word	0x000092a4
     9a4:	20000098 	.word	0x20000098
     9a8:	000091b8 	.word	0x000091b8
     9ac:	20000990 	.word	0x20000990
     9b0:	200017f8 	.word	0x200017f8
     9b4:	200017f9 	.word	0x200017f9
     9b8:	000091d4 	.word	0x000091d4
     9bc:	000092c4 	.word	0x000092c4
     9c0:	000092b4 	.word	0x000092b4
     9c4:	0000921c 	.word	0x0000921c
     9c8:	00009220 	.word	0x00009220
     9cc:	00009224 	.word	0x00009224
     9d0:	00009228 	.word	0x00009228

000009d4 <main>:


int main(void)
{	
     9d4:	b508      	push	{r3, lr}
	interrupt_and_gpio_init();
     9d6:	f7ff fdb9 	bl	54c <interrupt_and_gpio_init>
	pwm_init();
     9da:	f7ff fe0d 	bl	5f8 <pwm_init>
	adc_init();
     9de:	f7ff fe2f 	bl	640 <adc_init>

	console_getline_init();
     9e2:	f000 fdc9 	bl	1578 <console_getline_init>
	printk("enter some text for gpio control...\n");
     9e6:	4804      	ldr	r0, [pc, #16]	; (9f8 <main+0x24>)
     9e8:	f005 fbac 	bl	6144 <printk>
	while(1)
	{
			//char *s = console_getline();
            command_interpreter();
     9ec:	f7ff febe 	bl	76c <command_interpreter>
			k_msleep(100);
     9f0:	2064      	movs	r0, #100	; 0x64
     9f2:	f005 fb8f 	bl	6114 <k_msleep>
	while(1)
     9f6:	e7f9      	b.n	9ec <main+0x18>
     9f8:	00009240 	.word	0x00009240

000009fc <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
     9fc:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
     9fe:	4b02      	ldr	r3, [pc, #8]	; (a08 <char_out+0xc>)
     a00:	681b      	ldr	r3, [r3, #0]
     a02:	4798      	blx	r3
}
     a04:	bd08      	pop	{r3, pc}
     a06:	bf00      	nop
     a08:	200009c8 	.word	0x200009c8

00000a0c <__printk_hook_install>:
	_char_out = fn;
     a0c:	4b01      	ldr	r3, [pc, #4]	; (a14 <__printk_hook_install+0x8>)
     a0e:	6018      	str	r0, [r3, #0]
}
     a10:	4770      	bx	lr
     a12:	bf00      	nop
     a14:	200009c8 	.word	0x200009c8

00000a18 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     a18:	b500      	push	{lr}
     a1a:	b083      	sub	sp, #12
     a1c:	4602      	mov	r2, r0
     a1e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     a20:	2100      	movs	r1, #0
     a22:	9100      	str	r1, [sp, #0]
     a24:	4802      	ldr	r0, [pc, #8]	; (a30 <vprintk+0x18>)
     a26:	f000 f989 	bl	d3c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     a2a:	b003      	add	sp, #12
     a2c:	f85d fb04 	ldr.w	pc, [sp], #4
     a30:	000009fd 	.word	0x000009fd

00000a34 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     a38:	b083      	sub	sp, #12
     a3a:	4604      	mov	r4, r0
     a3c:	4608      	mov	r0, r1
     a3e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     a40:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     a42:	f013 0f08 	tst.w	r3, #8
     a46:	d105      	bne.n	a54 <process_event+0x20>
     a48:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     a4c:	2300      	movs	r3, #0
     a4e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     a50:	9301      	str	r3, [sp, #4]
}
     a52:	e055      	b.n	b00 <__data_size+0x2c>
		if (evt == EVT_COMPLETE) {
     a54:	2901      	cmp	r1, #1
     a56:	d009      	beq.n	a6c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     a58:	f043 0320 	orr.w	r3, r3, #32
     a5c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     a5e:	f385 8811 	msr	BASEPRI, r5
     a62:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     a66:	b003      	add	sp, #12
     a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     a6c:	f043 0310 	orr.w	r3, r3, #16
     a70:	8323      	strh	r3, [r4, #24]
     a72:	e7f4      	b.n	a5e <process_event+0x2a>
			evt = process_recheck(mgr);
     a74:	4620      	mov	r0, r4
     a76:	f005 fdac 	bl	65d2 <process_recheck>
     a7a:	e043      	b.n	b04 <__data_size+0x30>
			res = mgr->last_res;
     a7c:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     a80:	464a      	mov	r2, r9
     a82:	4669      	mov	r1, sp
     a84:	4620      	mov	r0, r4
     a86:	f005 fdbd 	bl	6604 <process_complete>
		onoff_transition_fn transit = NULL;
     a8a:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     a8e:	8b23      	ldrh	r3, [r4, #24]
     a90:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     a94:	42b7      	cmp	r7, r6
     a96:	d069      	beq.n	b6c <__data_size+0x98>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     a98:	68a2      	ldr	r2, [r4, #8]
     a9a:	2a00      	cmp	r2, #0
     a9c:	d066      	beq.n	b6c <__data_size+0x98>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     a9e:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     aa0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     aa4:	8323      	strh	r3, [r4, #24]
     aa6:	f385 8811 	msr	BASEPRI, r5
     aaa:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     aae:	2a00      	cmp	r2, #0
     ab0:	d164      	bne.n	b7c <__data_size+0xa8>
     ab2:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     ab4:	b12b      	cbz	r3, ac2 <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
     ab6:	464b      	mov	r3, r9
     ab8:	463a      	mov	r2, r7
     aba:	4669      	mov	r1, sp
     abc:	4620      	mov	r0, r4
     abe:	f005 fe1a 	bl	66f6 <notify_all>
			if (transit != NULL) {
     ac2:	f1b8 0f00 	cmp.w	r8, #0
     ac6:	d002      	beq.n	ace <process_event+0x9a>
				transit(mgr, transition_complete);
     ac8:	4934      	ldr	r1, [pc, #208]	; (b9c <__data_size+0xc8>)
     aca:	4620      	mov	r0, r4
     acc:	47c0      	blx	r8
	__asm__ volatile(
     ace:	f04f 0320 	mov.w	r3, #32
     ad2:	f3ef 8511 	mrs	r5, BASEPRI
     ad6:	f383 8812 	msr	BASEPRI_MAX, r3
     ada:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     ade:	8b23      	ldrh	r3, [r4, #24]
     ae0:	f023 0308 	bic.w	r3, r3, #8
     ae4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     ae6:	8b23      	ldrh	r3, [r4, #24]
     ae8:	f013 0f10 	tst.w	r3, #16
     aec:	d04c      	beq.n	b88 <__data_size+0xb4>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     aee:	f023 0310 	bic.w	r3, r3, #16
     af2:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     af4:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     af6:	8b26      	ldrh	r6, [r4, #24]
     af8:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     afc:	2800      	cmp	r0, #0
     afe:	d0ae      	beq.n	a5e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     b00:	2802      	cmp	r0, #2
     b02:	d0b7      	beq.n	a74 <process_event+0x40>
		if (evt == EVT_NOP) {
     b04:	2800      	cmp	r0, #0
     b06:	d0aa      	beq.n	a5e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     b08:	3801      	subs	r0, #1
     b0a:	2804      	cmp	r0, #4
     b0c:	d82a      	bhi.n	b64 <__data_size+0x90>
     b0e:	a301      	add	r3, pc, #4	; (adr r3, b14 <__data_size+0x40>)
     b10:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     b14:	00000a7d 	.word	0x00000a7d
     b18:	00000b65 	.word	0x00000b65
     b1c:	00000b29 	.word	0x00000b29
     b20:	00000b3d 	.word	0x00000b3d
     b24:	00000b51 	.word	0x00000b51
			transit = mgr->transitions->start;
     b28:	6923      	ldr	r3, [r4, #16]
     b2a:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
     b2e:	2106      	movs	r1, #6
     b30:	4620      	mov	r0, r4
     b32:	f005 fd24 	bl	657e <set_state>
		res = 0;
     b36:	f04f 0900 	mov.w	r9, #0
     b3a:	e7a8      	b.n	a8e <process_event+0x5a>
			transit = mgr->transitions->stop;
     b3c:	6923      	ldr	r3, [r4, #16]
     b3e:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     b42:	2104      	movs	r1, #4
     b44:	4620      	mov	r0, r4
     b46:	f005 fd1a 	bl	657e <set_state>
		res = 0;
     b4a:	f04f 0900 	mov.w	r9, #0
     b4e:	e79e      	b.n	a8e <process_event+0x5a>
			transit = mgr->transitions->reset;
     b50:	6923      	ldr	r3, [r4, #16]
     b52:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     b56:	2105      	movs	r1, #5
     b58:	4620      	mov	r0, r4
     b5a:	f005 fd10 	bl	657e <set_state>
		res = 0;
     b5e:	f04f 0900 	mov.w	r9, #0
     b62:	e794      	b.n	a8e <process_event+0x5a>
		if (evt == EVT_NOP) {
     b64:	f04f 0800 	mov.w	r8, #0
     b68:	46c1      	mov	r9, r8
     b6a:	e790      	b.n	a8e <process_event+0x5a>
     b6c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     b6e:	b10a      	cbz	r2, b74 <__data_size+0xa0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     b70:	2200      	movs	r2, #0
     b72:	e795      	b.n	aa0 <process_event+0x6c>
		    || (transit != NULL)) {
     b74:	f1b8 0f00 	cmp.w	r8, #0
     b78:	d192      	bne.n	aa0 <process_event+0x6c>
     b7a:	e7b4      	b.n	ae6 <__data_size+0x12>
				notify_monitors(mgr, state, res);
     b7c:	464a      	mov	r2, r9
     b7e:	4639      	mov	r1, r7
     b80:	4620      	mov	r0, r4
     b82:	f005 fd04 	bl	658e <notify_monitors>
     b86:	e794      	b.n	ab2 <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     b88:	f013 0f20 	tst.w	r3, #32
     b8c:	d004      	beq.n	b98 <__data_size+0xc4>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     b8e:	f023 0320 	bic.w	r3, r3, #32
     b92:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     b94:	2002      	movs	r0, #2
     b96:	e7ae      	b.n	af6 <__data_size+0x22>
		evt = EVT_NOP;
     b98:	2000      	movs	r0, #0
     b9a:	e7ac      	b.n	af6 <__data_size+0x22>
     b9c:	00006725 	.word	0x00006725

00000ba0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
     ba0:	4684      	mov	ip, r0
	const char *sp = *str;
     ba2:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
     ba4:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp) != 0) {
     ba6:	e006      	b.n	bb6 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
     ba8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     bac:	3201      	adds	r2, #1
     bae:	eb03 0340 	add.w	r3, r3, r0, lsl #1
     bb2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     bb6:	7813      	ldrb	r3, [r2, #0]
     bb8:	4903      	ldr	r1, [pc, #12]	; (bc8 <extract_decimal+0x28>)
     bba:	5cc9      	ldrb	r1, [r1, r3]
     bbc:	f011 0f04 	tst.w	r1, #4
     bc0:	d1f2      	bne.n	ba8 <extract_decimal+0x8>
	}
	*str = sp;
     bc2:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
     bc6:	4770      	bx	lr
     bc8:	00009655 	.word	0x00009655

00000bcc <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
     bcc:	4684      	mov	ip, r0
     bce:	4608      	mov	r0, r1
	bool loop = true;
     bd0:	2201      	movs	r2, #1
     bd2:	e026      	b.n	c22 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
     bd4:	f89c 3000 	ldrb.w	r3, [ip]
     bd8:	f043 0304 	orr.w	r3, r3, #4
     bdc:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
     be0:	b1f2      	cbz	r2, c20 <extract_flags+0x54>
			++sp;
     be2:	3001      	adds	r0, #1
     be4:	e01c      	b.n	c20 <extract_flags+0x54>
			conv->flag_plus = true;
     be6:	f89c 3000 	ldrb.w	r3, [ip]
     bea:	f043 0308 	orr.w	r3, r3, #8
     bee:	f88c 3000 	strb.w	r3, [ip]
			break;
     bf2:	e7f5      	b.n	be0 <extract_flags+0x14>
			conv->flag_space = true;
     bf4:	f89c 3000 	ldrb.w	r3, [ip]
     bf8:	f043 0310 	orr.w	r3, r3, #16
     bfc:	f88c 3000 	strb.w	r3, [ip]
			break;
     c00:	e7ee      	b.n	be0 <extract_flags+0x14>
			conv->flag_hash = true;
     c02:	f89c 3000 	ldrb.w	r3, [ip]
     c06:	f043 0320 	orr.w	r3, r3, #32
     c0a:	f88c 3000 	strb.w	r3, [ip]
			break;
     c0e:	e7e7      	b.n	be0 <extract_flags+0x14>
			conv->flag_zero = true;
     c10:	f89c 3000 	ldrb.w	r3, [ip]
     c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     c18:	f88c 3000 	strb.w	r3, [ip]
			break;
     c1c:	e7e0      	b.n	be0 <extract_flags+0x14>
		switch (*sp) {
     c1e:	2200      	movs	r2, #0
		}
	} while (loop);
     c20:	b342      	cbz	r2, c74 <extract_flags+0xa8>
		switch (*sp) {
     c22:	7803      	ldrb	r3, [r0, #0]
     c24:	3b20      	subs	r3, #32
     c26:	2b10      	cmp	r3, #16
     c28:	d8f9      	bhi.n	c1e <extract_flags+0x52>
     c2a:	a101      	add	r1, pc, #4	; (adr r1, c30 <extract_flags+0x64>)
     c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     c30:	00000bf5 	.word	0x00000bf5
     c34:	00000c1f 	.word	0x00000c1f
     c38:	00000c1f 	.word	0x00000c1f
     c3c:	00000c03 	.word	0x00000c03
     c40:	00000c1f 	.word	0x00000c1f
     c44:	00000c1f 	.word	0x00000c1f
     c48:	00000c1f 	.word	0x00000c1f
     c4c:	00000c1f 	.word	0x00000c1f
     c50:	00000c1f 	.word	0x00000c1f
     c54:	00000c1f 	.word	0x00000c1f
     c58:	00000c1f 	.word	0x00000c1f
     c5c:	00000be7 	.word	0x00000be7
     c60:	00000c1f 	.word	0x00000c1f
     c64:	00000bd5 	.word	0x00000bd5
     c68:	00000c1f 	.word	0x00000c1f
     c6c:	00000c1f 	.word	0x00000c1f
     c70:	00000c11 	.word	0x00000c11

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
     c74:	f89c 3000 	ldrb.w	r3, [ip]
     c78:	f003 0344 	and.w	r3, r3, #68	; 0x44
     c7c:	2b44      	cmp	r3, #68	; 0x44
     c7e:	d000      	beq.n	c82 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
     c80:	4770      	bx	lr
		conv->flag_zero = false;
     c82:	f89c 3000 	ldrb.w	r3, [ip]
     c86:	f36f 1386 	bfc	r3, #6, #1
     c8a:	f88c 3000 	strb.w	r3, [ip]
     c8e:	e7f7      	b.n	c80 <extract_flags+0xb4>

00000c90 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
     c90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c94:	4605      	mov	r5, r0
     c96:	460c      	mov	r4, r1
     c98:	4693      	mov	fp, r2
     c9a:	4699      	mov	r9, r3
     c9c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier) != 0;
     c9e:	78d0      	ldrb	r0, [r2, #3]
     ca0:	4b25      	ldr	r3, [pc, #148]	; (d38 <encode_uint+0xa8>)
     ca2:	f813 a000 	ldrb.w	sl, [r3, r0]
     ca6:	f00a 0a03 	and.w	sl, sl, #3
	const unsigned int radix = conversion_radix(conv->specifier);
     caa:	f005 ff66 	bl	6b7a <conversion_radix>
     cae:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
     cb0:	e015      	b.n	cde <encode_uint+0x4e>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
     cb2:	f1ba 0f01 	cmp.w	sl, #1
     cb6:	d020      	beq.n	cfa <encode_uint+0x6a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
     cb8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
     cba:	3257      	adds	r2, #87	; 0x57
     cbc:	b2d2      	uxtb	r2, r2
     cbe:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
     cc2:	4632      	mov	r2, r6
     cc4:	4643      	mov	r3, r8
     cc6:	4628      	mov	r0, r5
     cc8:	4621      	mov	r1, r4
     cca:	f7ff fa59 	bl	180 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
     cce:	42b5      	cmp	r5, r6
     cd0:	f174 0400 	sbcs.w	r4, r4, #0
     cd4:	d315      	bcc.n	d02 <encode_uint+0x72>
     cd6:	454f      	cmp	r7, r9
     cd8:	d913      	bls.n	d02 <encode_uint+0x72>
		value /= radix;
     cda:	4605      	mov	r5, r0
     cdc:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
     cde:	f04f 0800 	mov.w	r8, #0
     ce2:	4632      	mov	r2, r6
     ce4:	4643      	mov	r3, r8
     ce6:	4628      	mov	r0, r5
     ce8:	4621      	mov	r1, r4
     cea:	f7ff fa49 	bl	180 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
     cee:	2a09      	cmp	r2, #9
     cf0:	d8df      	bhi.n	cb2 <encode_uint+0x22>
     cf2:	b2d2      	uxtb	r2, r2
     cf4:	3230      	adds	r2, #48	; 0x30
     cf6:	b2d2      	uxtb	r2, r2
     cf8:	e7e1      	b.n	cbe <encode_uint+0x2e>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
     cfa:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
     cfc:	3237      	adds	r2, #55	; 0x37
     cfe:	b2d2      	uxtb	r2, r2
     d00:	e7dd      	b.n	cbe <encode_uint+0x2e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
     d02:	f89b 3000 	ldrb.w	r3, [fp]
     d06:	f013 0f20 	tst.w	r3, #32
     d0a:	d003      	beq.n	d14 <encode_uint+0x84>
		if (radix == 8) {
     d0c:	2e08      	cmp	r6, #8
     d0e:	d004      	beq.n	d1a <encode_uint+0x8a>
			conv->altform_0 = true;
		} else if (radix == 16) {
     d10:	2e10      	cmp	r6, #16
     d12:	d009      	beq.n	d28 <encode_uint+0x98>
			;
		}
	}

	return bp;
}
     d14:	4638      	mov	r0, r7
     d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
     d1a:	f89b 3002 	ldrb.w	r3, [fp, #2]
     d1e:	f043 0308 	orr.w	r3, r3, #8
     d22:	f88b 3002 	strb.w	r3, [fp, #2]
     d26:	e7f5      	b.n	d14 <encode_uint+0x84>
			conv->altform_0c = true;
     d28:	f89b 3002 	ldrb.w	r3, [fp, #2]
     d2c:	f043 0310 	orr.w	r3, r3, #16
     d30:	f88b 3002 	strb.w	r3, [fp, #2]
     d34:	e7ee      	b.n	d14 <encode_uint+0x84>
     d36:	bf00      	nop
     d38:	00009655 	.word	0x00009655

00000d3c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d40:	b091      	sub	sp, #68	; 0x44
     d42:	4606      	mov	r6, r0
     d44:	460d      	mov	r5, r1
     d46:	4691      	mov	r9, r2
     d48:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     d4a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     d4c:	f899 0000 	ldrb.w	r0, [r9]
     d50:	2800      	cmp	r0, #0
     d52:	f000 82b9 	beq.w	12c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c8>
		if (*fp != '%') {
     d56:	2825      	cmp	r0, #37	; 0x25
     d58:	d008      	beq.n	d6c <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
     d5a:	f109 0901 	add.w	r9, r9, #1
     d5e:	4629      	mov	r1, r5
     d60:	47b0      	blx	r6
     d62:	2800      	cmp	r0, #0
     d64:	f2c0 82b1 	blt.w	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
     d68:	3401      	adds	r4, #1
			continue;
     d6a:	e7ef      	b.n	d4c <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     d6c:	2300      	movs	r3, #0
     d6e:	9304      	str	r3, [sp, #16]
     d70:	9305      	str	r3, [sp, #20]
     d72:	9306      	str	r3, [sp, #24]
     d74:	9307      	str	r3, [sp, #28]
     d76:	9308      	str	r3, [sp, #32]
     d78:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     d7a:	4649      	mov	r1, r9
     d7c:	a806      	add	r0, sp, #24
     d7e:	f005 feda 	bl	6b36 <extract_conversion>
     d82:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     d84:	f89d 3019 	ldrb.w	r3, [sp, #25]
     d88:	f013 0f01 	tst.w	r3, #1
     d8c:	f000 8097 	beq.w	ebe <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
     d90:	9b03      	ldr	r3, [sp, #12]
     d92:	1d1a      	adds	r2, r3, #4
     d94:	9203      	str	r2, [sp, #12]
     d96:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     d98:	2f00      	cmp	r7, #0
     d9a:	f2c0 8088 	blt.w	eae <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     d9e:	f89d 3019 	ldrb.w	r3, [sp, #25]
     da2:	f013 0f04 	tst.w	r3, #4
     da6:	f000 809c 	beq.w	ee2 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
     daa:	9b03      	ldr	r3, [sp, #12]
     dac:	1d1a      	adds	r2, r3, #4
     dae:	9203      	str	r2, [sp, #12]
     db0:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     db4:	f1ba 0f00 	cmp.w	sl, #0
     db8:	f2c0 808a 	blt.w	ed0 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     dbc:	2300      	movs	r3, #0
     dbe:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     dc0:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     dc2:	f89d 301a 	ldrb.w	r3, [sp, #26]
     dc6:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     dca:	f89d 1019 	ldrb.w	r1, [sp, #25]
     dce:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     dd2:	2b01      	cmp	r3, #1
     dd4:	f000 808e 	beq.w	ef4 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     dd8:	2b02      	cmp	r3, #2
     dda:	f000 80d3 	beq.w	f84 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     dde:	2b04      	cmp	r3, #4
     de0:	f000 8124 	beq.w	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     de4:	2b03      	cmp	r3, #3
     de6:	f000 813b 	beq.w	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     dea:	f89d 8018 	ldrb.w	r8, [sp, #24]
     dee:	f018 0b03 	ands.w	fp, r8, #3
     df2:	f040 813b 	bne.w	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     df6:	f89d 301b 	ldrb.w	r3, [sp, #27]
     dfa:	3b25      	subs	r3, #37	; 0x25
     dfc:	2b53      	cmp	r3, #83	; 0x53
     dfe:	f200 81ca 	bhi.w	1196 <CONFIG_FPROTECT_BLOCK_SIZE+0x196>
     e02:	e8df f013 	tbh	[pc, r3, lsl #1]
     e06:	0140      	.short	0x0140
     e08:	01c801c8 	.word	0x01c801c8
     e0c:	01c801c8 	.word	0x01c801c8
     e10:	01c801c8 	.word	0x01c801c8
     e14:	01c801c8 	.word	0x01c801c8
     e18:	01c801c8 	.word	0x01c801c8
     e1c:	01c801c8 	.word	0x01c801c8
     e20:	01c801c8 	.word	0x01c801c8
     e24:	01c801c8 	.word	0x01c801c8
     e28:	01c801c8 	.word	0x01c801c8
     e2c:	01c801c8 	.word	0x01c801c8
     e30:	01c801c8 	.word	0x01c801c8
     e34:	01c801c8 	.word	0x01c801c8
     e38:	01c801c8 	.word	0x01c801c8
     e3c:	01c801c8 	.word	0x01c801c8
     e40:	01c801c8 	.word	0x01c801c8
     e44:	01c801c8 	.word	0x01c801c8
     e48:	01c801c8 	.word	0x01c801c8
     e4c:	01c801c8 	.word	0x01c801c8
     e50:	01c801c8 	.word	0x01c801c8
     e54:	01c801c8 	.word	0x01c801c8
     e58:	01c801c8 	.word	0x01c801c8
     e5c:	01c801c8 	.word	0x01c801c8
     e60:	01c801c8 	.word	0x01c801c8
     e64:	01c801c8 	.word	0x01c801c8
     e68:	01c801c8 	.word	0x01c801c8
     e6c:	01c80181 	.word	0x01c80181
     e70:	01c801c8 	.word	0x01c801c8
     e74:	01c801c8 	.word	0x01c801c8
     e78:	01c801c8 	.word	0x01c801c8
     e7c:	01c801c8 	.word	0x01c801c8
     e80:	015e01c8 	.word	0x015e01c8
     e84:	01c80167 	.word	0x01c80167
     e88:	01c801c8 	.word	0x01c801c8
     e8c:	016701c8 	.word	0x016701c8
     e90:	01c801c8 	.word	0x01c801c8
     e94:	01c801c8 	.word	0x01c801c8
     e98:	018101bd 	.word	0x018101bd
     e9c:	01c801a1 	.word	0x01c801a1
     ea0:	014d01c8 	.word	0x014d01c8
     ea4:	018101c8 	.word	0x018101c8
     ea8:	01c801c8 	.word	0x01c801c8
     eac:	0181      	.short	0x0181
				conv->flag_dash = true;
     eae:	f89d 3018 	ldrb.w	r3, [sp, #24]
     eb2:	f043 0304 	orr.w	r3, r3, #4
     eb6:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     eba:	427f      	negs	r7, r7
     ebc:	e76f      	b.n	d9e <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
     ebe:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     ec2:	2b00      	cmp	r3, #0
     ec4:	db02      	blt.n	ecc <z_cbvprintf_impl+0x190>
		int width = -1;
     ec6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     eca:	e768      	b.n	d9e <z_cbvprintf_impl+0x62>
			width = conv->width_value;
     ecc:	9f07      	ldr	r7, [sp, #28]
     ece:	e766      	b.n	d9e <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
     ed0:	f89d 3019 	ldrb.w	r3, [sp, #25]
     ed4:	f36f 0341 	bfc	r3, #1, #1
     ed8:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     edc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     ee0:	e76c      	b.n	dbc <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
     ee2:	f013 0f02 	tst.w	r3, #2
     ee6:	d002      	beq.n	eee <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
     ee8:	f8dd a020 	ldr.w	sl, [sp, #32]
     eec:	e766      	b.n	dbc <z_cbvprintf_impl+0x80>
		int precision = -1;
     eee:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     ef2:	e763      	b.n	dbc <z_cbvprintf_impl+0x80>
			switch (length_mod) {
     ef4:	1ecb      	subs	r3, r1, #3
     ef6:	2b04      	cmp	r3, #4
     ef8:	d804      	bhi.n	f04 <z_cbvprintf_impl+0x1c8>
     efa:	e8df f003 	tbb	[pc, r3]
     efe:	1d0b      	.short	0x1d0b
     f00:	3529      	.short	0x3529
     f02:	35          	.byte	0x35
     f03:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     f04:	9b03      	ldr	r3, [sp, #12]
     f06:	1d1a      	adds	r2, r3, #4
     f08:	9203      	str	r2, [sp, #12]
     f0a:	681b      	ldr	r3, [r3, #0]
     f0c:	17da      	asrs	r2, r3, #31
     f0e:	9304      	str	r3, [sp, #16]
     f10:	9205      	str	r2, [sp, #20]
				break;
     f12:	e006      	b.n	f22 <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
     f14:	9b03      	ldr	r3, [sp, #12]
     f16:	1d1a      	adds	r2, r3, #4
     f18:	9203      	str	r2, [sp, #12]
     f1a:	681b      	ldr	r3, [r3, #0]
     f1c:	17da      	asrs	r2, r3, #31
     f1e:	9304      	str	r3, [sp, #16]
     f20:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     f22:	2901      	cmp	r1, #1
     f24:	d028      	beq.n	f78 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
     f26:	2902      	cmp	r1, #2
     f28:	f47f af5f 	bne.w	dea <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
     f2c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     f30:	17da      	asrs	r2, r3, #31
     f32:	9304      	str	r3, [sp, #16]
     f34:	9205      	str	r2, [sp, #20]
     f36:	e758      	b.n	dea <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	3307      	adds	r3, #7
     f3c:	f023 0307 	bic.w	r3, r3, #7
     f40:	f103 0208 	add.w	r2, r3, #8
     f44:	9203      	str	r2, [sp, #12]
     f46:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     f4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     f4e:	e7e8      	b.n	f22 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
     f50:	9b03      	ldr	r3, [sp, #12]
     f52:	3307      	adds	r3, #7
     f54:	f023 0307 	bic.w	r3, r3, #7
     f58:	f103 0208 	add.w	r2, r3, #8
     f5c:	9203      	str	r2, [sp, #12]
     f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     f62:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     f66:	e7dc      	b.n	f22 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f68:	9b03      	ldr	r3, [sp, #12]
     f6a:	1d1a      	adds	r2, r3, #4
     f6c:	9203      	str	r2, [sp, #12]
     f6e:	681b      	ldr	r3, [r3, #0]
     f70:	17da      	asrs	r2, r3, #31
				value->sint =
     f72:	9304      	str	r3, [sp, #16]
     f74:	9205      	str	r2, [sp, #20]
				break;
     f76:	e7d4      	b.n	f22 <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
     f78:	f99d 3010 	ldrsb.w	r3, [sp, #16]
     f7c:	17da      	asrs	r2, r3, #31
     f7e:	9304      	str	r3, [sp, #16]
     f80:	9205      	str	r2, [sp, #20]
     f82:	e732      	b.n	dea <z_cbvprintf_impl+0xae>
			switch (length_mod) {
     f84:	1ecb      	subs	r3, r1, #3
     f86:	2b04      	cmp	r3, #4
     f88:	d804      	bhi.n	f94 <z_cbvprintf_impl+0x258>
     f8a:	e8df f003 	tbb	[pc, r3]
     f8e:	1f0b      	.short	0x1f0b
     f90:	4135      	.short	0x4135
     f92:	41          	.byte	0x41
     f93:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     f94:	9b03      	ldr	r3, [sp, #12]
     f96:	1d1a      	adds	r2, r3, #4
     f98:	9203      	str	r2, [sp, #12]
     f9a:	681b      	ldr	r3, [r3, #0]
     f9c:	9304      	str	r3, [sp, #16]
     f9e:	2300      	movs	r3, #0
     fa0:	9305      	str	r3, [sp, #20]
				break;
     fa2:	e01e      	b.n	fe2 <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
     fa4:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     fa8:	2b63      	cmp	r3, #99	; 0x63
     faa:	d007      	beq.n	fbc <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
     fac:	9b03      	ldr	r3, [sp, #12]
     fae:	1d1a      	adds	r2, r3, #4
     fb0:	9203      	str	r2, [sp, #12]
     fb2:	681b      	ldr	r3, [r3, #0]
     fb4:	9304      	str	r3, [sp, #16]
     fb6:	2300      	movs	r3, #0
     fb8:	9305      	str	r3, [sp, #20]
     fba:	e012      	b.n	fe2 <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
     fbc:	9b03      	ldr	r3, [sp, #12]
     fbe:	1d1a      	adds	r2, r3, #4
     fc0:	9203      	str	r2, [sp, #12]
     fc2:	681b      	ldr	r3, [r3, #0]
     fc4:	9304      	str	r3, [sp, #16]
     fc6:	2300      	movs	r3, #0
     fc8:	9305      	str	r3, [sp, #20]
     fca:	e00a      	b.n	fe2 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
     fcc:	9b03      	ldr	r3, [sp, #12]
     fce:	3307      	adds	r3, #7
     fd0:	f023 0307 	bic.w	r3, r3, #7
     fd4:	f103 0208 	add.w	r2, r3, #8
     fd8:	9203      	str	r2, [sp, #12]
     fda:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     fde:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     fe2:	2901      	cmp	r1, #1
     fe4:	d01c      	beq.n	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
			} else if (length_mod == LENGTH_H) {
     fe6:	2902      	cmp	r1, #2
     fe8:	f47f aeff 	bne.w	dea <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
     fec:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     ff0:	9304      	str	r3, [sp, #16]
     ff2:	2300      	movs	r3, #0
     ff4:	9305      	str	r3, [sp, #20]
     ff6:	e6f8      	b.n	dea <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
     ff8:	9b03      	ldr	r3, [sp, #12]
     ffa:	3307      	adds	r3, #7
     ffc:	f023 0307 	bic.w	r3, r3, #7
    1000:	f103 0208 	add.w	r2, r3, #8
    1004:	9203      	str	r2, [sp, #12]
    1006:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    100a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    100e:	e7e8      	b.n	fe2 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    1010:	9b03      	ldr	r3, [sp, #12]
    1012:	1d1a      	adds	r2, r3, #4
    1014:	9203      	str	r2, [sp, #12]
    1016:	681b      	ldr	r3, [r3, #0]
				value->uint =
    1018:	9304      	str	r3, [sp, #16]
    101a:	2300      	movs	r3, #0
    101c:	9305      	str	r3, [sp, #20]
				break;
    101e:	e7e0      	b.n	fe2 <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
    1020:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1024:	9304      	str	r3, [sp, #16]
    1026:	2300      	movs	r3, #0
    1028:	9305      	str	r3, [sp, #20]
    102a:	e6de      	b.n	dea <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    102c:	2908      	cmp	r1, #8
    102e:	d00b      	beq.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
				value->dbl = va_arg(ap, double);
    1030:	9b03      	ldr	r3, [sp, #12]
    1032:	3307      	adds	r3, #7
    1034:	f023 0307 	bic.w	r3, r3, #7
    1038:	f103 0208 	add.w	r2, r3, #8
    103c:	9203      	str	r2, [sp, #12]
    103e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1042:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1046:	e6d0      	b.n	dea <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
    1048:	9b03      	ldr	r3, [sp, #12]
    104a:	3307      	adds	r3, #7
    104c:	f023 0307 	bic.w	r3, r3, #7
    1050:	f103 0208 	add.w	r2, r3, #8
    1054:	9203      	str	r2, [sp, #12]
    1056:	e9d3 2300 	ldrd	r2, r3, [r3]
    105a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    105e:	e6c4      	b.n	dea <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
    1060:	9b03      	ldr	r3, [sp, #12]
    1062:	1d1a      	adds	r2, r3, #4
    1064:	9203      	str	r2, [sp, #12]
    1066:	681b      	ldr	r3, [r3, #0]
    1068:	9304      	str	r3, [sp, #16]
    106a:	e6be      	b.n	dea <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
    106c:	9f02      	ldr	r7, [sp, #8]
    106e:	463b      	mov	r3, r7
    1070:	464a      	mov	r2, r9
    1072:	4629      	mov	r1, r5
    1074:	4630      	mov	r0, r6
    1076:	f005 fdb4 	bl	6be2 <outs>
    107a:	2800      	cmp	r0, #0
    107c:	f2c0 8125 	blt.w	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    1080:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    1082:	46b9      	mov	r9, r7
			continue;
    1084:	e662      	b.n	d4c <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    1086:	4629      	mov	r1, r5
    1088:	2025      	movs	r0, #37	; 0x25
    108a:	47b0      	blx	r6
    108c:	2800      	cmp	r0, #0
    108e:	f2c0 811c 	blt.w	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    1092:	3401      	adds	r4, #1
		char sign = 0;
    1094:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1096:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    109a:	f04f 0900 	mov.w	r9, #0
			break;
    109e:	e07f      	b.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
		case 's': {
			bps = (const char *)value->ptr;
    10a0:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    10a4:	f1ba 0f00 	cmp.w	sl, #0
    10a8:	da06      	bge.n	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
				len = strnlen(bps, precision);
			} else {
				len = strlen(bps);
    10aa:	4648      	mov	r0, r9
    10ac:	f7ff f9dc 	bl	468 <strlen>
			}

			bpe = bps + len;
    10b0:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    10b4:	46d8      	mov	r8, fp
			precision = -1;

			break;
    10b6:	e073      	b.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
				len = strnlen(bps, precision);
    10b8:	4651      	mov	r1, sl
    10ba:	4648      	mov	r0, r9
    10bc:	f007 fd44 	bl	8b48 <strnlen>
    10c0:	e7f6      	b.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    10c2:	9b04      	ldr	r3, [sp, #16]
    10c4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    10c8:	46d8      	mov	r8, fp
			bpe = buf + 1;
    10ca:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    10ce:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    10d2:	e065      	b.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    10d4:	f018 0f08 	tst.w	r8, #8
    10d8:	d105      	bne.n	10e6 <CONFIG_FPROTECT_BLOCK_SIZE+0xe6>
				sign = '+';
			} else if (conv->flag_space) {
    10da:	f018 0810 	ands.w	r8, r8, #16
    10de:	d004      	beq.n	10ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
				sign = ' ';
    10e0:	f04f 0820 	mov.w	r8, #32
    10e4:	e001      	b.n	10ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
				sign = '+';
    10e6:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    10ea:	9a04      	ldr	r2, [sp, #16]
    10ec:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    10ee:	2b00      	cmp	r3, #0
    10f0:	db02      	blt.n	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    10f2:	9204      	str	r2, [sp, #16]
    10f4:	9305      	str	r3, [sp, #20]
    10f6:	e008      	b.n	110a <CONFIG_FPROTECT_BLOCK_SIZE+0x10a>
				value->uint = (uint_value_type)-sint;
    10f8:	4252      	negs	r2, r2
    10fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    10fe:	9204      	str	r2, [sp, #16]
    1100:	9305      	str	r3, [sp, #20]
				sign = '-';
    1102:	f04f 082d 	mov.w	r8, #45	; 0x2d
    1106:	e000      	b.n	110a <CONFIG_FPROTECT_BLOCK_SIZE+0x10a>
		switch (conv->specifier) {
    1108:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    110a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    110e:	9300      	str	r3, [sp, #0]
    1110:	ab0a      	add	r3, sp, #40	; 0x28
    1112:	aa06      	add	r2, sp, #24
    1114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1118:	f7ff fdba 	bl	c90 <encode_uint>
    111c:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    111e:	f1ba 0f00 	cmp.w	sl, #0
    1122:	db6c      	blt.n	11fe <CONFIG_FPROTECT_BLOCK_SIZE+0x1fe>
				size_t len = bpe - bps;
    1124:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1128:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    112c:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1130:	f36f 1286 	bfc	r2, #6, #1
    1134:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    1138:	459a      	cmp	sl, r3
    113a:	d963      	bls.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
					conv->pad0_value = precision - (int)len;
    113c:	ebaa 0303 	sub.w	r3, sl, r3
    1140:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    1142:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1146:	e02b      	b.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    1148:	9804      	ldr	r0, [sp, #16]
    114a:	b928      	cbnz	r0, 1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
		char sign = 0;
    114c:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    114e:	f8df a180 	ldr.w	sl, [pc, #384]	; 12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
			bps = "(nil)";
    1152:	f1aa 0905 	sub.w	r9, sl, #5
    1156:	e023      	b.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1158:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    115c:	9300      	str	r3, [sp, #0]
    115e:	ab0a      	add	r3, sp, #40	; 0x28
    1160:	aa06      	add	r2, sp, #24
    1162:	2100      	movs	r1, #0
    1164:	f7ff fd94 	bl	c90 <encode_uint>
    1168:	4681      	mov	r9, r0
				conv->altform_0c = true;
    116a:	f89d 301a 	ldrb.w	r3, [sp, #26]
    116e:	f043 0310 	orr.w	r3, r3, #16
    1172:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    1176:	2378      	movs	r3, #120	; 0x78
    1178:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    117c:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    117e:	e7ce      	b.n	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1180:	4622      	mov	r2, r4
    1182:	9904      	ldr	r1, [sp, #16]
    1184:	a806      	add	r0, sp, #24
    1186:	f005 fd0d 	bl	6ba4 <store_count>
		char sign = 0;
    118a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    118c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1190:	f04f 0900 	mov.w	r9, #0
			}

			break;
    1194:	e004      	b.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
		switch (conv->specifier) {
    1196:	46d8      	mov	r8, fp
    1198:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    119c:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    11a0:	f1b9 0f00 	cmp.w	r9, #0
    11a4:	f000 808d 	beq.w	12c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c2>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    11a8:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    11ac:	f1b8 0f00 	cmp.w	r8, #0
    11b0:	d000      	beq.n	11b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b4>
			nj_len += 1U;
    11b2:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    11b4:	f89d 101a 	ldrb.w	r1, [sp, #26]
    11b8:	f011 0f10 	tst.w	r1, #16
    11bc:	d025      	beq.n	120a <CONFIG_FPROTECT_BLOCK_SIZE+0x20a>
			nj_len += 2U;
    11be:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    11c0:	9b07      	ldr	r3, [sp, #28]
    11c2:	4413      	add	r3, r2
		if (conv->pad_fp) {
    11c4:	f011 0f40 	tst.w	r1, #64	; 0x40
    11c8:	d001      	beq.n	11ce <CONFIG_FPROTECT_BLOCK_SIZE+0x1ce>
			nj_len += conv->pad0_pre_exp;
    11ca:	9a08      	ldr	r2, [sp, #32]
    11cc:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    11ce:	2f00      	cmp	r7, #0
    11d0:	dd31      	ble.n	1236 <CONFIG_FPROTECT_BLOCK_SIZE+0x236>
			width -= (int)nj_len;
    11d2:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    11d4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    11d8:	f013 0f04 	tst.w	r3, #4
    11dc:	d12b      	bne.n	1236 <CONFIG_FPROTECT_BLOCK_SIZE+0x236>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    11de:	f013 0f40 	tst.w	r3, #64	; 0x40
    11e2:	d017      	beq.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
					if (sign != 0) {
    11e4:	f1b8 0f00 	cmp.w	r8, #0
    11e8:	d017      	beq.n	121a <CONFIG_FPROTECT_BLOCK_SIZE+0x21a>
						OUTC(sign);
    11ea:	4629      	mov	r1, r5
    11ec:	4640      	mov	r0, r8
    11ee:	47b0      	blx	r6
    11f0:	2800      	cmp	r0, #0
    11f2:	db6a      	blt.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    11f4:	3401      	adds	r4, #1
						sign = 0;
    11f6:	46d8      	mov	r8, fp
					}
					pad = '0';
    11f8:	f04f 0b30 	mov.w	fp, #48	; 0x30
    11fc:	e00f      	b.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
		const char *bpe = buf + sizeof(buf);
    11fe:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1202:	e7cd      	b.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
    1204:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1208:	e7ca      	b.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
		} else if (conv->altform_0) {
    120a:	f011 0f08 	tst.w	r1, #8
    120e:	d0d7      	beq.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
			nj_len += 1U;
    1210:	3201      	adds	r2, #1
    1212:	e7d5      	b.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
				char pad = ' ';
    1214:	f04f 0b20 	mov.w	fp, #32
    1218:	e001      	b.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
					pad = '0';
    121a:	f04f 0b30 	mov.w	fp, #48	; 0x30
    121e:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1220:	1e5f      	subs	r7, r3, #1
    1222:	2b00      	cmp	r3, #0
    1224:	dd07      	ble.n	1236 <CONFIG_FPROTECT_BLOCK_SIZE+0x236>
					OUTC(pad);
    1226:	4629      	mov	r1, r5
    1228:	4658      	mov	r0, fp
    122a:	47b0      	blx	r6
    122c:	2800      	cmp	r0, #0
    122e:	db4c      	blt.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    1230:	3401      	adds	r4, #1
				while (width-- > 0) {
    1232:	463b      	mov	r3, r7
    1234:	e7f4      	b.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1236:	f1b8 0f00 	cmp.w	r8, #0
    123a:	d005      	beq.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
			OUTC(sign);
    123c:	4629      	mov	r1, r5
    123e:	4640      	mov	r0, r8
    1240:	47b0      	blx	r6
    1242:	2800      	cmp	r0, #0
    1244:	db41      	blt.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    1246:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1248:	f89d 301a 	ldrb.w	r3, [sp, #26]
    124c:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1250:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1254:	431a      	orrs	r2, r3
    1256:	d005      	beq.n	1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
				OUTC('0');
    1258:	4629      	mov	r1, r5
    125a:	2030      	movs	r0, #48	; 0x30
    125c:	47b0      	blx	r6
    125e:	2800      	cmp	r0, #0
    1260:	db33      	blt.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    1262:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    1264:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1268:	f013 0f10 	tst.w	r3, #16
    126c:	d006      	beq.n	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
				OUTC(conv->specifier);
    126e:	4629      	mov	r1, r5
    1270:	f89d 001b 	ldrb.w	r0, [sp, #27]
    1274:	47b0      	blx	r6
    1276:	2800      	cmp	r0, #0
    1278:	db27      	blt.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    127a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    127c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    127e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1282:	2b00      	cmp	r3, #0
    1284:	dd07      	ble.n	1296 <CONFIG_FPROTECT_BLOCK_SIZE+0x296>
				OUTC('0');
    1286:	4629      	mov	r1, r5
    1288:	2030      	movs	r0, #48	; 0x30
    128a:	47b0      	blx	r6
    128c:	2800      	cmp	r0, #0
    128e:	db1c      	blt.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    1290:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1292:	4643      	mov	r3, r8
    1294:	e7f3      	b.n	127e <CONFIG_FPROTECT_BLOCK_SIZE+0x27e>
			}

			OUTS(bps, bpe);
    1296:	4653      	mov	r3, sl
    1298:	464a      	mov	r2, r9
    129a:	4629      	mov	r1, r5
    129c:	4630      	mov	r0, r6
    129e:	f005 fca0 	bl	6be2 <outs>
    12a2:	2800      	cmp	r0, #0
    12a4:	db11      	blt.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    12a6:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    12a8:	2f00      	cmp	r7, #0
    12aa:	dd07      	ble.n	12bc <CONFIG_FPROTECT_BLOCK_SIZE+0x2bc>
			OUTC(' ');
    12ac:	4629      	mov	r1, r5
    12ae:	2020      	movs	r0, #32
    12b0:	47b0      	blx	r6
    12b2:	2800      	cmp	r0, #0
    12b4:	db09      	blt.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    12b6:	3401      	adds	r4, #1
			--width;
    12b8:	3f01      	subs	r7, #1
    12ba:	e7f5      	b.n	12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>
		fp = extract_conversion(conv, sp);
    12bc:	f8dd 9008 	ldr.w	r9, [sp, #8]
    12c0:	e544      	b.n	d4c <z_cbvprintf_impl+0x10>
    12c2:	f8dd 9008 	ldr.w	r9, [sp, #8]
    12c6:	e541      	b.n	d4c <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    12c8:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    12ca:	b011      	add	sp, #68	; 0x44
    12cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d0:	00009305 	.word	0x00009305

000012d4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    12d4:	f002 b9d8 	b.w	3688 <SystemInit>

000012d8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    12d8:	b570      	push	{r4, r5, r6, lr}
    12da:	4605      	mov	r5, r0
    12dc:	f04f 0320 	mov.w	r3, #32
    12e0:	f3ef 8611 	mrs	r6, BASEPRI
    12e4:	f383 8812 	msr	BASEPRI_MAX, r3
    12e8:	f3bf 8f6f 	isb	sy
    12ec:	4b0e      	ldr	r3, [pc, #56]	; (1328 <pm_state_notify+0x50>)
    12ee:	681c      	ldr	r4, [r3, #0]
    12f0:	e00d      	b.n	130e <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
    12f2:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
    12f4:	b13a      	cbz	r2, 1306 <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    12f6:	4b0d      	ldr	r3, [pc, #52]	; (132c <pm_state_notify+0x54>)
    12f8:	7c1b      	ldrb	r3, [r3, #16]
    12fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    12fe:	490c      	ldr	r1, [pc, #48]	; (1330 <pm_state_notify+0x58>)
    1300:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1304:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1306:	4623      	mov	r3, r4
	return node->next;
    1308:	6824      	ldr	r4, [r4, #0]
    130a:	b104      	cbz	r4, 130e <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    130c:	b123      	cbz	r3, 1318 <pm_state_notify+0x40>
    130e:	b12c      	cbz	r4, 131c <pm_state_notify+0x44>
		if (entering_state) {
    1310:	2d00      	cmp	r5, #0
    1312:	d0ee      	beq.n	12f2 <pm_state_notify+0x1a>
			callback = notifier->state_entry;
    1314:	6862      	ldr	r2, [r4, #4]
    1316:	e7ed      	b.n	12f4 <pm_state_notify+0x1c>
    1318:	461c      	mov	r4, r3
    131a:	e7f8      	b.n	130e <pm_state_notify+0x36>
	__asm__ volatile(
    131c:	f386 8811 	msr	BASEPRI, r6
    1320:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1324:	bd70      	pop	{r4, r5, r6, pc}
    1326:	bf00      	nop
    1328:	200010e8 	.word	0x200010e8
    132c:	200017b0 	.word	0x200017b0
    1330:	200010dc 	.word	0x200010dc

00001334 <pm_exit_pos_ops>:
{
    1334:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
    1336:	4b06      	ldr	r3, [pc, #24]	; (1350 <pm_exit_pos_ops+0x1c>)
    1338:	b123      	cbz	r3, 1344 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
    133a:	7841      	ldrb	r1, [r0, #1]
    133c:	7800      	ldrb	r0, [r0, #0]
    133e:	f005 fd7c 	bl	6e3a <pm_state_exit_post_ops>
}
    1342:	bd08      	pop	{r3, pc}
    1344:	2300      	movs	r3, #0
    1346:	f383 8811 	msr	BASEPRI, r3
    134a:	f3bf 8f6f 	isb	sy
    134e:	e7f8      	b.n	1342 <pm_exit_pos_ops+0xe>
    1350:	00006e3b 	.word	0x00006e3b

00001354 <pm_system_resume>:

void pm_system_resume(void)
{
    1354:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    1356:	4b0e      	ldr	r3, [pc, #56]	; (1390 <pm_system_resume+0x3c>)
    1358:	7c1c      	ldrb	r4, [r3, #16]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    135a:	4621      	mov	r1, r4
    135c:	480d      	ldr	r0, [pc, #52]	; (1394 <pm_system_resume+0x40>)
    135e:	f005 fc5b 	bl	6c18 <atomic_test_and_clear_bit>
    1362:	b900      	cbnz	r0, 1366 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    1364:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    1366:	0065      	lsls	r5, r4, #1
    1368:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    136c:	4e0a      	ldr	r6, [pc, #40]	; (1398 <pm_system_resume+0x44>)
    136e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1372:	f7ff ffdf 	bl	1334 <pm_exit_pos_ops>
		pm_state_notify(false);
    1376:	2000      	movs	r0, #0
    1378:	f7ff ffae 	bl	12d8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    137c:	192b      	adds	r3, r5, r4
    137e:	0099      	lsls	r1, r3, #2
    1380:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    1384:	2200      	movs	r2, #0
    1386:	5072      	str	r2, [r6, r1]
    1388:	605a      	str	r2, [r3, #4]
    138a:	609a      	str	r2, [r3, #8]
}
    138c:	e7ea      	b.n	1364 <pm_system_resume+0x10>
    138e:	bf00      	nop
    1390:	200017b0 	.word	0x200017b0
    1394:	200010f0 	.word	0x200010f0
    1398:	200010dc 	.word	0x200010dc

0000139c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    139e:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
    13a0:	4b38      	ldr	r3, [pc, #224]	; (1484 <pm_system_suspend+0xe8>)
    13a2:	7c1c      	ldrb	r4, [r3, #16]
	__asm__ volatile(
    13a4:	f04f 0320 	mov.w	r3, #32
    13a8:	f3ef 8611 	mrs	r6, BASEPRI
    13ac:	f383 8812 	msr	BASEPRI_MAX, r3
    13b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    13b4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    13b8:	4b33      	ldr	r3, [pc, #204]	; (1488 <pm_system_suspend+0xec>)
    13ba:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    13be:	2b00      	cmp	r3, #0
    13c0:	d039      	beq.n	1436 <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    13c2:	4b32      	ldr	r3, [pc, #200]	; (148c <pm_system_suspend+0xf0>)
    13c4:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    13c8:	4f2f      	ldr	r7, [pc, #188]	; (1488 <pm_system_suspend+0xec>)
    13ca:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    13ce:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    13d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    13d6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    13da:	2300      	movs	r3, #0
    13dc:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    13e0:	f386 8811 	msr	BASEPRI, r6
    13e4:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    13e8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    13ec:	4a27      	ldr	r2, [pc, #156]	; (148c <pm_system_suspend+0xf0>)
    13ee:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d044      	beq.n	1480 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    13f6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    13fa:	d12b      	bne.n	1454 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    13fc:	f003 fbe2 	bl	4bc4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1400:	2001      	movs	r0, #1
    1402:	f7ff ff69 	bl	12d8 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
    1406:	4621      	mov	r1, r4
    1408:	4821      	ldr	r0, [pc, #132]	; (1490 <pm_system_suspend+0xf4>)
    140a:	f005 fc21 	bl	6c50 <atomic_set_bit>
	if (pm_state_set != NULL) {
    140e:	4b21      	ldr	r3, [pc, #132]	; (1494 <pm_system_suspend+0xf8>)
    1410:	b15b      	cbz	r3, 142a <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
    1412:	4a1e      	ldr	r2, [pc, #120]	; (148c <pm_system_suspend+0xf0>)
    1414:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1418:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    141c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1420:	7859      	ldrb	r1, [r3, #1]
    1422:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    1426:	f005 fd00 	bl	6e2a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    142a:	f7ff ff93 	bl	1354 <pm_system_resume>
	k_sched_unlock();
    142e:	f003 fdb5 	bl	4f9c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    1432:	2001      	movs	r0, #1
}
    1434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    1436:	4601      	mov	r1, r0
    1438:	4620      	mov	r0, r4
    143a:	f000 f831 	bl	14a0 <pm_policy_next_state>
		if (info != NULL) {
    143e:	2800      	cmp	r0, #0
    1440:	d0ce      	beq.n	13e0 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    1442:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1446:	4b11      	ldr	r3, [pc, #68]	; (148c <pm_system_suspend+0xf0>)
    1448:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    144c:	c807      	ldmia	r0, {r0, r1, r2}
    144e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    1452:	e7c5      	b.n	13e0 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    1454:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1458:	4b0c      	ldr	r3, [pc, #48]	; (148c <pm_system_suspend+0xf0>)
    145a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    145e:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1460:	0c41      	lsrs	r1, r0, #17
    1462:	03c0      	lsls	r0, r0, #15
    1464:	4b0c      	ldr	r3, [pc, #48]	; (1498 <pm_system_suspend+0xfc>)
    1466:	18c0      	adds	r0, r0, r3
    1468:	4a0c      	ldr	r2, [pc, #48]	; (149c <pm_system_suspend+0x100>)
    146a:	f04f 0300 	mov.w	r3, #0
    146e:	f141 0100 	adc.w	r1, r1, #0
    1472:	f7fe fe85 	bl	180 <__aeabi_uldivmod>
		sys_clock_set_timeout(ticks -
    1476:	2101      	movs	r1, #1
    1478:	1a28      	subs	r0, r5, r0
    147a:	f002 f89b 	bl	35b4 <sys_clock_set_timeout>
    147e:	e7bd      	b.n	13fc <pm_system_suspend+0x60>
		return false;
    1480:	2000      	movs	r0, #0
    1482:	e7d7      	b.n	1434 <pm_system_suspend+0x98>
    1484:	200017b0 	.word	0x200017b0
    1488:	200010d0 	.word	0x200010d0
    148c:	200010dc 	.word	0x200010dc
    1490:	200010f0 	.word	0x200010f0
    1494:	00006e2b 	.word	0x00006e2b
    1498:	000f423f 	.word	0x000f423f
    149c:	000f4240 	.word	0x000f4240

000014a0 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    14a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14a4:	b082      	sub	sp, #8
    14a6:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    14a8:	a901      	add	r1, sp, #4
    14aa:	f000 f845 	bl	1538 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    14ae:	1e44      	subs	r4, r0, #1
    14b0:	b224      	sxth	r4, r4
    14b2:	e007      	b.n	14c4 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    14b4:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    14b8:	d033      	beq.n	1522 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    14ba:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    14bc:	45b0      	cmp	r8, r6
    14be:	d930      	bls.n	1522 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    14c0:	3c01      	subs	r4, #1
    14c2:	b224      	sxth	r4, r4
    14c4:	2c00      	cmp	r4, #0
    14c6:	db2b      	blt.n	1520 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    14c8:	9b01      	ldr	r3, [sp, #4]
    14ca:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    14ce:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    14d2:	7869      	ldrb	r1, [r5, #1]
    14d4:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    14d8:	f005 fbcd 	bl	6c76 <pm_policy_state_lock_is_active>
    14dc:	2800      	cmp	r0, #0
    14de:	d1ef      	bne.n	14c0 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    14e0:	6868      	ldr	r0, [r5, #4]
    14e2:	0c41      	lsrs	r1, r0, #17
    14e4:	03c0      	lsls	r0, r0, #15
    14e6:	4f11      	ldr	r7, [pc, #68]	; (152c <pm_policy_next_state+0x8c>)
    14e8:	19c0      	adds	r0, r0, r7
    14ea:	4a11      	ldr	r2, [pc, #68]	; (1530 <pm_policy_next_state+0x90>)
    14ec:	f04f 0300 	mov.w	r3, #0
    14f0:	f141 0100 	adc.w	r1, r1, #0
    14f4:	f7fe fe44 	bl	180 <__aeabi_uldivmod>
    14f8:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    14fa:	68ab      	ldr	r3, [r5, #8]
    14fc:	0c59      	lsrs	r1, r3, #17
    14fe:	03db      	lsls	r3, r3, #15
    1500:	19d8      	adds	r0, r3, r7
    1502:	4a0b      	ldr	r2, [pc, #44]	; (1530 <pm_policy_next_state+0x90>)
    1504:	f04f 0300 	mov.w	r3, #0
    1508:	f141 0100 	adc.w	r1, r1, #0
    150c:	f7fe fe38 	bl	180 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1510:	4b08      	ldr	r3, [pc, #32]	; (1534 <pm_policy_next_state+0x94>)
    1512:	681b      	ldr	r3, [r3, #0]
    1514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    1518:	d0cc      	beq.n	14b4 <pm_policy_next_state+0x14>
    151a:	4283      	cmp	r3, r0
    151c:	d8ca      	bhi.n	14b4 <pm_policy_next_state+0x14>
    151e:	e7cf      	b.n	14c0 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    1520:	2500      	movs	r5, #0
}
    1522:	4628      	mov	r0, r5
    1524:	b002      	add	sp, #8
    1526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    152a:	bf00      	nop
    152c:	000f423f 	.word	0x000f423f
    1530:	000f4240 	.word	0x000f4240
    1534:	200009cc 	.word	0x200009cc

00001538 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1538:	b908      	cbnz	r0, 153e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    153a:	4b02      	ldr	r3, [pc, #8]	; (1544 <pm_state_cpu_get_all+0xc>)
    153c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    153e:	2000      	movs	r0, #0
    1540:	4770      	bx	lr
    1542:	bf00      	nop
    1544:	0000930c 	.word	0x0000930c

00001548 <console_getline>:

static K_FIFO_DEFINE(free_queue);
static K_FIFO_DEFINE(used_queue);

char *console_getline(void)
{
    1548:	b508      	push	{r3, lr}
	static struct console_input *cmd;

	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    154a:	4b08      	ldr	r3, [pc, #32]	; (156c <console_getline+0x24>)
    154c:	6819      	ldr	r1, [r3, #0]
    154e:	b111      	cbz	r1, 1556 <console_getline+0xe>
		k_fifo_put(&free_queue, cmd);
    1550:	4807      	ldr	r0, [pc, #28]	; (1570 <console_getline+0x28>)
    1552:	f006 fff4 	bl	853e <k_queue_append>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (void *) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
    1556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    155a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    155e:	4805      	ldr	r0, [pc, #20]	; (1574 <console_getline+0x2c>)
    1560:	f003 fa22 	bl	49a8 <z_impl_k_queue_get>
	}

	cmd = k_fifo_get(&used_queue, K_FOREVER);
    1564:	4b01      	ldr	r3, [pc, #4]	; (156c <console_getline+0x24>)
    1566:	6018      	str	r0, [r3, #0]
	return cmd->line;
}
    1568:	3005      	adds	r0, #5
    156a:	bd08      	pop	{r3, pc}
    156c:	200010f4 	.word	0x200010f4
    1570:	20000af4 	.word	0x20000af4
    1574:	20000b04 	.word	0x20000b04

00001578 <console_getline_init>:

void console_getline_init(void)
{
    1578:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(line_bufs); i++) {
    157a:	2400      	movs	r4, #0
    157c:	e008      	b.n	1590 <console_getline_init+0x18>
		k_fifo_put(&free_queue, &line_bufs[i]);
    157e:	eb04 1204 	add.w	r2, r4, r4, lsl #4
    1582:	00d3      	lsls	r3, r2, #3
    1584:	4906      	ldr	r1, [pc, #24]	; (15a0 <console_getline_init+0x28>)
    1586:	4419      	add	r1, r3
    1588:	4806      	ldr	r0, [pc, #24]	; (15a4 <console_getline_init+0x2c>)
    158a:	f006 ffd8 	bl	853e <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(line_bufs); i++) {
    158e:	3401      	adds	r4, #1
    1590:	2c01      	cmp	r4, #1
    1592:	d9f4      	bls.n	157e <console_getline_init+0x6>

	/* Zephyr UART handler takes an empty buffer from free_queue,
	 * stores UART input in it until EOL, and then puts it into
	 * used_queue.
	 */
	uart_register_input(&free_queue, &used_queue, NULL);
    1594:	2200      	movs	r2, #0
    1596:	4904      	ldr	r1, [pc, #16]	; (15a8 <console_getline_init+0x30>)
    1598:	4802      	ldr	r0, [pc, #8]	; (15a4 <console_getline_init+0x2c>)
    159a:	f001 fabd 	bl	2b18 <uart_register_input>
}
    159e:	bd10      	pop	{r4, pc}
    15a0:	200010f8 	.word	0x200010f8
    15a4:	20000af4 	.word	0x20000af4
    15a8:	20000b04 	.word	0x20000b04

000015ac <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    15ac:	4901      	ldr	r1, [pc, #4]	; (15b4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    15ae:	2210      	movs	r2, #16
	str	r2, [r1]
    15b0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    15b2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    15b4:	e000ed10 	.word	0xe000ed10

000015b8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    15b8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    15ba:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    15bc:	f380 8811 	msr	BASEPRI, r0
	isb
    15c0:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    15c4:	f3bf 8f4f 	dsb	sy
    15c8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    15ca:	b662      	cpsie	i
	isb
    15cc:	f3bf 8f6f 	isb	sy

	bx	lr
    15d0:	4770      	bx	lr
    15d2:	bf00      	nop

000015d4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    15d4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    15d6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    15d8:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    15dc:	f3bf 8f4f 	dsb	sy
    15e0:	bf20      	wfe

	msr	BASEPRI, r0
    15e2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    15e6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    15e8:	4770      	bx	lr
    15ea:	bf00      	nop

000015ec <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    15ec:	2800      	cmp	r0, #0
    15ee:	db07      	blt.n	1600 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15f0:	f000 021f 	and.w	r2, r0, #31
    15f4:	0940      	lsrs	r0, r0, #5
    15f6:	2301      	movs	r3, #1
    15f8:	4093      	lsls	r3, r2
    15fa:	4a02      	ldr	r2, [pc, #8]	; (1604 <__NVIC_EnableIRQ+0x18>)
    15fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    1600:	4770      	bx	lr
    1602:	bf00      	nop
    1604:	e000e100 	.word	0xe000e100

00001608 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1608:	2800      	cmp	r0, #0
    160a:	db08      	blt.n	161e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    160c:	0149      	lsls	r1, r1, #5
    160e:	b2c9      	uxtb	r1, r1
    1610:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    1614:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    1618:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    161c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    161e:	f000 000f 	and.w	r0, r0, #15
    1622:	0149      	lsls	r1, r1, #5
    1624:	b2c9      	uxtb	r1, r1
    1626:	4b01      	ldr	r3, [pc, #4]	; (162c <__NVIC_SetPriority+0x24>)
    1628:	5419      	strb	r1, [r3, r0]
  }
}
    162a:	4770      	bx	lr
    162c:	e000ed14 	.word	0xe000ed14

00001630 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1630:	0942      	lsrs	r2, r0, #5
    1632:	4b05      	ldr	r3, [pc, #20]	; (1648 <arch_irq_is_enabled+0x18>)
    1634:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1638:	f000 001f 	and.w	r0, r0, #31
    163c:	2301      	movs	r3, #1
    163e:	fa03 f000 	lsl.w	r0, r3, r0
}
    1642:	4010      	ands	r0, r2
    1644:	4770      	bx	lr
    1646:	bf00      	nop
    1648:	e000e100 	.word	0xe000e100

0000164c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    164c:	bf30      	wfi
    b z_SysNmiOnReset
    164e:	f7ff bffd 	b.w	164c <z_SysNmiOnReset>
    1652:	bf00      	nop

00001654 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1654:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1656:	4b0b      	ldr	r3, [pc, #44]	; (1684 <z_arm_prep_c+0x30>)
    1658:	4a0b      	ldr	r2, [pc, #44]	; (1688 <z_arm_prep_c+0x34>)
    165a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    165e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1660:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1664:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1668:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    166c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1674:	f002 ff38 	bl	44e8 <z_bss_zero>
	z_data_copy();
    1678:	f003 fde4 	bl	5244 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    167c:	f000 fa88 	bl	1b90 <z_arm_interrupt_init>
	z_cstart();
    1680:	f002 ff90 	bl	45a4 <z_cstart>
    1684:	e000ed00 	.word	0xe000ed00
    1688:	00000000 	.word	0x00000000

0000168c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    168c:	4a0a      	ldr	r2, [pc, #40]	; (16b8 <arch_swap+0x2c>)
    168e:	6893      	ldr	r3, [r2, #8]
    1690:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    1694:	4909      	ldr	r1, [pc, #36]	; (16bc <arch_swap+0x30>)
    1696:	6809      	ldr	r1, [r1, #0]
    1698:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    169c:	4908      	ldr	r1, [pc, #32]	; (16c0 <arch_swap+0x34>)
    169e:	684b      	ldr	r3, [r1, #4]
    16a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    16a4:	604b      	str	r3, [r1, #4]
    16a6:	2300      	movs	r3, #0
    16a8:	f383 8811 	msr	BASEPRI, r3
    16ac:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    16b0:	6893      	ldr	r3, [r2, #8]
}
    16b2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    16b6:	4770      	bx	lr
    16b8:	200017b0 	.word	0x200017b0
    16bc:	00009594 	.word	0x00009594
    16c0:	e000ed00 	.word	0xe000ed00

000016c4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    16c4:	4913      	ldr	r1, [pc, #76]	; (1714 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    16c6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    16c8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    16cc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    16ce:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    16d2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    16d6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    16d8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    16dc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    16e0:	4f0d      	ldr	r7, [pc, #52]	; (1718 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    16e2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    16e6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    16e8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    16ea:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    16ec:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    16f0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    16f2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    16f6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    16fa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    16fc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    16fe:	f000 faf7 	bl	1cf0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1702:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1706:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    170a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    170e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1712:	4770      	bx	lr
    ldr r1, =_kernel
    1714:	200017b0 	.word	0x200017b0
    ldr v4, =_SCS_ICSR
    1718:	e000ed04 	.word	0xe000ed04

0000171c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    171c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1720:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1722:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1726:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    172a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    172c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1730:	2902      	cmp	r1, #2
    beq _oops
    1732:	d0ff      	beq.n	1734 <_oops>

00001734 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1734:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1736:	f005 faa4 	bl	6c82 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    173a:	bd01      	pop	{r0, pc}

0000173c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    173c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    173e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    1742:	490e      	ldr	r1, [pc, #56]	; (177c <arch_new_thread+0x40>)
    1744:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    1748:	f021 0101 	bic.w	r1, r1, #1
    174c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1750:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1754:	9b01      	ldr	r3, [sp, #4]
    1756:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    175a:	9b02      	ldr	r3, [sp, #8]
    175c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1760:	9b03      	ldr	r3, [sp, #12]
    1762:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1766:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    176a:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    176e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1770:	2300      	movs	r3, #0
    1772:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1776:	bc10      	pop	{r4}
    1778:	4770      	bx	lr
    177a:	bf00      	nop
    177c:	00006161 	.word	0x00006161

00001780 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1780:	4b10      	ldr	r3, [pc, #64]	; (17c4 <z_check_thread_stack_fail+0x44>)
    1782:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
    1784:	b1bb      	cbz	r3, 17b6 <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1786:	f110 0f16 	cmn.w	r0, #22
    178a:	d00b      	beq.n	17a4 <z_check_thread_stack_fail+0x24>
    178c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    1790:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
    1794:	4584      	cmp	ip, r0
    1796:	d810      	bhi.n	17ba <z_check_thread_stack_fail+0x3a>
    1798:	4282      	cmp	r2, r0
    179a:	d910      	bls.n	17be <z_check_thread_stack_fail+0x3e>
    179c:	428a      	cmp	r2, r1
    179e:	d807      	bhi.n	17b0 <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    17a0:	2000      	movs	r0, #0
    17a2:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    17a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    17a8:	428a      	cmp	r2, r1
    17aa:	d801      	bhi.n	17b0 <z_check_thread_stack_fail+0x30>
	return 0;
    17ac:	2000      	movs	r0, #0
}
    17ae:	4770      	bx	lr
		return thread->stack_info.start;
    17b0:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    17b4:	4770      	bx	lr
		return 0;
    17b6:	2000      	movs	r0, #0
    17b8:	4770      	bx	lr
	return 0;
    17ba:	2000      	movs	r0, #0
    17bc:	4770      	bx	lr
    17be:	2000      	movs	r0, #0
    17c0:	4770      	bx	lr
    17c2:	bf00      	nop
    17c4:	200017b0 	.word	0x200017b0

000017c8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    17c8:	b508      	push	{r3, lr}
    17ca:	460d      	mov	r5, r1
    17cc:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    17ce:	4b08      	ldr	r3, [pc, #32]	; (17f0 <arch_switch_to_main_thread+0x28>)
    17d0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    17d2:	f000 fa8d 	bl	1cf0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    17d6:	4620      	mov	r0, r4
    17d8:	f385 8809 	msr	PSP, r5
    17dc:	2100      	movs	r1, #0
    17de:	b663      	cpsie	if
    17e0:	f381 8811 	msr	BASEPRI, r1
    17e4:	f3bf 8f6f 	isb	sy
    17e8:	2200      	movs	r2, #0
    17ea:	2300      	movs	r3, #0
    17ec:	f004 fcb8 	bl	6160 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    17f0:	200017b0 	.word	0x200017b0

000017f4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    17f4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    17f6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    17f8:	4a0b      	ldr	r2, [pc, #44]	; (1828 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    17fa:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    17fc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    17fe:	bf1e      	ittt	ne
	movne	r1, #0
    1800:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1802:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    1804:	f006 fdf1 	blne	83ea <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1808:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    180a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    180e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1812:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1816:	4905      	ldr	r1, [pc, #20]	; (182c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1818:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    181a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    181c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    181e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1822:	4903      	ldr	r1, [pc, #12]	; (1830 <_isr_wrapper+0x3c>)
	bx r1
    1824:	4708      	bx	r1
    1826:	0000      	.short	0x0000
	ldr r2, =_kernel
    1828:	200017b0 	.word	0x200017b0
	ldr r1, =_sw_isr_table
    182c:	00008e30 	.word	0x00008e30
	ldr r1, =z_arm_int_exit
    1830:	00001835 	.word	0x00001835

00001834 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1834:	4b04      	ldr	r3, [pc, #16]	; (1848 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1836:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1838:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    183a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    183c:	d003      	beq.n	1846 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    183e:	4903      	ldr	r1, [pc, #12]	; (184c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1844:	600a      	str	r2, [r1, #0]

00001846 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1846:	4770      	bx	lr
	ldr r3, =_kernel
    1848:	200017b0 	.word	0x200017b0
	ldr r1, =_SCS_ICSR
    184c:	e000ed04 	.word	0xe000ed04

00001850 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    1850:	b538      	push	{r3, r4, r5, lr}
    1852:	4615      	mov	r5, r2
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1854:	4b20      	ldr	r3, [pc, #128]	; (18d8 <bus_fault+0x88>)
    1856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1858:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    185c:	d119      	bne.n	1892 <bus_fault+0x42>
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    185e:	2416      	movs	r4, #22
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1860:	4b1d      	ldr	r3, [pc, #116]	; (18d8 <bus_fault+0x88>)
    1862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1864:	f413 6f00 	tst.w	r3, #2048	; 0x800
    1868:	d000      	beq.n	186c <bus_fault+0x1c>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    186a:	2418      	movs	r4, #24
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    186c:	4b1a      	ldr	r3, [pc, #104]	; (18d8 <bus_fault+0x88>)
    186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1870:	f413 7f00 	tst.w	r3, #512	; 0x200
    1874:	d010      	beq.n	1898 <bus_fault+0x48>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1876:	4b18      	ldr	r3, [pc, #96]	; (18d8 <bus_fault+0x88>)
    1878:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    187c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1880:	d009      	beq.n	1896 <bus_fault+0x46>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1882:	b1d9      	cbz	r1, 18bc <bus_fault+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1884:	4a14      	ldr	r2, [pc, #80]	; (18d8 <bus_fault+0x88>)
    1886:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    188c:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    188e:	2419      	movs	r4, #25
    1890:	e002      	b.n	1898 <bus_fault+0x48>
		reason = K_ERR_ARM_BUS_STACKING;
    1892:	2417      	movs	r4, #23
    1894:	e7e4      	b.n	1860 <bus_fault+0x10>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    1896:	2419      	movs	r4, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1898:	4b0f      	ldr	r3, [pc, #60]	; (18d8 <bus_fault+0x88>)
    189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    189c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    18a0:	d000      	beq.n	18a4 <bus_fault+0x54>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    18a2:	241a      	movs	r4, #26
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    18a4:	4b0c      	ldr	r3, [pc, #48]	; (18d8 <bus_fault+0x88>)
    18a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18a8:	f413 7f80 	tst.w	r3, #256	; 0x100
    18ac:	d108      	bne.n	18c0 <bus_fault+0x70>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    18ae:	4b0a      	ldr	r3, [pc, #40]	; (18d8 <bus_fault+0x88>)
    18b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    18b6:	d004      	beq.n	18c2 <bus_fault+0x72>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    18b8:	241c      	movs	r4, #28
    18ba:	e002      	b.n	18c2 <bus_fault+0x72>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    18bc:	2419      	movs	r4, #25
    18be:	e7eb      	b.n	1898 <bus_fault+0x48>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    18c0:	241b      	movs	r4, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    18c2:	4a05      	ldr	r2, [pc, #20]	; (18d8 <bus_fault+0x88>)
    18c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    18c6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    18ca:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    18cc:	2101      	movs	r1, #1
    18ce:	f005 f9f5 	bl	6cbc <memory_fault_recoverable>
    18d2:	7028      	strb	r0, [r5, #0]

	return reason;
}
    18d4:	4620      	mov	r0, r4
    18d6:	bd38      	pop	{r3, r4, r5, pc}
    18d8:	e000ed00 	.word	0xe000ed00

000018dc <usage_fault>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    18dc:	4b17      	ldr	r3, [pc, #92]	; (193c <usage_fault+0x60>)
    18de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18e0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    18e4:	d125      	bne.n	1932 <usage_fault+0x56>
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    18e6:	201d      	movs	r0, #29
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    18e8:	4b14      	ldr	r3, [pc, #80]	; (193c <usage_fault+0x60>)
    18ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    18f0:	d000      	beq.n	18f4 <usage_fault+0x18>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    18f2:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    18f4:	4b11      	ldr	r3, [pc, #68]	; (193c <usage_fault+0x60>)
    18f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18f8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    18fc:	d000      	beq.n	1900 <usage_fault+0x24>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    18fe:	2021      	movs	r0, #33	; 0x21
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1900:	4b0e      	ldr	r3, [pc, #56]	; (193c <usage_fault+0x60>)
    1902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1904:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    1908:	d000      	beq.n	190c <usage_fault+0x30>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    190a:	2022      	movs	r0, #34	; 0x22
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    190c:	4b0b      	ldr	r3, [pc, #44]	; (193c <usage_fault+0x60>)
    190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1910:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    1914:	d000      	beq.n	1918 <usage_fault+0x3c>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1916:	2023      	movs	r0, #35	; 0x23
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1918:	4b08      	ldr	r3, [pc, #32]	; (193c <usage_fault+0x60>)
    191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    191c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1920:	d109      	bne.n	1936 <usage_fault+0x5a>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1922:	4a06      	ldr	r2, [pc, #24]	; (193c <usage_fault+0x60>)
    1924:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1926:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    192a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    192e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1930:	4770      	bx	lr
		reason = K_ERR_ARM_USAGE_DIV_0;
    1932:	201e      	movs	r0, #30
    1934:	e7d8      	b.n	18e8 <usage_fault+0xc>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    1936:	2024      	movs	r0, #36	; 0x24
    1938:	e7f3      	b.n	1922 <usage_fault+0x46>
    193a:	bf00      	nop
    193c:	e000ed00 	.word	0xe000ed00

00001940 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1940:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1942:	4b0d      	ldr	r3, [pc, #52]	; (1978 <z_arm_is_synchronous_svc+0x38>)
    1944:	695a      	ldr	r2, [r3, #20]
    1946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    194a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    194c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1950:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    1954:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1958:	695a      	ldr	r2, [r3, #20]
    195a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    195e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1960:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1964:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1968:	f64d 7302 	movw	r3, #57090	; 0xdf02
    196c:	4299      	cmp	r1, r3
    196e:	d001      	beq.n	1974 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    1970:	2000      	movs	r0, #0
    1972:	4770      	bx	lr
		return true;
    1974:	2001      	movs	r0, #1
}
    1976:	4770      	bx	lr
    1978:	e000ed00 	.word	0xe000ed00

0000197c <mem_manage_fault>:
{
    197c:	b570      	push	{r4, r5, r6, lr}
    197e:	4604      	mov	r4, r0
    1980:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1982:	4b32      	ldr	r3, [pc, #200]	; (1a4c <mem_manage_fault+0xd0>)
    1984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1986:	f013 0f10 	tst.w	r3, #16
    198a:	d11a      	bne.n	19c2 <mem_manage_fault+0x46>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    198c:	2510      	movs	r5, #16
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    198e:	4b2f      	ldr	r3, [pc, #188]	; (1a4c <mem_manage_fault+0xd0>)
    1990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1992:	f013 0f08 	tst.w	r3, #8
    1996:	d000      	beq.n	199a <mem_manage_fault+0x1e>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    1998:	2512      	movs	r5, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    199a:	4b2c      	ldr	r3, [pc, #176]	; (1a4c <mem_manage_fault+0xd0>)
    199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    199e:	f013 0f02 	tst.w	r3, #2
    19a2:	d010      	beq.n	19c6 <mem_manage_fault+0x4a>
		uint32_t temp = SCB->MMFAR;
    19a4:	4b29      	ldr	r3, [pc, #164]	; (1a4c <mem_manage_fault+0xd0>)
    19a6:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    19a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19aa:	f013 0f80 	tst.w	r3, #128	; 0x80
    19ae:	d03d      	beq.n	1a2c <mem_manage_fault+0xb0>
			if (from_hard_fault != 0) {
    19b0:	2900      	cmp	r1, #0
    19b2:	d03f      	beq.n	1a34 <mem_manage_fault+0xb8>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    19b4:	4a25      	ldr	r2, [pc, #148]	; (1a4c <mem_manage_fault+0xd0>)
    19b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    19b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    19bc:	6293      	str	r3, [r2, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    19be:	2513      	movs	r5, #19
    19c0:	e003      	b.n	19ca <mem_manage_fault+0x4e>
		reason = K_ERR_ARM_MEM_STACKING;
    19c2:	2511      	movs	r5, #17
    19c4:	e7e3      	b.n	198e <mem_manage_fault+0x12>
	uint32_t mmfar = -EINVAL;
    19c6:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    19ca:	4b20      	ldr	r3, [pc, #128]	; (1a4c <mem_manage_fault+0xd0>)
    19cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19ce:	f013 0f01 	tst.w	r3, #1
    19d2:	d000      	beq.n	19d6 <mem_manage_fault+0x5a>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    19d4:	2514      	movs	r5, #20
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    19d6:	4b1d      	ldr	r3, [pc, #116]	; (1a4c <mem_manage_fault+0xd0>)
    19d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19da:	f013 0f20 	tst.w	r3, #32
    19de:	d000      	beq.n	19e2 <mem_manage_fault+0x66>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    19e0:	2515      	movs	r5, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    19e2:	4b1a      	ldr	r3, [pc, #104]	; (1a4c <mem_manage_fault+0xd0>)
    19e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19e6:	f013 0f10 	tst.w	r3, #16
    19ea:	d104      	bne.n	19f6 <mem_manage_fault+0x7a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    19ec:	4b17      	ldr	r3, [pc, #92]	; (1a4c <mem_manage_fault+0xd0>)
    19ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    19f0:	f013 0f02 	tst.w	r3, #2
    19f4:	d004      	beq.n	1a00 <mem_manage_fault+0x84>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    19f6:	4b15      	ldr	r3, [pc, #84]	; (1a4c <mem_manage_fault+0xd0>)
    19f8:	685b      	ldr	r3, [r3, #4]
    19fa:	f413 6f00 	tst.w	r3, #2048	; 0x800
    19fe:	d11b      	bne.n	1a38 <mem_manage_fault+0xbc>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1a00:	4b12      	ldr	r3, [pc, #72]	; (1a4c <mem_manage_fault+0xd0>)
    1a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a04:	f013 0f20 	tst.w	r3, #32
    1a08:	d004      	beq.n	1a14 <mem_manage_fault+0x98>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1a0a:	4a10      	ldr	r2, [pc, #64]	; (1a4c <mem_manage_fault+0xd0>)
    1a0c:	6a53      	ldr	r3, [r2, #36]	; 0x24
    1a0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1a12:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1a14:	4a0d      	ldr	r2, [pc, #52]	; (1a4c <mem_manage_fault+0xd0>)
    1a16:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1a18:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1a1c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1a1e:	2101      	movs	r1, #1
    1a20:	4620      	mov	r0, r4
    1a22:	f005 f94b 	bl	6cbc <memory_fault_recoverable>
    1a26:	7030      	strb	r0, [r6, #0]
}
    1a28:	4628      	mov	r0, r5
    1a2a:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1a2c:	f06f 0015 	mvn.w	r0, #21
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    1a30:	2513      	movs	r5, #19
    1a32:	e7ca      	b.n	19ca <mem_manage_fault+0x4e>
    1a34:	2513      	movs	r5, #19
    1a36:	e7c8      	b.n	19ca <mem_manage_fault+0x4e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1a38:	4621      	mov	r1, r4
    1a3a:	f7ff fea1 	bl	1780 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1a3e:	2800      	cmp	r0, #0
    1a40:	d0de      	beq.n	1a00 <mem_manage_fault+0x84>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1a42:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1a46:	2502      	movs	r5, #2
    1a48:	e7da      	b.n	1a00 <mem_manage_fault+0x84>
    1a4a:	bf00      	nop
    1a4c:	e000ed00 	.word	0xe000ed00

00001a50 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    1a50:	b538      	push	{r3, r4, r5, lr}
    1a52:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    1a54:	2300      	movs	r3, #0
    1a56:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1a58:	4b1a      	ldr	r3, [pc, #104]	; (1ac4 <hard_fault+0x74>)
    1a5a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1a5c:	f010 0002 	ands.w	r0, r0, #2
    1a60:	d12d      	bne.n	1abe <hard_fault+0x6e>
    1a62:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a66:	2b00      	cmp	r3, #0
    1a68:	db2a      	blt.n	1ac0 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1a6a:	4b16      	ldr	r3, [pc, #88]	; (1ac4 <hard_fault+0x74>)
    1a6c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1a6e:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    1a72:	d025      	beq.n	1ac0 <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
    1a74:	4628      	mov	r0, r5
    1a76:	f7ff ff63 	bl	1940 <z_arm_is_synchronous_svc>
    1a7a:	b108      	cbz	r0, 1a80 <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
    1a7c:	6828      	ldr	r0, [r5, #0]
    1a7e:	e01f      	b.n	1ac0 <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    1a80:	4b10      	ldr	r3, [pc, #64]	; (1ac4 <hard_fault+0x74>)
    1a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a84:	f013 0fff 	tst.w	r3, #255	; 0xff
    1a88:	d10d      	bne.n	1aa6 <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1a8a:	4b0e      	ldr	r3, [pc, #56]	; (1ac4 <hard_fault+0x74>)
    1a8c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1a8e:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
    1a92:	d10e      	bne.n	1ab2 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1a94:	4b0b      	ldr	r3, [pc, #44]	; (1ac4 <hard_fault+0x74>)
    1a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1a9c:	d310      	bcc.n	1ac0 <hard_fault+0x70>
			reason = usage_fault(esf);
    1a9e:	4628      	mov	r0, r5
    1aa0:	f7ff ff1c 	bl	18dc <usage_fault>
    1aa4:	e00c      	b.n	1ac0 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    1aa6:	4622      	mov	r2, r4
    1aa8:	2101      	movs	r1, #1
    1aaa:	4628      	mov	r0, r5
    1aac:	f7ff ff66 	bl	197c <mem_manage_fault>
    1ab0:	e006      	b.n	1ac0 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    1ab2:	4622      	mov	r2, r4
    1ab4:	2101      	movs	r1, #1
    1ab6:	4628      	mov	r0, r5
    1ab8:	f7ff feca 	bl	1850 <bus_fault>
    1abc:	e000      	b.n	1ac0 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1abe:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    1ac0:	bd38      	pop	{r3, r4, r5, pc}
    1ac2:	bf00      	nop
    1ac4:	e000ed00 	.word	0xe000ed00

00001ac8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1ac8:	b530      	push	{r4, r5, lr}
    1aca:	b08b      	sub	sp, #44	; 0x2c
    1acc:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1ace:	4b26      	ldr	r3, [pc, #152]	; (1b68 <z_arm_fault+0xa0>)
    1ad0:	6859      	ldr	r1, [r3, #4]
    1ad2:	f3c1 0108 	ubfx	r1, r1, #0, #9
    1ad6:	2300      	movs	r3, #0
    1ad8:	f383 8811 	msr	BASEPRI, r3
    1adc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1ae0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1ae4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1ae8:	d115      	bne.n	1b16 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1aea:	f002 030c 	and.w	r3, r2, #12
    1aee:	2b08      	cmp	r3, #8
    1af0:	d014      	beq.n	1b1c <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1af2:	f012 0f08 	tst.w	r2, #8
    1af6:	d00b      	beq.n	1b10 <z_arm_fault+0x48>
	*nested_exc = false;
    1af8:	2500      	movs	r5, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    1afa:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    1afe:	4620      	mov	r0, r4
    1b00:	f005 f8e1 	bl	6cc6 <fault_handle>
    1b04:	4686      	mov	lr, r0
	if (recoverable) {
    1b06:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    1b0a:	b153      	cbz	r3, 1b22 <z_arm_fault+0x5a>
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1b0c:	b00b      	add	sp, #44	; 0x2c
    1b0e:	bd30      	pop	{r4, r5, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    1b10:	4604      	mov	r4, r0
			*nested_exc = true;
    1b12:	2501      	movs	r5, #1
    1b14:	e7f1      	b.n	1afa <z_arm_fault+0x32>
	*nested_exc = false;
    1b16:	2500      	movs	r5, #0
		return NULL;
    1b18:	462c      	mov	r4, r5
    1b1a:	e7ee      	b.n	1afa <z_arm_fault+0x32>
	*nested_exc = false;
    1b1c:	2500      	movs	r5, #0
		return NULL;
    1b1e:	462c      	mov	r4, r5
    1b20:	e7eb      	b.n	1afa <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1b22:	f10d 0c04 	add.w	ip, sp, #4
    1b26:	6820      	ldr	r0, [r4, #0]
    1b28:	6861      	ldr	r1, [r4, #4]
    1b2a:	68a2      	ldr	r2, [r4, #8]
    1b2c:	68e3      	ldr	r3, [r4, #12]
    1b2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1b32:	6920      	ldr	r0, [r4, #16]
    1b34:	6961      	ldr	r1, [r4, #20]
    1b36:	69a2      	ldr	r2, [r4, #24]
    1b38:	69e3      	ldr	r3, [r4, #28]
    1b3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
    1b3e:	b145      	cbz	r5, 1b52 <z_arm_fault+0x8a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1b40:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1b44:	b95a      	cbnz	r2, 1b5e <z_arm_fault+0x96>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1b46:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1b4a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    1b4e:	9308      	str	r3, [sp, #32]
    1b50:	e005      	b.n	1b5e <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1b52:	9b08      	ldr	r3, [sp, #32]
    1b54:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1b58:	f023 0301 	bic.w	r3, r3, #1
    1b5c:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    1b5e:	a901      	add	r1, sp, #4
    1b60:	4670      	mov	r0, lr
    1b62:	f005 f88a 	bl	6c7a <z_arm_fatal_error>
    1b66:	e7d1      	b.n	1b0c <z_arm_fault+0x44>
    1b68:	e000ed00 	.word	0xe000ed00

00001b6c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1b6c:	4a02      	ldr	r2, [pc, #8]	; (1b78 <z_arm_fault_init+0xc>)
    1b6e:	6953      	ldr	r3, [r2, #20]
    1b70:	f043 0310 	orr.w	r3, r3, #16
    1b74:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1b76:	4770      	bx	lr
    1b78:	e000ed00 	.word	0xe000ed00

00001b7c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1b7c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1b80:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1b84:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1b86:	4672      	mov	r2, lr
	bl z_arm_fault
    1b88:	f7ff ff9e 	bl	1ac8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1b8c:	bd01      	pop	{r0, pc}
    1b8e:	bf00      	nop

00001b90 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1b90:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1b92:	e006      	b.n	1ba2 <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b94:	f003 030f 	and.w	r3, r3, #15
    1b98:	4909      	ldr	r1, [pc, #36]	; (1bc0 <z_arm_interrupt_init+0x30>)
    1b9a:	4419      	add	r1, r3
    1b9c:	2320      	movs	r3, #32
    1b9e:	760b      	strb	r3, [r1, #24]
    1ba0:	3201      	adds	r2, #1
    1ba2:	2a26      	cmp	r2, #38	; 0x26
    1ba4:	dc0a      	bgt.n	1bbc <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    1ba6:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1ba8:	2b00      	cmp	r3, #0
    1baa:	dbf3      	blt.n	1b94 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1bac:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1bb0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1bb4:	2120      	movs	r1, #32
    1bb6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    1bba:	e7f1      	b.n	1ba0 <z_arm_interrupt_init+0x10>
	}
}
    1bbc:	4770      	bx	lr
    1bbe:	bf00      	nop
    1bc0:	e000ecfc 	.word	0xe000ecfc

00001bc4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    1bc4:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    1bc6:	4913      	ldr	r1, [pc, #76]	; (1c14 <__start+0x50>)
    strb r0, [r1]
    1bc8:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1bca:	2000      	movs	r0, #0
    msr CONTROL, r0
    1bcc:	f380 8814 	msr	CONTROL, r0
    isb
    1bd0:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1bd4:	f7ff fb7e 	bl	12d4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1bd8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1bda:	490f      	ldr	r1, [pc, #60]	; (1c18 <__start+0x54>)
    str r0, [r1]
    1bdc:	6008      	str	r0, [r1, #0]
    dsb
    1bde:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1be2:	480e      	ldr	r0, [pc, #56]	; (1c1c <__start+0x58>)
    msr msp, r0
    1be4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1be8:	f000 f830 	bl	1c4c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1bec:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1bee:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1bf2:	480b      	ldr	r0, [pc, #44]	; (1c20 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1bf4:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    1bf8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1bfa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1bfe:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1c02:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1c04:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1c06:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1c0a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1c0e:	f7ff fd21 	bl	1654 <z_arm_prep_c>
    1c12:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
    1c14:	20001802 	.word	0x20001802
    ldr r1, =_SCS_MPU_CTRL
    1c18:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1c1c:	20002600 	.word	0x20002600
    ldr r0, =z_interrupt_stacks
    1c20:	20001840 	.word	0x20001840

00001c24 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1c24:	4b08      	ldr	r3, [pc, #32]	; (1c48 <z_arm_clear_arm_mpu_config+0x24>)
    1c26:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    1c2a:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    1c2e:	2300      	movs	r3, #0
    1c30:	e006      	b.n	1c40 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    1c32:	4a05      	ldr	r2, [pc, #20]	; (1c48 <z_arm_clear_arm_mpu_config+0x24>)
    1c34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1c38:	2100      	movs	r1, #0
    1c3a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    1c3e:	3301      	adds	r3, #1
    1c40:	4283      	cmp	r3, r0
    1c42:	dbf6      	blt.n	1c32 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    1c44:	4770      	bx	lr
    1c46:	bf00      	nop
    1c48:	e000ed00 	.word	0xe000ed00

00001c4c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1c4c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1c4e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1c50:	2400      	movs	r4, #0
    1c52:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1c56:	f7ff ffe5 	bl	1c24 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1c5a:	4623      	mov	r3, r4
    1c5c:	e008      	b.n	1c70 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    1c5e:	f103 0120 	add.w	r1, r3, #32
    1c62:	4a0e      	ldr	r2, [pc, #56]	; (1c9c <z_arm_init_arch_hw_at_boot+0x50>)
    1c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1c68:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1c6c:	3301      	adds	r3, #1
    1c6e:	b2db      	uxtb	r3, r3
    1c70:	2b07      	cmp	r3, #7
    1c72:	d9f4      	bls.n	1c5e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1c74:	2300      	movs	r3, #0
    1c76:	e008      	b.n	1c8a <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1c78:	f103 0160 	add.w	r1, r3, #96	; 0x60
    1c7c:	4a07      	ldr	r2, [pc, #28]	; (1c9c <z_arm_init_arch_hw_at_boot+0x50>)
    1c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1c82:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1c86:	3301      	adds	r3, #1
    1c88:	b2db      	uxtb	r3, r3
    1c8a:	2b07      	cmp	r3, #7
    1c8c:	d9f4      	bls.n	1c78 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1c8e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1c90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c94:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1c98:	bd10      	pop	{r4, pc}
    1c9a:	bf00      	nop
    1c9c:	e000e100 	.word	0xe000e100

00001ca0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1ca0:	b508      	push	{r3, lr}
	if (_current == thread) {
    1ca2:	4b0a      	ldr	r3, [pc, #40]	; (1ccc <z_impl_k_thread_abort+0x2c>)
    1ca4:	689b      	ldr	r3, [r3, #8]
    1ca6:	4283      	cmp	r3, r0
    1ca8:	d002      	beq.n	1cb0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    1caa:	f003 fa93 	bl	51d4 <z_thread_abort>
}
    1cae:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1cb0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d0f8      	beq.n	1caa <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1cb8:	4b05      	ldr	r3, [pc, #20]	; (1cd0 <z_impl_k_thread_abort+0x30>)
    1cba:	685a      	ldr	r2, [r3, #4]
    1cbc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1cc0:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1cc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1cc8:	625a      	str	r2, [r3, #36]	; 0x24
    1cca:	e7ee      	b.n	1caa <z_impl_k_thread_abort+0xa>
    1ccc:	200017b0 	.word	0x200017b0
    1cd0:	e000ed00 	.word	0xe000ed00

00001cd4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1cd4:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1cd6:	4b03      	ldr	r3, [pc, #12]	; (1ce4 <z_arm_configure_static_mpu_regions+0x10>)
    1cd8:	4a03      	ldr	r2, [pc, #12]	; (1ce8 <z_arm_configure_static_mpu_regions+0x14>)
    1cda:	2101      	movs	r1, #1
    1cdc:	4803      	ldr	r0, [pc, #12]	; (1cec <z_arm_configure_static_mpu_regions+0x18>)
    1cde:	f005 f878 	bl	6dd2 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1ce2:	bd08      	pop	{r3, pc}
    1ce4:	20010000 	.word	0x20010000
    1ce8:	20000000 	.word	0x20000000
    1cec:	0000930c 	.word	0x0000930c

00001cf0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    1cf0:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1cf2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    1cf6:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1cf8:	4804      	ldr	r0, [pc, #16]	; (1d0c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1cfa:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    1cfc:	2340      	movs	r3, #64	; 0x40
    1cfe:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1d00:	4b03      	ldr	r3, [pc, #12]	; (1d10 <z_arm_configure_dynamic_mpu_regions+0x20>)
    1d02:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1d04:	2101      	movs	r1, #1
    1d06:	f005 f868 	bl	6dda <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
    1d0a:	bd08      	pop	{r3, pc}
    1d0c:	20001208 	.word	0x20001208
    1d10:	150b0000 	.word	0x150b0000

00001d14 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1d14:	4a08      	ldr	r2, [pc, #32]	; (1d38 <region_init+0x24>)
    1d16:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1d1a:	680b      	ldr	r3, [r1, #0]
    1d1c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1d20:	4303      	orrs	r3, r0
    1d22:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1d26:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1d2a:	688b      	ldr	r3, [r1, #8]
    1d2c:	f043 0301 	orr.w	r3, r3, #1
    1d30:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    1d34:	4770      	bx	lr
    1d36:	bf00      	nop
    1d38:	e000ed00 	.word	0xe000ed00

00001d3c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1d3c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1d3e:	4c03      	ldr	r4, [pc, #12]	; (1d4c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1d40:	2301      	movs	r3, #1
    1d42:	7822      	ldrb	r2, [r4, #0]
    1d44:	f005 f81d 	bl	6d82 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1d48:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1d4a:	bd10      	pop	{r4, pc}
    1d4c:	200017fa 	.word	0x200017fa

00001d50 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1d50:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1d52:	2300      	movs	r3, #0
    1d54:	4a09      	ldr	r2, [pc, #36]	; (1d7c <mpu_configure_dynamic_mpu_regions+0x2c>)
    1d56:	7812      	ldrb	r2, [r2, #0]
    1d58:	f005 f813 	bl	6d82 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1d5c:	f110 0f16 	cmn.w	r0, #22
    1d60:	d00a      	beq.n	1d78 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1d62:	4603      	mov	r3, r0
    1d64:	e006      	b.n	1d74 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    1d66:	4a06      	ldr	r2, [pc, #24]	; (1d80 <mpu_configure_dynamic_mpu_regions+0x30>)
    1d68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1d6c:	2100      	movs	r1, #0
    1d6e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    1d72:	3301      	adds	r3, #1
    1d74:	2b07      	cmp	r3, #7
    1d76:	ddf6      	ble.n	1d66 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    1d78:	bd08      	pop	{r3, pc}
    1d7a:	bf00      	nop
    1d7c:	200017fa 	.word	0x200017fa
    1d80:	e000ed00 	.word	0xe000ed00

00001d84 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1d84:	4b04      	ldr	r3, [pc, #16]	; (1d98 <arm_core_mpu_enable+0x14>)
    1d86:	2205      	movs	r2, #5
    1d88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1d8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d90:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1d94:	4770      	bx	lr
    1d96:	bf00      	nop
    1d98:	e000ed00 	.word	0xe000ed00

00001d9c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1d9c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1da0:	4b02      	ldr	r3, [pc, #8]	; (1dac <arm_core_mpu_disable+0x10>)
    1da2:	2200      	movs	r2, #0
    1da4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1da8:	4770      	bx	lr
    1daa:	bf00      	nop
    1dac:	e000ed00 	.word	0xe000ed00

00001db0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1db0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1db2:	4b0e      	ldr	r3, [pc, #56]	; (1dec <z_arm_mpu_init+0x3c>)
    1db4:	681d      	ldr	r5, [r3, #0]
    1db6:	2d08      	cmp	r5, #8
    1db8:	d815      	bhi.n	1de6 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1dba:	f7ff ffef 	bl	1d9c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1dbe:	2400      	movs	r4, #0
    1dc0:	e009      	b.n	1dd6 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1dc2:	4b0a      	ldr	r3, [pc, #40]	; (1dec <z_arm_mpu_init+0x3c>)
    1dc4:	6859      	ldr	r1, [r3, #4]
    1dc6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1dca:	0093      	lsls	r3, r2, #2
    1dcc:	4419      	add	r1, r3
    1dce:	4620      	mov	r0, r4
    1dd0:	f7ff ffa0 	bl	1d14 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1dd4:	3401      	adds	r4, #1
    1dd6:	42a5      	cmp	r5, r4
    1dd8:	d8f3      	bhi.n	1dc2 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1dda:	4b05      	ldr	r3, [pc, #20]	; (1df0 <z_arm_mpu_init+0x40>)
    1ddc:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1dde:	f7ff ffd1 	bl	1d84 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1de2:	2000      	movs	r0, #0
}
    1de4:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1dea:	e7fb      	b.n	1de4 <z_arm_mpu_init+0x34>
    1dec:	0000931c 	.word	0x0000931c
    1df0:	200017fa 	.word	0x200017fa

00001df4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1df4:	4b01      	ldr	r3, [pc, #4]	; (1dfc <__stdout_hook_install+0x8>)
    1df6:	6018      	str	r0, [r3, #0]
}
    1df8:	4770      	bx	lr
    1dfa:	bf00      	nop
    1dfc:	200009d0 	.word	0x200009d0

00001e00 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    1e00:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    1e02:	4b08      	ldr	r3, [pc, #32]	; (1e24 <_sbrk+0x24>)
    1e04:	6819      	ldr	r1, [r3, #0]
    1e06:	4b08      	ldr	r3, [pc, #32]	; (1e28 <_sbrk+0x28>)
    1e08:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    1e0a:	440a      	add	r2, r1
    1e0c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    1e10:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    1e14:	429a      	cmp	r2, r3
    1e16:	d202      	bcs.n	1e1e <_sbrk+0x1e>
		heap_sz += count;
    1e18:	4b02      	ldr	r3, [pc, #8]	; (1e24 <_sbrk+0x24>)
    1e1a:	601a      	str	r2, [r3, #0]
		ret = ptr;
    1e1c:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    1e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    1e22:	4770      	bx	lr
    1e24:	20001214 	.word	0x20001214
    1e28:	20002640 	.word	0x20002640

00001e2c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    1e2c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1e30:	4905      	ldr	r1, [pc, #20]	; (1e48 <__NVIC_SystemReset+0x1c>)
    1e32:	68ca      	ldr	r2, [r1, #12]
    1e34:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1e38:	4b04      	ldr	r3, [pc, #16]	; (1e4c <__NVIC_SystemReset+0x20>)
    1e3a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1e3c:	60cb      	str	r3, [r1, #12]
    1e3e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1e42:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1e44:	e7fd      	b.n	1e42 <__NVIC_SystemReset+0x16>
    1e46:	bf00      	nop
    1e48:	e000ed00 	.word	0xe000ed00
    1e4c:	05fa0004 	.word	0x05fa0004

00001e50 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1e50:	f04f 0320 	mov.w	r3, #32
    1e54:	f3ef 8211 	mrs	r2, BASEPRI
    1e58:	f383 8812 	msr	BASEPRI_MAX, r3
    1e5c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1e60:	2301      	movs	r3, #1
    1e62:	4906      	ldr	r1, [pc, #24]	; (1e7c <nordicsemi_nrf52_init+0x2c>)
    1e64:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1e68:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1e6c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1e70:	f382 8811 	msr	BASEPRI, r2
    1e74:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1e78:	2000      	movs	r0, #0
    1e7a:	4770      	bx	lr
    1e7c:	4001e000 	.word	0x4001e000

00001e80 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1e80:	b130      	cbz	r0, 1e90 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    1e82:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1e84:	4b03      	ldr	r3, [pc, #12]	; (1e94 <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1e86:	0180      	lsls	r0, r0, #6
    1e88:	f043 0301 	orr.w	r3, r3, #1
    1e8c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    1e8e:	bd08      	pop	{r3, pc}
    1e90:	4770      	bx	lr
    1e92:	bf00      	nop
    1e94:	00009050 	.word	0x00009050

00001e98 <adc_nrfx_channel_setup>:


/* Implementation of the ADC driver API function: adc_channel_setup. */
static int adc_nrfx_channel_setup(const struct device *dev,
				  const struct adc_channel_cfg *channel_cfg)
{
    1e98:	b570      	push	{r4, r5, r6, lr}
    1e9a:	b082      	sub	sp, #8
	nrf_saadc_channel_config_t config = {
    1e9c:	2300      	movs	r3, #0
    1e9e:	9300      	str	r3, [sp, #0]
    1ea0:	f8cd 3003 	str.w	r3, [sp, #3]
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
    1ea4:	790d      	ldrb	r5, [r1, #4]
    1ea6:	f005 051f 	and.w	r5, r5, #31

	if (channel_id >= SAADC_CH_NUM) {
    1eaa:	2d07      	cmp	r5, #7
    1eac:	f200 8086 	bhi.w	1fbc <adc_nrfx_channel_setup+0x124>
    1eb0:	460c      	mov	r4, r1
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
    1eb2:	780b      	ldrb	r3, [r1, #0]
    1eb4:	2b0b      	cmp	r3, #11
    1eb6:	f200 8084 	bhi.w	1fc2 <adc_nrfx_channel_setup+0x12a>
    1eba:	e8df f003 	tbb	[pc, r3]
    1ebe:	0609      	.short	0x0609
    1ec0:	19821511 	.word	0x19821511
    1ec4:	211d8282 	.word	0x211d8282
    1ec8:	2582      	.short	0x2582
	case ADC_GAIN_1_6:
		config.gain = NRF_SAADC_GAIN1_6;
		break;
	case ADC_GAIN_1_5:
		config.gain = NRF_SAADC_GAIN1_5;
    1eca:	2301      	movs	r3, #1
    1ecc:	f88d 3002 	strb.w	r3, [sp, #2]
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
    1ed0:	7863      	ldrb	r3, [r4, #1]
    1ed2:	2b03      	cmp	r3, #3
    1ed4:	d01c      	beq.n	1f10 <adc_nrfx_channel_setup+0x78>
    1ed6:	2b04      	cmp	r3, #4
    1ed8:	d01d      	beq.n	1f16 <adc_nrfx_channel_setup+0x7e>
    1eda:	f06f 0015 	mvn.w	r0, #21
    1ede:	e05b      	b.n	1f98 <adc_nrfx_channel_setup+0x100>
		config.gain = NRF_SAADC_GAIN1_4;
    1ee0:	2302      	movs	r3, #2
    1ee2:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    1ee6:	e7f3      	b.n	1ed0 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1_3;
    1ee8:	2303      	movs	r3, #3
    1eea:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    1eee:	e7ef      	b.n	1ed0 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1_2;
    1ef0:	2304      	movs	r3, #4
    1ef2:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    1ef6:	e7eb      	b.n	1ed0 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN1;
    1ef8:	2305      	movs	r3, #5
    1efa:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    1efe:	e7e7      	b.n	1ed0 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN2;
    1f00:	2306      	movs	r3, #6
    1f02:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    1f06:	e7e3      	b.n	1ed0 <adc_nrfx_channel_setup+0x38>
		config.gain = NRF_SAADC_GAIN4;
    1f08:	2307      	movs	r3, #7
    1f0a:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    1f0e:	e7df      	b.n	1ed0 <adc_nrfx_channel_setup+0x38>
	case ADC_REF_INTERNAL:
		config.reference = NRF_SAADC_REFERENCE_INTERNAL;
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    1f10:	2301      	movs	r3, #1
    1f12:	f88d 3003 	strb.w	r3, [sp, #3]
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
    1f16:	8863      	ldrh	r3, [r4, #2]
    1f18:	2b00      	cmp	r3, #0
    1f1a:	d03f      	beq.n	1f9c <adc_nrfx_channel_setup+0x104>
    1f1c:	f244 0228 	movw	r2, #16424	; 0x4028
    1f20:	4293      	cmp	r3, r2
    1f22:	d851      	bhi.n	1fc8 <adc_nrfx_channel_setup+0x130>
    1f24:	f244 0203 	movw	r2, #16387	; 0x4003
    1f28:	4293      	cmp	r3, r2
    1f2a:	d350      	bcc.n	1fce <adc_nrfx_channel_setup+0x136>
    1f2c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1f30:	3b03      	subs	r3, #3
    1f32:	2b25      	cmp	r3, #37	; 0x25
    1f34:	d84e      	bhi.n	1fd4 <adc_nrfx_channel_setup+0x13c>
    1f36:	e8df f003 	tbb	[pc, r3]
    1f3a:	4d16      	.short	0x4d16
    1f3c:	4d4d4d13 	.word	0x4d4d4d13
    1f40:	4d4d314d 	.word	0x4d4d314d
    1f44:	4d354d4d 	.word	0x4d354d4d
    1f48:	394d4d4d 	.word	0x394d4d4d
    1f4c:	4d4d4d4d 	.word	0x4d4d4d4d
    1f50:	4d4d4d4d 	.word	0x4d4d4d4d
    1f54:	4d4d4d4d 	.word	0x4d4d4d4d
    1f58:	4d4d4d4d 	.word	0x4d4d4d4d
    1f5c:	3d4d4d4d 	.word	0x3d4d4d4d
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 3):
		config.acq_time = NRF_SAADC_ACQTIME_3US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 5):
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    1f60:	2301      	movs	r3, #1
    1f62:	f88d 3004 	strb.w	r3, [sp, #4]
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
		return -EINVAL;
	}

	config.mode = (channel_cfg->differential ?
    1f66:	7923      	ldrb	r3, [r4, #4]
		NRF_SAADC_MODE_DIFFERENTIAL : NRF_SAADC_MODE_SINGLE_ENDED);
    1f68:	f3c3 1340 	ubfx	r3, r3, #5, #1
	config.mode = (channel_cfg->differential ?
    1f6c:	f88d 3005 	strb.w	r3, [sp, #5]
	/* Keep the channel disabled in hardware (set positive input to
	 * NRF_SAADC_INPUT_DISABLED) until it is selected to be included
	 * in a sampling sequence.
	 */

	nrf_saadc_channel_init(NRF_SAADC, channel_id, &config);
    1f70:	4e1a      	ldr	r6, [pc, #104]	; (1fdc <adc_nrfx_channel_setup+0x144>)
    1f72:	466a      	mov	r2, sp
    1f74:	4629      	mov	r1, r5
    1f76:	4630      	mov	r0, r6
    1f78:	f004 ff65 	bl	6e46 <nrf_saadc_channel_init>
	nrf_saadc_channel_input_set(NRF_SAADC,
				    channel_id,
				    NRF_SAADC_INPUT_DISABLED,
				    channel_cfg->input_negative);
    1f7c:	79a1      	ldrb	r1, [r4, #6]
NRF_STATIC_INLINE void nrf_saadc_channel_input_set(NRF_SAADC_Type *  p_reg,
                                                   uint8_t           channel,
                                                   nrf_saadc_input_t pselp,
                                                   nrf_saadc_input_t pseln)
{
    p_reg->CH[channel].PSELN = pseln;
    1f7e:	f105 0351 	add.w	r3, r5, #81	; 0x51
    1f82:	011a      	lsls	r2, r3, #4
    1f84:	eb06 1303 	add.w	r3, r6, r3, lsl #4
    1f88:	6059      	str	r1, [r3, #4]
    p_reg->CH[channel].PSELP = pselp;
    1f8a:	2000      	movs	r0, #0
    1f8c:	50b0      	str	r0, [r6, r2]

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    1f8e:	7962      	ldrb	r2, [r4, #5]
    1f90:	4b13      	ldr	r3, [pc, #76]	; (1fe0 <adc_nrfx_channel_setup+0x148>)
    1f92:	442b      	add	r3, r5
    1f94:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

	return 0;
}
    1f98:	b002      	add	sp, #8
    1f9a:	bd70      	pop	{r4, r5, r6, pc}
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    1f9c:	2302      	movs	r3, #2
    1f9e:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    1fa2:	e7e0      	b.n	1f66 <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    1fa4:	2303      	movs	r3, #3
    1fa6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    1faa:	e7dc      	b.n	1f66 <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    1fac:	2304      	movs	r3, #4
    1fae:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    1fb2:	e7d8      	b.n	1f66 <adc_nrfx_channel_setup+0xce>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    1fb4:	2305      	movs	r3, #5
    1fb6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    1fba:	e7d4      	b.n	1f66 <adc_nrfx_channel_setup+0xce>
		return -EINVAL;
    1fbc:	f06f 0015 	mvn.w	r0, #21
    1fc0:	e7ea      	b.n	1f98 <adc_nrfx_channel_setup+0x100>
	switch (channel_cfg->gain) {
    1fc2:	f06f 0015 	mvn.w	r0, #21
    1fc6:	e7e7      	b.n	1f98 <adc_nrfx_channel_setup+0x100>
	switch (channel_cfg->acquisition_time) {
    1fc8:	f06f 0015 	mvn.w	r0, #21
    1fcc:	e7e4      	b.n	1f98 <adc_nrfx_channel_setup+0x100>
    1fce:	f06f 0015 	mvn.w	r0, #21
    1fd2:	e7e1      	b.n	1f98 <adc_nrfx_channel_setup+0x100>
    1fd4:	f06f 0015 	mvn.w	r0, #21
    1fd8:	e7de      	b.n	1f98 <adc_nrfx_channel_setup+0x100>
    1fda:	bf00      	nop
    1fdc:	40007000 	.word	0x40007000
    1fe0:	20000000 	.word	0x20000000

00001fe4 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    1fe4:	4b07      	ldr	r3, [pc, #28]	; (2004 <adc_context_start_sampling+0x20>)
    1fe6:	2201      	movs	r2, #1
    1fe8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    1fec:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    1ff0:	b113      	cbz	r3, 1ff8 <adc_context_start_sampling+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1ff2:	4b04      	ldr	r3, [pc, #16]	; (2004 <adc_context_start_sampling+0x20>)
    1ff4:	60da      	str	r2, [r3, #12]
}
    1ff6:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1ff8:	4b02      	ldr	r3, [pc, #8]	; (2004 <adc_context_start_sampling+0x20>)
    1ffa:	2201      	movs	r2, #1
    1ffc:	601a      	str	r2, [r3, #0]
    1ffe:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    2000:	4770      	bx	lr
    2002:	bf00      	nop
    2004:	40007000 	.word	0x40007000

00002008 <adc_context_update_buffer_pointer>:
static void adc_context_update_buffer_pointer(struct adc_context *ctx,
					      bool repeat)
{
	ARG_UNUSED(ctx);

	if (!repeat) {
    2008:	b949      	cbnz	r1, 201e <adc_context_update_buffer_pointer+0x16>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
}

NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get(NRF_SAADC_Type const * p_reg)
{
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    200a:	4b05      	ldr	r3, [pc, #20]	; (2020 <adc_context_update_buffer_pointer+0x18>)
    200c:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
}

NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get(NRF_SAADC_Type const * p_reg)
{
    return p_reg->RESULT.AMOUNT;
    2010:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
		nrf_saadc_buffer_pointer_set(
			NRF_SAADC,
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    2014:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    2016:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    201a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			nrf_saadc_amount_get(NRF_SAADC));
	}
}
    201e:	4770      	bx	lr
    2020:	40007000 	.word	0x40007000

00002024 <set_resolution>:

static int set_resolution(const struct adc_sequence *sequence)
{
	nrf_saadc_resolution_t nrf_resolution;

	switch (sequence->resolution) {
    2024:	7c03      	ldrb	r3, [r0, #16]
    2026:	3b08      	subs	r3, #8
    2028:	2b06      	cmp	r3, #6
    202a:	d811      	bhi.n	2050 <set_resolution+0x2c>
    202c:	e8df f003 	tbb	[pc, r3]
    2030:	100e1004 	.word	0x100e1004
    2034:	1006      	.short	0x1006
    2036:	0c          	.byte	0x0c
    2037:	00          	.byte	0x00
    2038:	2200      	movs	r2, #0
    203a:	e000      	b.n	203e <set_resolution+0x1a>
		break;
	case 10:
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
		break;
	case 12:
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    203c:	2202      	movs	r2, #2
}

NRF_STATIC_INLINE void nrf_saadc_resolution_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_resolution_t resolution)
{
    p_reg->RESOLUTION = resolution;
    203e:	4b06      	ldr	r3, [pc, #24]	; (2058 <set_resolution+0x34>)
    2040:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			    sequence->resolution);
		return -EINVAL;
	}

	nrf_saadc_resolution_set(NRF_SAADC, nrf_resolution);
	return 0;
    2044:	2000      	movs	r0, #0
    2046:	4770      	bx	lr
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    2048:	2203      	movs	r2, #3
		break;
    204a:	e7f8      	b.n	203e <set_resolution+0x1a>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
    204c:	2201      	movs	r2, #1
    204e:	e7f6      	b.n	203e <set_resolution+0x1a>
	switch (sequence->resolution) {
    2050:	f06f 0015 	mvn.w	r0, #21
}
    2054:	4770      	bx	lr
    2056:	bf00      	nop
    2058:	40007000 	.word	0x40007000

0000205c <set_oversampling>:
static int set_oversampling(const struct adc_sequence *sequence,
			    uint8_t active_channels)
{
	nrf_saadc_oversample_t nrf_oversampling;

	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    205c:	2901      	cmp	r1, #1
    205e:	d901      	bls.n	2064 <set_oversampling+0x8>
    2060:	7c43      	ldrb	r3, [r0, #17]
    2062:	b973      	cbnz	r3, 2082 <set_oversampling+0x26>
		LOG_ERR(
			"Oversampling is supported for single channel only");
		return -EINVAL;
	}

	switch (sequence->oversampling) {
    2064:	7c43      	ldrb	r3, [r0, #17]
    2066:	2b08      	cmp	r3, #8
    2068:	d80e      	bhi.n	2088 <set_oversampling+0x2c>
    206a:	e8df f003 	tbb	[pc, r3]
    206e:	0505      	.short	0x0505
    2070:	05050505 	.word	0x05050505
    2074:	0505      	.short	0x0505
    2076:	05          	.byte	0x05
    2077:	00          	.byte	0x00
}

NRF_STATIC_INLINE void nrf_saadc_oversample_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_oversample_t oversample)
{
    p_reg->OVERSAMPLE = oversample;
    2078:	4a05      	ldr	r2, [pc, #20]	; (2090 <set_oversampling+0x34>)
    207a:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
			    sequence->oversampling);
		return -EINVAL;
	}

	nrf_saadc_oversample_set(NRF_SAADC, nrf_oversampling);
	return 0;
    207e:	2000      	movs	r0, #0
    2080:	4770      	bx	lr
		return -EINVAL;
    2082:	f06f 0015 	mvn.w	r0, #21
    2086:	4770      	bx	lr
	switch (sequence->oversampling) {
    2088:	f06f 0015 	mvn.w	r0, #21
}
    208c:	4770      	bx	lr
    208e:	bf00      	nop
    2090:	40007000 	.word	0x40007000

00002094 <adc_context_enable_timer>:
	}
}

#ifdef ADC_CONTEXT_USES_KERNEL_TIMER
static inline void adc_context_enable_timer(struct adc_context *ctx)
{
    2094:	b510      	push	{r4, lr}
    2096:	b082      	sub	sp, #8
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
    2098:	f100 0408 	add.w	r4, r0, #8
    209c:	6f80      	ldr	r0, [r0, #120]	; 0x78
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    209e:	0c41      	lsrs	r1, r0, #17
    20a0:	03c0      	lsls	r0, r0, #15
    20a2:	4b09      	ldr	r3, [pc, #36]	; (20c8 <adc_context_enable_timer+0x34>)
    20a4:	18c0      	adds	r0, r0, r3
    20a6:	4a09      	ldr	r2, [pc, #36]	; (20cc <adc_context_enable_timer+0x38>)
    20a8:	f04f 0300 	mov.w	r3, #0
    20ac:	f141 0100 	adc.w	r1, r1, #0
    20b0:	f7fe f866 	bl	180 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    20b4:	9000      	str	r0, [sp, #0]
    20b6:	9101      	str	r1, [sp, #4]
    20b8:	2200      	movs	r2, #0
    20ba:	2300      	movs	r3, #0
    20bc:	4620      	mov	r0, r4
    20be:	f003 fa81 	bl	55c4 <z_impl_k_timer_start>
}
    20c2:	b002      	add	sp, #8
    20c4:	bd10      	pop	{r4, pc}
    20c6:	bf00      	nop
    20c8:	000f423f 	.word	0x000f423f
    20cc:	000f4240 	.word	0x000f4240

000020d0 <start_read>:
	return 0;
}

static int start_read(const struct device *dev,
		      const struct adc_sequence *sequence)
{
    20d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int error;
	uint32_t selected_channels = sequence->channels;
    20d2:	684e      	ldr	r6, [r1, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    20d4:	1e73      	subs	r3, r6, #1
    20d6:	2bfe      	cmp	r3, #254	; 0xfe
    20d8:	d855      	bhi.n	2186 <start_read+0xb6>
    20da:	460d      	mov	r5, r1
	active_channels = 0U;

	/* Enable only the channels selected for the pointed sequence.
	 * Disable all the rest.
	 */
	channel_id = 0U;
    20dc:	2300      	movs	r3, #0
	active_channels = 0U;
    20de:	461c      	mov	r4, r3
    20e0:	e009      	b.n	20f6 <start_read+0x26>
    p_reg->CH[channel].PSELP = pselp;
    20e2:	f103 0251 	add.w	r2, r3, #81	; 0x51
    20e6:	0112      	lsls	r2, r2, #4
    20e8:	492a      	ldr	r1, [pc, #168]	; (2194 <start_read+0xc4>)
    20ea:	2000      	movs	r0, #0
    20ec:	5088      	str	r0, [r1, r2]
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
    20ee:	3301      	adds	r3, #1
    20f0:	b2db      	uxtb	r3, r3
    20f2:	2b07      	cmp	r3, #7
    20f4:	d822      	bhi.n	213c <start_read+0x6c>
		if (selected_channels & BIT(channel_id)) {
    20f6:	461a      	mov	r2, r3
    20f8:	fa26 f103 	lsr.w	r1, r6, r3
    20fc:	f011 0f01 	tst.w	r1, #1
    2100:	d0ef      	beq.n	20e2 <start_read+0x12>
			if (m_data.positive_inputs[channel_id] == 0U) {
    2102:	4925      	ldr	r1, [pc, #148]	; (2198 <start_read+0xc8>)
    2104:	4419      	add	r1, r3
    2106:	f891 7090 	ldrb.w	r7, [r1, #144]	; 0x90
    210a:	2f00      	cmp	r7, #0
    210c:	d03e      	beq.n	218c <start_read+0xbc>
				(sequence->oversampling != 0U ?
    210e:	7c69      	ldrb	r1, [r5, #17]
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    2110:	3900      	subs	r1, #0
    2112:	bf18      	it	ne
    2114:	2101      	movne	r1, #1

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    2116:	f8df c07c 	ldr.w	ip, [pc, #124]	; 2194 <start_read+0xc4>
    211a:	eb0c 1e03 	add.w	lr, ip, r3, lsl #4
    211e:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    2122:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    2126:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    212a:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    212e:	3251      	adds	r2, #81	; 0x51
    2130:	0112      	lsls	r2, r2, #4
    2132:	f84c 7002 	str.w	r7, [ip, r2]
			++active_channels;
    2136:	3401      	adds	r4, #1
    2138:	b2e4      	uxtb	r4, r4
    213a:	e7d8      	b.n	20ee <start_read+0x1e>

	error = set_resolution(sequence);
    213c:	4628      	mov	r0, r5
    213e:	f7ff ff71 	bl	2024 <set_resolution>
	if (error) {
    2142:	4603      	mov	r3, r0
    2144:	b108      	cbz	r0, 214a <start_read+0x7a>

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    2146:	4618      	mov	r0, r3
    2148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	error = set_oversampling(sequence, active_channels);
    214a:	4621      	mov	r1, r4
    214c:	4628      	mov	r0, r5
    214e:	f7ff ff85 	bl	205c <set_oversampling>
	if (error) {
    2152:	4603      	mov	r3, r0
    2154:	2800      	cmp	r0, #0
    2156:	d1f6      	bne.n	2146 <start_read+0x76>
	error = check_buffer_size(sequence, active_channels);
    2158:	4621      	mov	r1, r4
    215a:	4628      	mov	r0, r5
    215c:	f004 fea8 	bl	6eb0 <check_buffer_size>
	if (error) {
    2160:	4603      	mov	r3, r0
    2162:	2800      	cmp	r0, #0
    2164:	d1ef      	bne.n	2146 <start_read+0x76>
			      (nrf_saadc_value_t *)sequence->buffer,
    2166:	68aa      	ldr	r2, [r5, #8]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    2168:	4b0a      	ldr	r3, [pc, #40]	; (2194 <start_read+0xc4>)
    216a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    216e:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
	adc_context_start_read(&m_data.ctx, sequence);
    2172:	4c09      	ldr	r4, [pc, #36]	; (2198 <start_read+0xc8>)
    2174:	4629      	mov	r1, r5
    2176:	4620      	mov	r0, r4
    2178:	f004 fed5 	bl	6f26 <adc_context_start_read>
	error = adc_context_wait_for_completion(&m_data.ctx);
    217c:	4620      	mov	r0, r4
    217e:	f004 fec7 	bl	6f10 <adc_context_wait_for_completion>
    2182:	4603      	mov	r3, r0
	return error;
    2184:	e7df      	b.n	2146 <start_read+0x76>
		return -EINVAL;
    2186:	f06f 0315 	mvn.w	r3, #21
    218a:	e7dc      	b.n	2146 <start_read+0x76>
				return -EINVAL;
    218c:	f06f 0315 	mvn.w	r3, #21
    2190:	e7d9      	b.n	2146 <start_read+0x76>
    2192:	bf00      	nop
    2194:	40007000 	.word	0x40007000
    2198:	20000000 	.word	0x20000000

0000219c <adc_nrfx_read>:

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    219c:	b570      	push	{r4, r5, r6, lr}
    219e:	4604      	mov	r4, r0
    21a0:	460d      	mov	r5, r1
	int error;

	adc_context_lock(&m_data.ctx, false, NULL);
    21a2:	4e08      	ldr	r6, [pc, #32]	; (21c4 <adc_nrfx_read+0x28>)
    21a4:	2200      	movs	r2, #0
    21a6:	4611      	mov	r1, r2
    21a8:	4630      	mov	r0, r6
    21aa:	f004 fea8 	bl	6efe <adc_context_lock>
	error = start_read(dev, sequence);
    21ae:	4629      	mov	r1, r5
    21b0:	4620      	mov	r0, r4
    21b2:	f7ff ff8d 	bl	20d0 <start_read>
    21b6:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    21b8:	f106 0040 	add.w	r0, r6, #64	; 0x40
    21bc:	f002 fc32 	bl	4a24 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    21c0:	4620      	mov	r0, r4
    21c2:	bd70      	pop	{r4, r5, r6, pc}
    21c4:	20000000 	.word	0x20000000

000021c8 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    21c8:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    21ca:	4b0d      	ldr	r3, [pc, #52]	; (2200 <init_saadc+0x38>)
    21cc:	2400      	movs	r4, #0
    21ce:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    21d2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    21d6:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    21da:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    21de:	2212      	movs	r2, #18
    21e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    21e4:	2007      	movs	r0, #7
    21e6:	f004 fd52 	bl	6c8e <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    21ea:	4622      	mov	r2, r4
    21ec:	2101      	movs	r1, #1
    21ee:	2007      	movs	r0, #7
    21f0:	f004 fd52 	bl	6c98 <z_arm_irq_priority_set>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);
    21f4:	4803      	ldr	r0, [pc, #12]	; (2204 <init_saadc+0x3c>)
    21f6:	f004 fec5 	bl	6f84 <adc_context_unlock_unconditionally>

	return 0;
}
    21fa:	4620      	mov	r0, r4
    21fc:	bd10      	pop	{r4, pc}
    21fe:	bf00      	nop
    2200:	40007000 	.word	0x40007000
    2204:	20000000 	.word	0x20000000

00002208 <saadc_irq_handler>:
{
    2208:	b508      	push	{r3, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    220a:	4b11      	ldr	r3, [pc, #68]	; (2250 <saadc_irq_handler+0x48>)
    220c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    2210:	b973      	cbnz	r3, 2230 <saadc_irq_handler+0x28>
    2212:	4b0f      	ldr	r3, [pc, #60]	; (2250 <saadc_irq_handler+0x48>)
    2214:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    2218:	b14b      	cbz	r3, 222e <saadc_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    221a:	4b0d      	ldr	r3, [pc, #52]	; (2250 <saadc_irq_handler+0x48>)
    221c:	2200      	movs	r2, #0
    221e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    2222:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2226:	2201      	movs	r2, #1
    2228:	609a      	str	r2, [r3, #8]
    222a:	601a      	str	r2, [r3, #0]
    222c:	605a      	str	r2, [r3, #4]
}
    222e:	bd08      	pop	{r3, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2230:	4b07      	ldr	r3, [pc, #28]	; (2250 <saadc_irq_handler+0x48>)
    2232:	2200      	movs	r2, #0
    2234:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2238:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    223c:	2101      	movs	r1, #1
    223e:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    2240:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		adc_context_on_sampling_done(&m_data.ctx, dev);
    2244:	4601      	mov	r1, r0
    2246:	4803      	ldr	r0, [pc, #12]	; (2254 <saadc_irq_handler+0x4c>)
    2248:	f004 fea4 	bl	6f94 <adc_context_on_sampling_done>
    224c:	e7ef      	b.n	222e <saadc_irq_handler+0x26>
    224e:	bf00      	nop
    2250:	40007000 	.word	0x40007000
    2254:	20000000 	.word	0x20000000

00002258 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    2258:	4800      	ldr	r0, [pc, #0]	; (225c <get_hf_flags+0x4>)
    225a:	4770      	bx	lr
    225c:	2000126c 	.word	0x2000126c

00002260 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2260:	4b03      	ldr	r3, [pc, #12]	; (2270 <get_subsys+0x10>)
    2262:	1ac0      	subs	r0, r0, r3
    2264:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    2266:	4b03      	ldr	r3, [pc, #12]	; (2274 <get_subsys+0x14>)
    2268:	fb03 f000 	mul.w	r0, r3, r0
    226c:	4770      	bx	lr
    226e:	bf00      	nop
    2270:	2000122c 	.word	0x2000122c
    2274:	b6db6db7 	.word	0xb6db6db7

00002278 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2278:	b538      	push	{r3, r4, r5, lr}
    227a:	4605      	mov	r5, r0
    227c:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    227e:	f7ff ffef 	bl	2260 <get_subsys>
    2282:	4601      	mov	r1, r0
    2284:	2240      	movs	r2, #64	; 0x40
    2286:	4803      	ldr	r0, [pc, #12]	; (2294 <onoff_stop+0x1c>)
    2288:	f004 ff67 	bl	715a <stop>
    228c:	4601      	mov	r1, r0
	notify(mgr, res);
    228e:	4628      	mov	r0, r5
    2290:	47a0      	blx	r4
}
    2292:	bd38      	pop	{r3, r4, r5, pc}
    2294:	00008db8 	.word	0x00008db8

00002298 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2298:	b530      	push	{r4, r5, lr}
    229a:	b083      	sub	sp, #12
    229c:	4605      	mov	r5, r0
    229e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    22a0:	f7ff ffde 	bl	2260 <get_subsys>
    22a4:	4601      	mov	r1, r0
    22a6:	2340      	movs	r3, #64	; 0x40
    22a8:	9300      	str	r3, [sp, #0]
    22aa:	4623      	mov	r3, r4
    22ac:	4a05      	ldr	r2, [pc, #20]	; (22c4 <onoff_start+0x2c>)
    22ae:	4806      	ldr	r0, [pc, #24]	; (22c8 <onoff_start+0x30>)
    22b0:	f004 ff6d 	bl	718e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    22b4:	1e01      	subs	r1, r0, #0
    22b6:	db01      	blt.n	22bc <onoff_start+0x24>
		notify(mgr, err);
	}
}
    22b8:	b003      	add	sp, #12
    22ba:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    22bc:	4628      	mov	r0, r5
    22be:	47a0      	blx	r4
}
    22c0:	e7fa      	b.n	22b8 <onoff_start+0x20>
    22c2:	bf00      	nop
    22c4:	000071d7 	.word	0x000071d7
    22c8:	00008db8 	.word	0x00008db8

000022cc <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    22cc:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    22ce:	b110      	cbz	r0, 22d6 <clock_event_handler+0xa>
    22d0:	2801      	cmp	r0, #1
    22d2:	d00d      	beq.n	22f0 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    22d4:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    22d6:	2100      	movs	r1, #0
    22d8:	4808      	ldr	r0, [pc, #32]	; (22fc <clock_event_handler+0x30>)
    22da:	f004 fec9 	bl	7070 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    22de:	6883      	ldr	r3, [r0, #8]
    22e0:	f013 0f07 	tst.w	r3, #7
    22e4:	d1f6      	bne.n	22d4 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    22e6:	2100      	movs	r1, #0
    22e8:	4804      	ldr	r0, [pc, #16]	; (22fc <clock_event_handler+0x30>)
    22ea:	f004 ff24 	bl	7136 <clkstarted_handle>
    22ee:	e7f1      	b.n	22d4 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    22f0:	2101      	movs	r1, #1
    22f2:	4802      	ldr	r0, [pc, #8]	; (22fc <clock_event_handler+0x30>)
    22f4:	f004 ff1f 	bl	7136 <clkstarted_handle>
}
    22f8:	e7ec      	b.n	22d4 <clock_event_handler+0x8>
    22fa:	bf00      	nop
    22fc:	00008db8 	.word	0x00008db8

00002300 <generic_hfclk_start>:
{
    2300:	b510      	push	{r4, lr}
    2302:	b082      	sub	sp, #8
	__asm__ volatile(
    2304:	f04f 0320 	mov.w	r3, #32
    2308:	f3ef 8411 	mrs	r4, BASEPRI
    230c:	f383 8812 	msr	BASEPRI_MAX, r3
    2310:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2314:	4a14      	ldr	r2, [pc, #80]	; (2368 <generic_hfclk_start+0x68>)
    2316:	6813      	ldr	r3, [r2, #0]
    2318:	f043 0102 	orr.w	r1, r3, #2
    231c:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    231e:	f013 0f01 	tst.w	r3, #1
    2322:	d109      	bne.n	2338 <generic_hfclk_start+0x38>
	bool already_started = false;
    2324:	2300      	movs	r3, #0
	__asm__ volatile(
    2326:	f384 8811 	msr	BASEPRI, r4
    232a:	f3bf 8f6f 	isb	sy
	if (already_started) {
    232e:	b9b3      	cbnz	r3, 235e <generic_hfclk_start+0x5e>
	hfclk_start();
    2330:	f004 ff59 	bl	71e6 <hfclk_start>
}
    2334:	b002      	add	sp, #8
    2336:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    2338:	f10d 0207 	add.w	r2, sp, #7
    233c:	2101      	movs	r1, #1
    233e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2342:	f004 fe72 	bl	702a <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2346:	f89d 3007 	ldrb.w	r3, [sp, #7]
    234a:	2b01      	cmp	r3, #1
    234c:	d001      	beq.n	2352 <generic_hfclk_start+0x52>
	bool already_started = false;
    234e:	2300      	movs	r3, #0
    2350:	e7e9      	b.n	2326 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    2352:	f7ff ff81 	bl	2258 <get_hf_flags>
    2356:	f004 fedb 	bl	7110 <set_on_state>
			already_started = true;
    235a:	2301      	movs	r3, #1
    235c:	e7e3      	b.n	2326 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    235e:	2100      	movs	r1, #0
    2360:	4802      	ldr	r0, [pc, #8]	; (236c <generic_hfclk_start+0x6c>)
    2362:	f004 fee8 	bl	7136 <clkstarted_handle>
		return;
    2366:	e7e5      	b.n	2334 <generic_hfclk_start+0x34>
    2368:	2000127c 	.word	0x2000127c
    236c:	00008db8 	.word	0x00008db8

00002370 <generic_hfclk_stop>:
{
    2370:	b510      	push	{r4, lr}
	__asm__ volatile(
    2372:	f04f 0320 	mov.w	r3, #32
    2376:	f3ef 8411 	mrs	r4, BASEPRI
    237a:	f383 8812 	msr	BASEPRI_MAX, r3
    237e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    2382:	4a08      	ldr	r2, [pc, #32]	; (23a4 <generic_hfclk_stop+0x34>)
    2384:	6813      	ldr	r3, [r2, #0]
    2386:	f023 0102 	bic.w	r1, r3, #2
    238a:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    238c:	f013 0f01 	tst.w	r3, #1
    2390:	d004      	beq.n	239c <generic_hfclk_stop+0x2c>
	__asm__ volatile(
    2392:	f384 8811 	msr	BASEPRI, r4
    2396:	f3bf 8f6f 	isb	sy
}
    239a:	bd10      	pop	{r4, pc}
		hfclk_stop();
    239c:	f004 ff28 	bl	71f0 <hfclk_stop>
    23a0:	e7f7      	b.n	2392 <generic_hfclk_stop+0x22>
    23a2:	bf00      	nop
    23a4:	2000127c 	.word	0x2000127c

000023a8 <lfclk_spinwait>:
{
    23a8:	b570      	push	{r4, r5, r6, lr}
    23aa:	b082      	sub	sp, #8
    23ac:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    23ae:	2801      	cmp	r0, #1
    23b0:	d107      	bne.n	23c2 <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    23b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23b6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    23ba:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    23be:	2b01      	cmp	r3, #1
    23c0:	d04c      	beq.n	245c <lfclk_spinwait+0xb4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    23c2:	f005 fffd 	bl	83c0 <k_is_in_isr>
    23c6:	4604      	mov	r4, r0
    23c8:	b918      	cbnz	r0, 23d2 <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    23ca:	4b28      	ldr	r3, [pc, #160]	; (246c <lfclk_spinwait+0xc4>)
    23cc:	781b      	ldrb	r3, [r3, #0]
    23ce:	2b00      	cmp	r3, #0
    23d0:	d139      	bne.n	2446 <lfclk_spinwait+0x9e>
	__asm__ volatile(
    23d2:	f04f 0320 	mov.w	r3, #32
    23d6:	f3ef 8611 	mrs	r6, BASEPRI
    23da:	f383 8812 	msr	BASEPRI_MAX, r3
    23de:	f3bf 8f6f 	isb	sy
    23e2:	2401      	movs	r4, #1
	if (!isr_mode) {
    23e4:	b924      	cbnz	r4, 23f0 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
    23e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23ea:	2202      	movs	r2, #2
    23ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    23f0:	aa01      	add	r2, sp, #4
    23f2:	2100      	movs	r1, #0
    23f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    23f8:	f004 fe17 	bl	702a <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    23fc:	b120      	cbz	r0, 2408 <lfclk_spinwait+0x60>
		 && ((type == target_type)
    23fe:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2400:	2b01      	cmp	r3, #1
    2402:	d026      	beq.n	2452 <lfclk_spinwait+0xaa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2404:	2d01      	cmp	r5, #1
    2406:	d024      	beq.n	2452 <lfclk_spinwait+0xaa>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2408:	b1fc      	cbz	r4, 244a <lfclk_spinwait+0xa2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    240a:	4630      	mov	r0, r6
    240c:	f7ff f8e2 	bl	15d4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2414:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2418:	2b00      	cmp	r3, #0
    241a:	d1e9      	bne.n	23f0 <lfclk_spinwait+0x48>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    241c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2420:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2424:	2b00      	cmp	r3, #0
    2426:	d0e3      	beq.n	23f0 <lfclk_spinwait+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    242c:	2200      	movs	r2, #0
    242e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2432:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2436:	2201      	movs	r2, #1
    2438:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    243c:	490c      	ldr	r1, [pc, #48]	; (2470 <lfclk_spinwait+0xc8>)
    243e:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2442:	609a      	str	r2, [r3, #8]
}
    2444:	e7d4      	b.n	23f0 <lfclk_spinwait+0x48>
	int key = isr_mode ? irq_lock() : 0;
    2446:	2600      	movs	r6, #0
    2448:	e7cc      	b.n	23e4 <lfclk_spinwait+0x3c>
				k_msleep(1);
    244a:	2001      	movs	r0, #1
    244c:	f004 feda 	bl	7204 <k_msleep>
    2450:	e7de      	b.n	2410 <lfclk_spinwait+0x68>
	if (isr_mode) {
    2452:	b12c      	cbz	r4, 2460 <lfclk_spinwait+0xb8>
	__asm__ volatile(
    2454:	f386 8811 	msr	BASEPRI, r6
    2458:	f3bf 8f6f 	isb	sy
}
    245c:	b002      	add	sp, #8
    245e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    2460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2464:	2202      	movs	r2, #2
    2466:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    246a:	e7f7      	b.n	245c <lfclk_spinwait+0xb4>
    246c:	20001802 	.word	0x20001802
    2470:	e000e100 	.word	0xe000e100

00002474 <api_blocking_start>:
{
    2474:	b500      	push	{lr}
    2476:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2478:	f8cd d000 	str.w	sp, [sp]
    247c:	f8cd d004 	str.w	sp, [sp, #4]
    2480:	2300      	movs	r3, #0
    2482:	9302      	str	r3, [sp, #8]
    2484:	2301      	movs	r3, #1
    2486:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2488:	466b      	mov	r3, sp
    248a:	4a07      	ldr	r2, [pc, #28]	; (24a8 <api_blocking_start+0x34>)
    248c:	f004 fe9b 	bl	71c6 <api_start>
	if (err < 0) {
    2490:	2800      	cmp	r0, #0
    2492:	db05      	blt.n	24a0 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    2494:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2498:	2300      	movs	r3, #0
    249a:	4668      	mov	r0, sp
    249c:	f002 fae6 	bl	4a6c <z_impl_k_sem_take>
}
    24a0:	b005      	add	sp, #20
    24a2:	f85d fb04 	ldr.w	pc, [sp], #4
    24a6:	bf00      	nop
    24a8:	00007231 	.word	0x00007231

000024ac <anomaly_132_workaround>:
{
    24ac:	b508      	push	{r3, lr}
	if (!once) {
    24ae:	4b06      	ldr	r3, [pc, #24]	; (24c8 <anomaly_132_workaround+0x1c>)
    24b0:	781b      	ldrb	r3, [r3, #0]
    24b2:	b103      	cbz	r3, 24b6 <anomaly_132_workaround+0xa>
}
    24b4:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    24b6:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    24ba:	f006 fa26 	bl	890a <z_impl_k_busy_wait>
		once = true;
    24be:	4b02      	ldr	r3, [pc, #8]	; (24c8 <anomaly_132_workaround+0x1c>)
    24c0:	2201      	movs	r2, #1
    24c2:	701a      	strb	r2, [r3, #0]
}
    24c4:	e7f6      	b.n	24b4 <anomaly_132_workaround+0x8>
    24c6:	bf00      	nop
    24c8:	200017fb 	.word	0x200017fb

000024cc <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    24cc:	b570      	push	{r4, r5, r6, lr}
    24ce:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    24d0:	2200      	movs	r2, #0
    24d2:	2101      	movs	r1, #1
    24d4:	4610      	mov	r0, r2
    24d6:	f004 fbdf 	bl	6c98 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    24da:	4811      	ldr	r0, [pc, #68]	; (2520 <clk_init+0x54>)
    24dc:	f001 fa74 	bl	39c8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    24e0:	4b10      	ldr	r3, [pc, #64]	; (2524 <clk_init+0x58>)
    24e2:	4298      	cmp	r0, r3
    24e4:	d119      	bne.n	251a <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    24e6:	f005 fd0f 	bl	7f08 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    24ea:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    24ec:	2c01      	cmp	r4, #1
    24ee:	d812      	bhi.n	2516 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    24f0:	4621      	mov	r1, r4
    24f2:	4630      	mov	r0, r6
    24f4:	f004 fdbc 	bl	7070 <get_sub_data>
    24f8:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    24fa:	4621      	mov	r1, r4
    24fc:	4630      	mov	r0, r6
    24fe:	f004 fdc2 	bl	7086 <get_onoff_manager>
    2502:	4909      	ldr	r1, [pc, #36]	; (2528 <clk_init+0x5c>)
    2504:	f004 f91c 	bl	6740 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2508:	2800      	cmp	r0, #0
    250a:	db05      	blt.n	2518 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    250c:	2301      	movs	r3, #1
    250e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2510:	441c      	add	r4, r3
    2512:	b2e4      	uxtb	r4, r4
    2514:	e7ea      	b.n	24ec <clk_init+0x20>
	}

	return 0;
    2516:	2000      	movs	r0, #0
}
    2518:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    251a:	f06f 0004 	mvn.w	r0, #4
    251e:	e7fb      	b.n	2518 <clk_init+0x4c>
    2520:	000022cd 	.word	0x000022cd
    2524:	0bad0000 	.word	0x0bad0000
    2528:	0000937c 	.word	0x0000937c

0000252c <z_nrf_clock_control_lf_on>:
{
    252c:	b510      	push	{r4, lr}
    252e:	4604      	mov	r4, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2530:	4b10      	ldr	r3, [pc, #64]	; (2574 <z_nrf_clock_control_lf_on+0x48>)
    2532:	2101      	movs	r1, #1
    2534:	f3bf 8f5b 	dmb	ish
    2538:	e853 2f00 	ldrex	r2, [r3]
    253c:	e843 1000 	strex	r0, r1, [r3]
    2540:	2800      	cmp	r0, #0
    2542:	d1f9      	bne.n	2538 <z_nrf_clock_control_lf_on+0xc>
    2544:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2548:	b11a      	cbz	r2, 2552 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    254a:	1e63      	subs	r3, r4, #1
    254c:	2b01      	cmp	r3, #1
    254e:	d90d      	bls.n	256c <z_nrf_clock_control_lf_on+0x40>
}
    2550:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    2552:	4809      	ldr	r0, [pc, #36]	; (2578 <z_nrf_clock_control_lf_on+0x4c>)
    2554:	f004 fd97 	bl	7086 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2558:	4908      	ldr	r1, [pc, #32]	; (257c <z_nrf_clock_control_lf_on+0x50>)
    255a:	2300      	movs	r3, #0
    255c:	604b      	str	r3, [r1, #4]
    255e:	608b      	str	r3, [r1, #8]
    2560:	60cb      	str	r3, [r1, #12]
    2562:	2301      	movs	r3, #1
    2564:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    2566:	f004 f908 	bl	677a <onoff_request>
    256a:	e7ee      	b.n	254a <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    256c:	4620      	mov	r0, r4
    256e:	f7ff ff1b 	bl	23a8 <lfclk_spinwait>
		break;
    2572:	e7ed      	b.n	2550 <z_nrf_clock_control_lf_on+0x24>
    2574:	20001228 	.word	0x20001228
    2578:	00008db8 	.word	0x00008db8
    257c:	20001218 	.word	0x20001218

00002580 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    2580:	b510      	push	{r4, lr}
    2582:	4604      	mov	r4, r0
			 */
			return c;
		}
	}

	if ('\n' == c) {
    2584:	280a      	cmp	r0, #10
    2586:	d006      	beq.n	2596 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    2588:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    258a:	4806      	ldr	r0, [pc, #24]	; (25a4 <console_out+0x24>)
    258c:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    258e:	685b      	ldr	r3, [r3, #4]
    2590:	4798      	blx	r3
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
	}

	return c;
}
    2592:	4620      	mov	r0, r4
    2594:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    2596:	4803      	ldr	r0, [pc, #12]	; (25a4 <console_out+0x24>)
    2598:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    259a:	685b      	ldr	r3, [r3, #4]
    259c:	210d      	movs	r1, #13
    259e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    25a0:	e7f2      	b.n	2588 <console_out+0x8>
    25a2:	bf00      	nop
    25a4:	00008de8 	.word	0x00008de8

000025a8 <console_input_init>:
		}
	}
}

static void console_input_init(void)
{
    25a8:	b510      	push	{r4, lr}
    25aa:	b082      	sub	sp, #8
	uint8_t c;

	uart_irq_rx_disable(uart_console_dev);
    25ac:	4c10      	ldr	r4, [pc, #64]	; (25f0 <console_input_init+0x48>)
    25ae:	4620      	mov	r0, r4
    25b0:	f004 fe6d 	bl	728e <uart_irq_rx_disable>
	uart_irq_tx_disable(uart_console_dev);
    25b4:	4620      	mov	r0, r4
    25b6:	f004 fe5e 	bl	7276 <uart_irq_tx_disable>
 * @retval -ENOTSUP If API is not enabled.
 */
static inline int uart_irq_callback_set(const struct device *dev,
					 uart_irq_callback_user_data_t cb)
{
	return uart_irq_callback_user_data_set(dev, cb, NULL);
    25ba:	2200      	movs	r2, #0
    25bc:	490d      	ldr	r1, [pc, #52]	; (25f4 <console_input_init+0x4c>)
    25be:	4620      	mov	r0, r4
    25c0:	f004 fe4b 	bl	725a <uart_irq_callback_user_data_set>
    25c4:	e005      	b.n	25d2 <console_input_init+0x2a>

	uart_irq_callback_set(uart_console_dev, uart_console_isr);

	/* Drain the fifo */
	while (uart_irq_rx_ready(uart_console_dev)) {
		uart_fifo_read(uart_console_dev, &c, 1);
    25c6:	2201      	movs	r2, #1
    25c8:	f10d 0107 	add.w	r1, sp, #7
    25cc:	4808      	ldr	r0, [pc, #32]	; (25f0 <console_input_init+0x48>)
    25ce:	f004 fe3b 	bl	7248 <uart_fifo_read>
	const struct uart_driver_api *api =
    25d2:	4b07      	ldr	r3, [pc, #28]	; (25f0 <console_input_init+0x48>)
    25d4:	689b      	ldr	r3, [r3, #8]
	if (api->irq_rx_ready == NULL) {
    25d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    25d8:	2b00      	cmp	r3, #0
    25da:	d0f4      	beq.n	25c6 <console_input_init+0x1e>
	return api->irq_rx_ready(dev);
    25dc:	4804      	ldr	r0, [pc, #16]	; (25f0 <console_input_init+0x48>)
    25de:	4798      	blx	r3
	while (uart_irq_rx_ready(uart_console_dev)) {
    25e0:	2800      	cmp	r0, #0
    25e2:	d1f0      	bne.n	25c6 <console_input_init+0x1e>
	}

	uart_irq_rx_enable(uart_console_dev);
    25e4:	4802      	ldr	r0, [pc, #8]	; (25f0 <console_input_init+0x48>)
    25e6:	f004 fe4c 	bl	7282 <uart_irq_rx_enable>
}
    25ea:	b002      	add	sp, #8
    25ec:	bd10      	pop	{r4, pc}
    25ee:	bf00      	nop
    25f0:	00008de8 	.word	0x00008de8
    25f4:	000028cd 	.word	0x000028cd

000025f8 <del_char>:
{
    25f8:	b570      	push	{r4, r5, r6, lr}
    25fa:	4606      	mov	r6, r0
    25fc:	460d      	mov	r5, r1
	const struct uart_driver_api *api =
    25fe:	4815      	ldr	r0, [pc, #84]	; (2654 <del_char+0x5c>)
    2600:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    2602:	685b      	ldr	r3, [r3, #4]
    2604:	2108      	movs	r1, #8
    2606:	4798      	blx	r3
	if (end == 0U) {
    2608:	b955      	cbnz	r5, 2620 <del_char+0x28>
	const struct uart_driver_api *api =
    260a:	4c12      	ldr	r4, [pc, #72]	; (2654 <del_char+0x5c>)
    260c:	68a5      	ldr	r5, [r4, #8]
	api->poll_out(dev, out_char);
    260e:	686b      	ldr	r3, [r5, #4]
    2610:	2120      	movs	r1, #32
    2612:	4620      	mov	r0, r4
    2614:	4798      	blx	r3
    2616:	686b      	ldr	r3, [r5, #4]
    2618:	2108      	movs	r1, #8
    261a:	4620      	mov	r0, r4
    261c:	4798      	blx	r3
}
    261e:	bd70      	pop	{r4, r5, r6, pc}
	printk("\x1b[s");
    2620:	480d      	ldr	r0, [pc, #52]	; (2658 <del_char+0x60>)
    2622:	f003 fd8f 	bl	6144 <printk>
}
    2626:	e007      	b.n	2638 <del_char+0x40>
		*pos = *(pos + 1);
    2628:	7871      	ldrb	r1, [r6, #1]
    262a:	f806 1b01 	strb.w	r1, [r6], #1
	const struct uart_driver_api *api =
    262e:	4809      	ldr	r0, [pc, #36]	; (2654 <del_char+0x5c>)
    2630:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    2632:	685b      	ldr	r3, [r3, #4]
    2634:	4798      	blx	r3
	while (end-- > 0) {
    2636:	4625      	mov	r5, r4
    2638:	1e6b      	subs	r3, r5, #1
    263a:	b2dc      	uxtb	r4, r3
    263c:	2d00      	cmp	r5, #0
    263e:	d1f3      	bne.n	2628 <del_char+0x30>
	const struct uart_driver_api *api =
    2640:	4804      	ldr	r0, [pc, #16]	; (2654 <del_char+0x5c>)
    2642:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    2644:	685b      	ldr	r3, [r3, #4]
    2646:	2120      	movs	r1, #32
    2648:	4798      	blx	r3
	printk("\x1b[u");
    264a:	4804      	ldr	r0, [pc, #16]	; (265c <del_char+0x64>)
    264c:	f003 fd7a 	bl	6144 <printk>
}
    2650:	e7e5      	b.n	261e <del_char+0x26>
    2652:	bf00      	nop
    2654:	00008de8 	.word	0x00008de8
    2658:	000093d4 	.word	0x000093d4
    265c:	000093d8 	.word	0x000093d8

00002660 <insert_char>:
{
    2660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2662:	4605      	mov	r5, r0
    2664:	460e      	mov	r6, r1
    2666:	4614      	mov	r4, r2
	const struct uart_driver_api *api =
    2668:	4810      	ldr	r0, [pc, #64]	; (26ac <insert_char+0x4c>)
    266a:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    266c:	685b      	ldr	r3, [r3, #4]
    266e:	4798      	blx	r3
	if (end == 0U) {
    2670:	b90c      	cbnz	r4, 2676 <insert_char+0x16>
		*pos = c;
    2672:	702e      	strb	r6, [r5, #0]
}
    2674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	tmp = *pos;
    2676:	782f      	ldrb	r7, [r5, #0]
	*(pos++) = c;
    2678:	f805 6b01 	strb.w	r6, [r5], #1
	printk("\x1b[s");
    267c:	480c      	ldr	r0, [pc, #48]	; (26b0 <insert_char+0x50>)
    267e:	f003 fd61 	bl	6144 <printk>
}
    2682:	e00b      	b.n	269c <insert_char+0x3c>
	const struct uart_driver_api *api =
    2684:	4809      	ldr	r0, [pc, #36]	; (26ac <insert_char+0x4c>)
    2686:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    2688:	685b      	ldr	r3, [r3, #4]
    268a:	4639      	mov	r1, r7
    268c:	4798      	blx	r3
		c = *pos;
    268e:	782b      	ldrb	r3, [r5, #0]
		*(pos++) = tmp;
    2690:	4628      	mov	r0, r5
    2692:	f800 7b01 	strb.w	r7, [r0], #1
		tmp = c;
    2696:	461f      	mov	r7, r3
	while (end-- > 0) {
    2698:	4634      	mov	r4, r6
		*(pos++) = tmp;
    269a:	4605      	mov	r5, r0
	while (end-- > 0) {
    269c:	1e63      	subs	r3, r4, #1
    269e:	b2de      	uxtb	r6, r3
    26a0:	2c00      	cmp	r4, #0
    26a2:	d1ef      	bne.n	2684 <insert_char+0x24>
	printk("\x1b[u");
    26a4:	4803      	ldr	r0, [pc, #12]	; (26b4 <insert_char+0x54>)
    26a6:	f003 fd4d 	bl	6144 <printk>
}
    26aa:	e7e3      	b.n	2674 <insert_char+0x14>
    26ac:	00008de8 	.word	0x00008de8
    26b0:	000093d4 	.word	0x000093d4
    26b4:	000093d8 	.word	0x000093d8

000026b8 <handle_ansi>:
{
    26b8:	b510      	push	{r4, lr}
    26ba:	460c      	mov	r4, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    26bc:	4b7b      	ldr	r3, [pc, #492]	; (28ac <handle_ansi+0x1f4>)
    26be:	f3bf 8f5b 	dmb	ish
    26c2:	e853 2f00 	ldrex	r2, [r3]
    26c6:	f022 0104 	bic.w	r1, r2, #4
    26ca:	e843 1c00 	strex	ip, r1, [r3]
    26ce:	f1bc 0f00 	cmp.w	ip, #0
    26d2:	d1f6      	bne.n	26c2 <handle_ansi+0xa>
    26d4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    26d8:	f012 0f04 	tst.w	r2, #4
    26dc:	d01c      	beq.n	2718 <handle_ansi+0x60>
		if (isdigit(byte) == 0) {
    26de:	4b74      	ldr	r3, [pc, #464]	; (28b0 <handle_ansi+0x1f8>)
    26e0:	5c1b      	ldrb	r3, [r3, r0]
    26e2:	f013 0f04 	tst.w	r3, #4
    26e6:	d103      	bne.n	26f0 <handle_ansi+0x38>
			ansi_val = 1U;
    26e8:	4b72      	ldr	r3, [pc, #456]	; (28b4 <handle_ansi+0x1fc>)
    26ea:	2201      	movs	r2, #1
    26ec:	601a      	str	r2, [r3, #0]
			goto ansi_cmd;
    26ee:	e04d      	b.n	278c <handle_ansi+0xd4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    26f0:	4b6e      	ldr	r3, [pc, #440]	; (28ac <handle_ansi+0x1f4>)
    26f2:	f3bf 8f5b 	dmb	ish
    26f6:	e853 1f00 	ldrex	r1, [r3]
    26fa:	f041 0108 	orr.w	r1, r1, #8
    26fe:	e843 1200 	strex	r2, r1, [r3]
    2702:	2a00      	cmp	r2, #0
    2704:	d1f7      	bne.n	26f6 <handle_ansi+0x3e>
    2706:	f3bf 8f5b 	dmb	ish
		ansi_val = byte - '0';
    270a:	3830      	subs	r0, #48	; 0x30
    270c:	4b69      	ldr	r3, [pc, #420]	; (28b4 <handle_ansi+0x1fc>)
    270e:	6018      	str	r0, [r3, #0]
		ansi_val_2 = 0U;
    2710:	4b69      	ldr	r3, [pc, #420]	; (28b8 <handle_ansi+0x200>)
    2712:	2200      	movs	r2, #0
    2714:	601a      	str	r2, [r3, #0]
		return;
    2716:	e089      	b.n	282c <handle_ansi+0x174>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2718:	f3bf 8f5b 	dmb	ish
    271c:	4b63      	ldr	r3, [pc, #396]	; (28ac <handle_ansi+0x1f4>)
    271e:	681b      	ldr	r3, [r3, #0]
    2720:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    2724:	f013 0f08 	tst.w	r3, #8
    2728:	d030      	beq.n	278c <handle_ansi+0xd4>
		if (isdigit(byte) != 0) {
    272a:	4b61      	ldr	r3, [pc, #388]	; (28b0 <handle_ansi+0x1f8>)
    272c:	5c1b      	ldrb	r3, [r3, r0]
    272e:	f013 0f04 	tst.w	r3, #4
    2732:	d137      	bne.n	27a4 <handle_ansi+0xec>
		if (byte == ';' &&
    2734:	283b      	cmp	r0, #59	; 0x3b
    2736:	d110      	bne.n	275a <handle_ansi+0xa2>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2738:	4b5c      	ldr	r3, [pc, #368]	; (28ac <handle_ansi+0x1f4>)
    273a:	f3bf 8f5b 	dmb	ish
    273e:	e853 2f00 	ldrex	r2, [r3]
    2742:	f042 0110 	orr.w	r1, r2, #16
    2746:	e843 1c00 	strex	ip, r1, [r3]
    274a:	f1bc 0f00 	cmp.w	ip, #0
    274e:	d1f6      	bne.n	273e <handle_ansi+0x86>
    2750:	f3bf 8f5b 	dmb	ish
    2754:	f012 0f10 	tst.w	r2, #16
    2758:	d068      	beq.n	282c <handle_ansi+0x174>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    275a:	4b54      	ldr	r3, [pc, #336]	; (28ac <handle_ansi+0x1f4>)
    275c:	f3bf 8f5b 	dmb	ish
    2760:	e853 2f00 	ldrex	r2, [r3]
    2764:	f022 0208 	bic.w	r2, r2, #8
    2768:	e843 2100 	strex	r1, r2, [r3]
    276c:	2900      	cmp	r1, #0
    276e:	d1f7      	bne.n	2760 <handle_ansi+0xa8>
    2770:	f3bf 8f5b 	dmb	ish
    2774:	f3bf 8f5b 	dmb	ish
    2778:	e853 1f00 	ldrex	r1, [r3]
    277c:	f021 0110 	bic.w	r1, r1, #16
    2780:	e843 1200 	strex	r2, r1, [r3]
    2784:	2a00      	cmp	r2, #0
    2786:	d1f7      	bne.n	2778 <handle_ansi+0xc0>
    2788:	f3bf 8f5b 	dmb	ish
	switch (byte) {
    278c:	2848      	cmp	r0, #72	; 0x48
    278e:	d826      	bhi.n	27de <handle_ansi+0x126>
    2790:	2843      	cmp	r0, #67	; 0x43
    2792:	d33e      	bcc.n	2812 <handle_ansi+0x15a>
    2794:	3843      	subs	r0, #67	; 0x43
    2796:	2805      	cmp	r0, #5
    2798:	d83b      	bhi.n	2812 <handle_ansi+0x15a>
    279a:	e8df f000 	tbb	[pc, r0]
    279e:	3454      	.short	0x3454
    27a0:	663a763a 	.word	0x663a763a
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    27a4:	f3bf 8f5b 	dmb	ish
    27a8:	4b40      	ldr	r3, [pc, #256]	; (28ac <handle_ansi+0x1f4>)
    27aa:	681b      	ldr	r3, [r3, #0]
    27ac:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    27b0:	f013 0f10 	tst.w	r3, #16
    27b4:	d009      	beq.n	27ca <handle_ansi+0x112>
				ansi_val_2 *= 10U;
    27b6:	4a40      	ldr	r2, [pc, #256]	; (28b8 <handle_ansi+0x200>)
    27b8:	6813      	ldr	r3, [r2, #0]
    27ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    27be:	005b      	lsls	r3, r3, #1
    27c0:	6013      	str	r3, [r2, #0]
				ansi_val_2 += byte - '0';
    27c2:	4403      	add	r3, r0
    27c4:	3b30      	subs	r3, #48	; 0x30
    27c6:	6013      	str	r3, [r2, #0]
    27c8:	e030      	b.n	282c <handle_ansi+0x174>
				ansi_val *= 10U;
    27ca:	4a3a      	ldr	r2, [pc, #232]	; (28b4 <handle_ansi+0x1fc>)
    27cc:	6813      	ldr	r3, [r2, #0]
    27ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    27d2:	005b      	lsls	r3, r3, #1
    27d4:	6013      	str	r3, [r2, #0]
				ansi_val += byte - '0';
    27d6:	4403      	add	r3, r0
    27d8:	3b30      	subs	r3, #48	; 0x30
    27da:	6013      	str	r3, [r2, #0]
			return;
    27dc:	e026      	b.n	282c <handle_ansi+0x174>
	switch (byte) {
    27de:	287e      	cmp	r0, #126	; 0x7e
    27e0:	d117      	bne.n	2812 <handle_ansi+0x15a>
		if (!end) {
    27e2:	4b36      	ldr	r3, [pc, #216]	; (28bc <handle_ansi+0x204>)
    27e4:	781b      	ldrb	r3, [r3, #0]
    27e6:	b1a3      	cbz	r3, 2812 <handle_ansi+0x15a>
	printk("\x1b[%uC", count);
    27e8:	2101      	movs	r1, #1
    27ea:	4835      	ldr	r0, [pc, #212]	; (28c0 <handle_ansi+0x208>)
    27ec:	f003 fcaa 	bl	6144 <printk>
		del_char(&line[cur], --end);
    27f0:	4b34      	ldr	r3, [pc, #208]	; (28c4 <handle_ansi+0x20c>)
    27f2:	7818      	ldrb	r0, [r3, #0]
    27f4:	4b31      	ldr	r3, [pc, #196]	; (28bc <handle_ansi+0x204>)
    27f6:	7819      	ldrb	r1, [r3, #0]
    27f8:	3901      	subs	r1, #1
    27fa:	b2c9      	uxtb	r1, r1
    27fc:	7019      	strb	r1, [r3, #0]
    27fe:	4420      	add	r0, r4
    2800:	f7ff fefa 	bl	25f8 <del_char>
		break;
    2804:	e005      	b.n	2812 <handle_ansi+0x15a>
		if (ansi_val > cur) {
    2806:	4b2f      	ldr	r3, [pc, #188]	; (28c4 <handle_ansi+0x20c>)
    2808:	781b      	ldrb	r3, [r3, #0]
    280a:	4a2a      	ldr	r2, [pc, #168]	; (28b4 <handle_ansi+0x1fc>)
    280c:	6811      	ldr	r1, [r2, #0]
    280e:	428b      	cmp	r3, r1
    2810:	d20d      	bcs.n	282e <handle_ansi+0x176>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2812:	4b26      	ldr	r3, [pc, #152]	; (28ac <handle_ansi+0x1f4>)
    2814:	f3bf 8f5b 	dmb	ish
    2818:	e853 1f00 	ldrex	r1, [r3]
    281c:	f021 0102 	bic.w	r1, r1, #2
    2820:	e843 1200 	strex	r2, r1, [r3]
    2824:	2a00      	cmp	r2, #0
    2826:	d1f7      	bne.n	2818 <handle_ansi+0x160>
    2828:	f3bf 8f5b 	dmb	ish
}
    282c:	bd10      	pop	{r4, pc}
		end += ansi_val;
    282e:	b2c8      	uxtb	r0, r1
    2830:	4c22      	ldr	r4, [pc, #136]	; (28bc <handle_ansi+0x204>)
    2832:	7822      	ldrb	r2, [r4, #0]
    2834:	4402      	add	r2, r0
    2836:	7022      	strb	r2, [r4, #0]
		cur -= ansi_val;
    2838:	1a1b      	subs	r3, r3, r0
    283a:	4a22      	ldr	r2, [pc, #136]	; (28c4 <handle_ansi+0x20c>)
    283c:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uD", count);
    283e:	4822      	ldr	r0, [pc, #136]	; (28c8 <handle_ansi+0x210>)
    2840:	f003 fc80 	bl	6144 <printk>
}
    2844:	e7e5      	b.n	2812 <handle_ansi+0x15a>
		if (ansi_val > end) {
    2846:	4b1d      	ldr	r3, [pc, #116]	; (28bc <handle_ansi+0x204>)
    2848:	781b      	ldrb	r3, [r3, #0]
    284a:	4a1a      	ldr	r2, [pc, #104]	; (28b4 <handle_ansi+0x1fc>)
    284c:	6811      	ldr	r1, [r2, #0]
    284e:	428b      	cmp	r3, r1
    2850:	d3df      	bcc.n	2812 <handle_ansi+0x15a>
		end -= ansi_val;
    2852:	b2ca      	uxtb	r2, r1
    2854:	1a9b      	subs	r3, r3, r2
    2856:	4819      	ldr	r0, [pc, #100]	; (28bc <handle_ansi+0x204>)
    2858:	7003      	strb	r3, [r0, #0]
		cur += ansi_val;
    285a:	4b1a      	ldr	r3, [pc, #104]	; (28c4 <handle_ansi+0x20c>)
    285c:	7818      	ldrb	r0, [r3, #0]
    285e:	4402      	add	r2, r0
    2860:	701a      	strb	r2, [r3, #0]
	printk("\x1b[%uC", count);
    2862:	4817      	ldr	r0, [pc, #92]	; (28c0 <handle_ansi+0x208>)
    2864:	f003 fc6e 	bl	6144 <printk>
}
    2868:	e7d3      	b.n	2812 <handle_ansi+0x15a>
		if (!cur) {
    286a:	4b16      	ldr	r3, [pc, #88]	; (28c4 <handle_ansi+0x20c>)
    286c:	7819      	ldrb	r1, [r3, #0]
    286e:	2900      	cmp	r1, #0
    2870:	d0cf      	beq.n	2812 <handle_ansi+0x15a>
	printk("\x1b[%uD", count);
    2872:	4815      	ldr	r0, [pc, #84]	; (28c8 <handle_ansi+0x210>)
    2874:	f003 fc66 	bl	6144 <printk>
		end += cur;
    2878:	4910      	ldr	r1, [pc, #64]	; (28bc <handle_ansi+0x204>)
    287a:	4a12      	ldr	r2, [pc, #72]	; (28c4 <handle_ansi+0x20c>)
    287c:	780b      	ldrb	r3, [r1, #0]
    287e:	7810      	ldrb	r0, [r2, #0]
    2880:	4403      	add	r3, r0
    2882:	700b      	strb	r3, [r1, #0]
		cur = 0U;
    2884:	2300      	movs	r3, #0
    2886:	7013      	strb	r3, [r2, #0]
		break;
    2888:	e7c3      	b.n	2812 <handle_ansi+0x15a>
		if (!end) {
    288a:	4b0c      	ldr	r3, [pc, #48]	; (28bc <handle_ansi+0x204>)
    288c:	7819      	ldrb	r1, [r3, #0]
    288e:	2900      	cmp	r1, #0
    2890:	d0bf      	beq.n	2812 <handle_ansi+0x15a>
	printk("\x1b[%uC", count);
    2892:	480b      	ldr	r0, [pc, #44]	; (28c0 <handle_ansi+0x208>)
    2894:	f003 fc56 	bl	6144 <printk>
		cur += end;
    2898:	490a      	ldr	r1, [pc, #40]	; (28c4 <handle_ansi+0x20c>)
    289a:	4a08      	ldr	r2, [pc, #32]	; (28bc <handle_ansi+0x204>)
    289c:	780b      	ldrb	r3, [r1, #0]
    289e:	7810      	ldrb	r0, [r2, #0]
    28a0:	4403      	add	r3, r0
    28a2:	700b      	strb	r3, [r1, #0]
		end = 0U;
    28a4:	2300      	movs	r3, #0
    28a6:	7013      	strb	r3, [r2, #0]
		break;
    28a8:	e7b3      	b.n	2812 <handle_ansi+0x15a>
    28aa:	bf00      	nop
    28ac:	2000128c 	.word	0x2000128c
    28b0:	00009655 	.word	0x00009655
    28b4:	20001288 	.word	0x20001288
    28b8:	20001284 	.word	0x20001284
    28bc:	200017fd 	.word	0x200017fd
    28c0:	000093e4 	.word	0x000093e4
    28c4:	200017fe 	.word	0x200017fe
    28c8:	000093dc 	.word	0x000093dc

000028cc <uart_console_isr>:
{
    28cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    28d0:	b083      	sub	sp, #12
	while (uart_irq_update(uart_console_dev) &&
    28d2:	e031      	b.n	2938 <uart_console_isr+0x6c>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    28d4:	4b79      	ldr	r3, [pc, #484]	; (2abc <uart_console_isr+0x1f0>)
    28d6:	6818      	ldr	r0, [r3, #0]
	return z_impl_k_queue_get(queue, timeout);
    28d8:	2200      	movs	r2, #0
    28da:	2300      	movs	r3, #0
    28dc:	f002 f864 	bl	49a8 <z_impl_k_queue_get>
    28e0:	4b77      	ldr	r3, [pc, #476]	; (2ac0 <uart_console_isr+0x1f4>)
    28e2:	6018      	str	r0, [r3, #0]
			if (!cmd) {
    28e4:	2800      	cmp	r0, #0
    28e6:	d145      	bne.n	2974 <uart_console_isr+0xa8>
}
    28e8:	b003      	add	sp, #12
    28ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			handle_ansi(byte, cmd->line);
    28ee:	4b74      	ldr	r3, [pc, #464]	; (2ac0 <uart_console_isr+0x1f4>)
    28f0:	6819      	ldr	r1, [r3, #0]
    28f2:	3105      	adds	r1, #5
    28f4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    28f8:	f7ff fede 	bl	26b8 <handle_ansi>
			continue;
    28fc:	e01c      	b.n	2938 <uart_console_isr+0x6c>
			if (byte == ANSI_ESC) {
    28fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2902:	2b5b      	cmp	r3, #91	; 0x5b
    2904:	d118      	bne.n	2938 <uart_console_isr+0x6c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2906:	4b6f      	ldr	r3, [pc, #444]	; (2ac4 <uart_console_isr+0x1f8>)
    2908:	f3bf 8f5b 	dmb	ish
    290c:	e853 2f00 	ldrex	r2, [r3]
    2910:	f042 0202 	orr.w	r2, r2, #2
    2914:	e843 2100 	strex	r1, r2, [r3]
    2918:	2900      	cmp	r1, #0
    291a:	d1f7      	bne.n	290c <uart_console_isr+0x40>
    291c:	f3bf 8f5b 	dmb	ish
    2920:	f3bf 8f5b 	dmb	ish
    2924:	e853 1f00 	ldrex	r1, [r3]
    2928:	f041 0104 	orr.w	r1, r1, #4
    292c:	e843 1200 	strex	r2, r1, [r3]
    2930:	2a00      	cmp	r2, #0
    2932:	d1f7      	bne.n	2924 <uart_console_isr+0x58>
    2934:	f3bf 8f5b 	dmb	ish
	while (uart_irq_update(uart_console_dev) &&
    2938:	4863      	ldr	r0, [pc, #396]	; (2ac8 <uart_console_isr+0x1fc>)
    293a:	f004 fcb7 	bl	72ac <uart_irq_update>
    293e:	2800      	cmp	r0, #0
    2940:	d0d2      	beq.n	28e8 <uart_console_isr+0x1c>
	       uart_irq_is_pending(uart_console_dev)) {
    2942:	4861      	ldr	r0, [pc, #388]	; (2ac8 <uart_console_isr+0x1fc>)
    2944:	f004 fca9 	bl	729a <uart_irq_is_pending>
	while (uart_irq_update(uart_console_dev) &&
    2948:	2800      	cmp	r0, #0
    294a:	d0cd      	beq.n	28e8 <uart_console_isr+0x1c>
	const struct uart_driver_api *api =
    294c:	4b5e      	ldr	r3, [pc, #376]	; (2ac8 <uart_console_isr+0x1fc>)
    294e:	689b      	ldr	r3, [r3, #8]
	if (api->irq_rx_ready == NULL) {
    2950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2952:	b11b      	cbz	r3, 295c <uart_console_isr+0x90>
	return api->irq_rx_ready(dev);
    2954:	485c      	ldr	r0, [pc, #368]	; (2ac8 <uart_console_isr+0x1fc>)
    2956:	4798      	blx	r3
		if (!uart_irq_rx_ready(uart_console_dev)) {
    2958:	2800      	cmp	r0, #0
    295a:	d0ed      	beq.n	2938 <uart_console_isr+0x6c>
		rx = read_uart(uart_console_dev, &byte, 1);
    295c:	2201      	movs	r2, #1
    295e:	f10d 0107 	add.w	r1, sp, #7
    2962:	4859      	ldr	r0, [pc, #356]	; (2ac8 <uart_console_isr+0x1fc>)
    2964:	f004 fcab 	bl	72be <read_uart>
		if (rx < 0) {
    2968:	2800      	cmp	r0, #0
    296a:	dbbd      	blt.n	28e8 <uart_console_isr+0x1c>
		if (!cmd) {
    296c:	4b54      	ldr	r3, [pc, #336]	; (2ac0 <uart_console_isr+0x1f4>)
    296e:	681b      	ldr	r3, [r3, #0]
    2970:	2b00      	cmp	r3, #0
    2972:	d0af      	beq.n	28d4 <uart_console_isr+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2974:	f3bf 8f5b 	dmb	ish
    2978:	4b52      	ldr	r3, [pc, #328]	; (2ac4 <uart_console_isr+0x1f8>)
    297a:	681b      	ldr	r3, [r3, #0]
    297c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    2980:	f013 0f02 	tst.w	r3, #2
    2984:	d1b3      	bne.n	28ee <uart_console_isr+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2986:	4b4f      	ldr	r3, [pc, #316]	; (2ac4 <uart_console_isr+0x1f8>)
    2988:	f3bf 8f5b 	dmb	ish
    298c:	e853 2f00 	ldrex	r2, [r3]
    2990:	f022 0101 	bic.w	r1, r2, #1
    2994:	e843 1000 	strex	r0, r1, [r3]
    2998:	2800      	cmp	r0, #0
    299a:	d1f7      	bne.n	298c <uart_console_isr+0xc0>
    299c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    29a0:	f012 0f01 	tst.w	r2, #1
    29a4:	d1ab      	bne.n	28fe <uart_console_isr+0x32>
		if (isprint(byte) == 0) {
    29a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    29aa:	4b48      	ldr	r3, [pc, #288]	; (2acc <uart_console_isr+0x200>)
    29ac:	5c5b      	ldrb	r3, [r3, r1]
    29ae:	f013 0f97 	tst.w	r3, #151	; 0x97
    29b2:	d012      	beq.n	29da <uart_console_isr+0x10e>
		if (cur + end < sizeof(cmd->line) - 1) {
    29b4:	4b46      	ldr	r3, [pc, #280]	; (2ad0 <uart_console_isr+0x204>)
    29b6:	781b      	ldrb	r3, [r3, #0]
    29b8:	4a46      	ldr	r2, [pc, #280]	; (2ad4 <uart_console_isr+0x208>)
    29ba:	7812      	ldrb	r2, [r2, #0]
    29bc:	18d0      	adds	r0, r2, r3
    29be:	287e      	cmp	r0, #126	; 0x7e
    29c0:	d8ba      	bhi.n	2938 <uart_console_isr+0x6c>
			insert_char(&cmd->line[cur++], byte, end);
    29c2:	483f      	ldr	r0, [pc, #252]	; (2ac0 <uart_console_isr+0x1f4>)
    29c4:	6800      	ldr	r0, [r0, #0]
    29c6:	f103 0c01 	add.w	ip, r3, #1
    29ca:	4c41      	ldr	r4, [pc, #260]	; (2ad0 <uart_console_isr+0x204>)
    29cc:	f884 c000 	strb.w	ip, [r4]
    29d0:	4418      	add	r0, r3
    29d2:	3005      	adds	r0, #5
    29d4:	f7ff fe44 	bl	2660 <insert_char>
    29d8:	e7ae      	b.n	2938 <uart_console_isr+0x6c>
			switch (byte) {
    29da:	291b      	cmp	r1, #27
    29dc:	d810      	bhi.n	2a00 <uart_console_isr+0x134>
    29de:	2908      	cmp	r1, #8
    29e0:	d32d      	bcc.n	2a3e <uart_console_isr+0x172>
    29e2:	3908      	subs	r1, #8
    29e4:	2913      	cmp	r1, #19
    29e6:	d82a      	bhi.n	2a3e <uart_console_isr+0x172>
    29e8:	e8df f001 	tbb	[pc, r1]
    29ec:	292e550c 	.word	0x292e550c
    29f0:	29293229 	.word	0x29293229
    29f4:	29292929 	.word	0x29292929
    29f8:	29292929 	.word	0x29292929
    29fc:	1c292929 	.word	0x1c292929
    2a00:	297f      	cmp	r1, #127	; 0x7f
    2a02:	d11c      	bne.n	2a3e <uart_console_isr+0x172>
				if (cur > 0) {
    2a04:	4b32      	ldr	r3, [pc, #200]	; (2ad0 <uart_console_isr+0x204>)
    2a06:	781b      	ldrb	r3, [r3, #0]
    2a08:	b1cb      	cbz	r3, 2a3e <uart_console_isr+0x172>
					del_char(&cmd->line[--cur], end);
    2a0a:	4a2d      	ldr	r2, [pc, #180]	; (2ac0 <uart_console_isr+0x1f4>)
    2a0c:	6810      	ldr	r0, [r2, #0]
    2a0e:	3b01      	subs	r3, #1
    2a10:	b2db      	uxtb	r3, r3
    2a12:	4a2f      	ldr	r2, [pc, #188]	; (2ad0 <uart_console_isr+0x204>)
    2a14:	7013      	strb	r3, [r2, #0]
    2a16:	4418      	add	r0, r3
    2a18:	4b2e      	ldr	r3, [pc, #184]	; (2ad4 <uart_console_isr+0x208>)
    2a1a:	7819      	ldrb	r1, [r3, #0]
    2a1c:	3005      	adds	r0, #5
    2a1e:	f7ff fdeb 	bl	25f8 <del_char>
    2a22:	e00c      	b.n	2a3e <uart_console_isr+0x172>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2a24:	4b27      	ldr	r3, [pc, #156]	; (2ac4 <uart_console_isr+0x1f8>)
    2a26:	f3bf 8f5b 	dmb	ish
    2a2a:	e853 1f00 	ldrex	r1, [r3]
    2a2e:	f041 0101 	orr.w	r1, r1, #1
    2a32:	e843 1200 	strex	r2, r1, [r3]
    2a36:	2a00      	cmp	r2, #0
    2a38:	d1f7      	bne.n	2a2a <uart_console_isr+0x15e>
    2a3a:	f3bf 8f5b 	dmb	ish
			last_char = byte;
    2a3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    2a42:	4b25      	ldr	r3, [pc, #148]	; (2ad8 <uart_console_isr+0x20c>)
    2a44:	701a      	strb	r2, [r3, #0]
			continue;
    2a46:	e777      	b.n	2938 <uart_console_isr+0x6c>
				if (last_char == '\r') {
    2a48:	4b23      	ldr	r3, [pc, #140]	; (2ad8 <uart_console_isr+0x20c>)
    2a4a:	781b      	ldrb	r3, [r3, #0]
    2a4c:	2b0d      	cmp	r3, #13
    2a4e:	d0f6      	beq.n	2a3e <uart_console_isr+0x172>
				cmd->line[cur + end] = '\0';
    2a50:	4d1b      	ldr	r5, [pc, #108]	; (2ac0 <uart_console_isr+0x1f4>)
    2a52:	682b      	ldr	r3, [r5, #0]
    2a54:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2ad0 <uart_console_isr+0x204>
    2a58:	f898 2000 	ldrb.w	r2, [r8]
    2a5c:	4f1d      	ldr	r7, [pc, #116]	; (2ad4 <uart_console_isr+0x208>)
    2a5e:	7839      	ldrb	r1, [r7, #0]
    2a60:	440a      	add	r2, r1
    2a62:	4413      	add	r3, r2
    2a64:	2400      	movs	r4, #0
    2a66:	715c      	strb	r4, [r3, #5]
	const struct uart_driver_api *api =
    2a68:	4e17      	ldr	r6, [pc, #92]	; (2ac8 <uart_console_isr+0x1fc>)
    2a6a:	f8d6 9008 	ldr.w	r9, [r6, #8]
	api->poll_out(dev, out_char);
    2a6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2a72:	210d      	movs	r1, #13
    2a74:	4630      	mov	r0, r6
    2a76:	4798      	blx	r3
    2a78:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2a7c:	210a      	movs	r1, #10
    2a7e:	4630      	mov	r0, r6
    2a80:	4798      	blx	r3
				cur = 0U;
    2a82:	f888 4000 	strb.w	r4, [r8]
				end = 0U;
    2a86:	703c      	strb	r4, [r7, #0]
				k_fifo_put(lines_queue, cmd);
    2a88:	6829      	ldr	r1, [r5, #0]
    2a8a:	4b14      	ldr	r3, [pc, #80]	; (2adc <uart_console_isr+0x210>)
    2a8c:	6818      	ldr	r0, [r3, #0]
    2a8e:	f005 fd56 	bl	853e <k_queue_append>
				cmd = NULL;
    2a92:	602c      	str	r4, [r5, #0]
				break;
    2a94:	e7d3      	b.n	2a3e <uart_console_isr+0x172>
				if (completion_cb && !end) {
    2a96:	4b12      	ldr	r3, [pc, #72]	; (2ae0 <uart_console_isr+0x214>)
    2a98:	681b      	ldr	r3, [r3, #0]
    2a9a:	2b00      	cmp	r3, #0
    2a9c:	d0cf      	beq.n	2a3e <uart_console_isr+0x172>
    2a9e:	4a0d      	ldr	r2, [pc, #52]	; (2ad4 <uart_console_isr+0x208>)
    2aa0:	7812      	ldrb	r2, [r2, #0]
    2aa2:	2a00      	cmp	r2, #0
    2aa4:	d1cb      	bne.n	2a3e <uart_console_isr+0x172>
					cur += completion_cb(cmd->line, cur);
    2aa6:	4a06      	ldr	r2, [pc, #24]	; (2ac0 <uart_console_isr+0x1f4>)
    2aa8:	6810      	ldr	r0, [r2, #0]
    2aaa:	4c09      	ldr	r4, [pc, #36]	; (2ad0 <uart_console_isr+0x204>)
    2aac:	7821      	ldrb	r1, [r4, #0]
    2aae:	3005      	adds	r0, #5
    2ab0:	4798      	blx	r3
    2ab2:	7823      	ldrb	r3, [r4, #0]
    2ab4:	4403      	add	r3, r0
    2ab6:	7023      	strb	r3, [r4, #0]
    2ab8:	e7c1      	b.n	2a3e <uart_console_isr+0x172>
    2aba:	bf00      	nop
    2abc:	20001298 	.word	0x20001298
    2ac0:	20001280 	.word	0x20001280
    2ac4:	2000128c 	.word	0x2000128c
    2ac8:	00008de8 	.word	0x00008de8
    2acc:	00009655 	.word	0x00009655
    2ad0:	200017fe 	.word	0x200017fe
    2ad4:	200017fd 	.word	0x200017fd
    2ad8:	200017fc 	.word	0x200017fc
    2adc:	20001294 	.word	0x20001294
    2ae0:	20001290 	.word	0x20001290

00002ae4 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    2ae4:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    2ae6:	4c04      	ldr	r4, [pc, #16]	; (2af8 <uart_console_hook_install+0x14>)
    2ae8:	4620      	mov	r0, r4
    2aea:	f7ff f983 	bl	1df4 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    2aee:	4620      	mov	r0, r4
    2af0:	f7fd ff8c 	bl	a0c <__printk_hook_install>
#endif
}
    2af4:	bd10      	pop	{r4, pc}
    2af6:	bf00      	nop
    2af8:	00002581 	.word	0x00002581

00002afc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    2afc:	b508      	push	{r3, lr}
    2afe:	4805      	ldr	r0, [pc, #20]	; (2b14 <uart_console_init+0x18>)
    2b00:	f005 fc19 	bl	8336 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2b04:	b118      	cbz	r0, 2b0e <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    2b06:	f7ff ffed 	bl	2ae4 <uart_console_hook_install>

	return 0;
    2b0a:	2000      	movs	r0, #0
}
    2b0c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2b0e:	f06f 0012 	mvn.w	r0, #18
    2b12:	e7fb      	b.n	2b0c <uart_console_init+0x10>
    2b14:	00008de8 	.word	0x00008de8

00002b18 <uart_register_input>:
{
    2b18:	b508      	push	{r3, lr}
	avail_queue = avail;
    2b1a:	4b04      	ldr	r3, [pc, #16]	; (2b2c <uart_register_input+0x14>)
    2b1c:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    2b1e:	4b04      	ldr	r3, [pc, #16]	; (2b30 <uart_register_input+0x18>)
    2b20:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    2b22:	4b04      	ldr	r3, [pc, #16]	; (2b34 <uart_register_input+0x1c>)
    2b24:	601a      	str	r2, [r3, #0]
	console_input_init();
    2b26:	f7ff fd3f 	bl	25a8 <console_input_init>
}
    2b2a:	bd08      	pop	{r3, pc}
    2b2c:	20001298 	.word	0x20001298
    2b30:	20001294 	.word	0x20001294
    2b34:	20001290 	.word	0x20001290

00002b38 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2b38:	b908      	cbnz	r0, 2b3e <get_dev+0x6>
    2b3a:	4802      	ldr	r0, [pc, #8]	; (2b44 <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    2b3c:	4770      	bx	lr
	const struct device *dev = NULL;
    2b3e:	2000      	movs	r0, #0
    2b40:	4770      	bx	lr
    2b42:	bf00      	nop
    2b44:	00008dd0 	.word	0x00008dd0

00002b48 <gpio_nrfx_pin_interrupt_configure>:
{
    2b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b4a:	b085      	sub	sp, #20
    2b4c:	460e      	mov	r6, r1
    2b4e:	4619      	mov	r1, r3
	return port->config;
    2b50:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2b52:	7b1b      	ldrb	r3, [r3, #12]
    2b54:	f006 051f 	and.w	r5, r6, #31
    2b58:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2b5c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    2b60:	d022      	beq.n	2ba8 <gpio_nrfx_pin_interrupt_configure+0x60>
    2b62:	4607      	mov	r7, r0
    2b64:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b66:	2300      	movs	r3, #0
    2b68:	9301      	str	r3, [sp, #4]
    2b6a:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    2b6c:	4610      	mov	r0, r2
    2b6e:	f004 fc92 	bl	7496 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b72:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    2b76:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2b78:	6899      	ldr	r1, [r3, #8]
    2b7a:	40f1      	lsrs	r1, r6
    2b7c:	f011 0f01 	tst.w	r1, #1
    2b80:	d102      	bne.n	2b88 <gpio_nrfx_pin_interrupt_configure+0x40>
    2b82:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    2b86:	d014      	beq.n	2bb2 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2b88:	2300      	movs	r3, #0
    2b8a:	aa01      	add	r2, sp, #4
    2b8c:	4619      	mov	r1, r3
    2b8e:	4628      	mov	r0, r5
    2b90:	f001 f8fe 	bl	3d90 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2b94:	4b19      	ldr	r3, [pc, #100]	; (2bfc <gpio_nrfx_pin_interrupt_configure+0xb4>)
    2b96:	4298      	cmp	r0, r3
    2b98:	d12c      	bne.n	2bf4 <gpio_nrfx_pin_interrupt_configure+0xac>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2b9a:	2101      	movs	r1, #1
    2b9c:	4628      	mov	r0, r5
    2b9e:	f001 fa57 	bl	4050 <nrfx_gpiote_trigger_enable>
	return 0;
    2ba2:	2000      	movs	r0, #0
}
    2ba4:	b005      	add	sp, #20
    2ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    2ba8:	4628      	mov	r0, r5
    2baa:	f001 fa8d 	bl	40c8 <nrfx_gpiote_trigger_disable>
		return 0;
    2bae:	2000      	movs	r0, #0
    2bb0:	e7f8      	b.n	2ba4 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2bb2:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2bb6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2bba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    2bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2bc2:	f013 0f01 	tst.w	r3, #1
    2bc6:	d1df      	bne.n	2b88 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2bc8:	f10d 010f 	add.w	r1, sp, #15
    2bcc:	4628      	mov	r0, r5
    2bce:	f001 f9e3 	bl	3f98 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2bd2:	4b0b      	ldr	r3, [pc, #44]	; (2c00 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    2bd4:	4298      	cmp	r0, r3
    2bd6:	d003      	beq.n	2be0 <gpio_nrfx_pin_interrupt_configure+0x98>
		trigger_config.p_in_channel = &ch;
    2bd8:	f10d 030f 	add.w	r3, sp, #15
    2bdc:	9302      	str	r3, [sp, #8]
    2bde:	e7d3      	b.n	2b88 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    2be0:	f10d 000f 	add.w	r0, sp, #15
    2be4:	f001 fa2c 	bl	4040 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2be8:	4b04      	ldr	r3, [pc, #16]	; (2bfc <gpio_nrfx_pin_interrupt_configure+0xb4>)
    2bea:	4298      	cmp	r0, r3
    2bec:	d0f4      	beq.n	2bd8 <gpio_nrfx_pin_interrupt_configure+0x90>
				return -ENOMEM;
    2bee:	f06f 000b 	mvn.w	r0, #11
    2bf2:	e7d7      	b.n	2ba4 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    2bf4:	f06f 0015 	mvn.w	r0, #21
    2bf8:	e7d4      	b.n	2ba4 <gpio_nrfx_pin_interrupt_configure+0x5c>
    2bfa:	bf00      	nop
    2bfc:	0bad0000 	.word	0x0bad0000
    2c00:	0bad0004 	.word	0x0bad0004

00002c04 <gpio_nrfx_pin_configure>:
{
    2c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c08:	b086      	sub	sp, #24
    2c0a:	460e      	mov	r6, r1
    2c0c:	4614      	mov	r4, r2
	return port->config;
    2c0e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2c12:	f898 300c 	ldrb.w	r3, [r8, #12]
    2c16:	f001 051f 	and.w	r5, r1, #31
    2c1a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2c1e:	f10d 0117 	add.w	r1, sp, #23
    2c22:	4628      	mov	r0, r5
    2c24:	f001 f9b8 	bl	3f98 <nrfx_gpiote_channel_get>
    2c28:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2c2a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    2c2e:	d03a      	beq.n	2ca6 <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2c30:	2100      	movs	r1, #0
    2c32:	9103      	str	r1, [sp, #12]
    2c34:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2c36:	460b      	mov	r3, r1
    2c38:	aa03      	add	r2, sp, #12
    2c3a:	4628      	mov	r0, r5
    2c3c:	f001 f8a8 	bl	3d90 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2c40:	4b33      	ldr	r3, [pc, #204]	; (2d10 <gpio_nrfx_pin_configure+0x10c>)
    2c42:	4298      	cmp	r0, r3
    2c44:	d161      	bne.n	2d0a <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
    2c46:	429f      	cmp	r7, r3
    2c48:	d03d      	beq.n	2cc6 <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
    2c4a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    2c4e:	d049      	beq.n	2ce4 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
    2c50:	f10d 0103 	add.w	r1, sp, #3
    2c54:	4620      	mov	r0, r4
    2c56:	f004 fba3 	bl	73a0 <get_drive>
		if (rv != 0) {
    2c5a:	4607      	mov	r7, r0
    2c5c:	bb50      	cbnz	r0, 2cb4 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
    2c5e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2c62:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2c66:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    2c6a:	bf0c      	ite	eq
    2c6c:	2301      	moveq	r3, #1
    2c6e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2c70:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    2c74:	4620      	mov	r0, r4
    2c76:	f004 fbd6 	bl	7426 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    2c7a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2c7e:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    2c82:	d025      	beq.n	2cd0 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2c84:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2c88:	2301      	movs	r3, #1
    2c8a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    2c8c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2c90:	2200      	movs	r2, #0
    2c92:	a901      	add	r1, sp, #4
    2c94:	4628      	mov	r0, r5
    2c96:	f001 f90f 	bl	3eb8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2c9a:	4b1d      	ldr	r3, [pc, #116]	; (2d10 <gpio_nrfx_pin_configure+0x10c>)
    2c9c:	4298      	cmp	r0, r3
    2c9e:	d009      	beq.n	2cb4 <gpio_nrfx_pin_configure+0xb0>
    2ca0:	f06f 0715 	mvn.w	r7, #21
    2ca4:	e006      	b.n	2cb4 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    2ca6:	4628      	mov	r0, r5
    2ca8:	f001 fa38 	bl	411c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    2cac:	4b18      	ldr	r3, [pc, #96]	; (2d10 <gpio_nrfx_pin_configure+0x10c>)
    2cae:	429f      	cmp	r7, r3
    2cb0:	d004      	beq.n	2cbc <gpio_nrfx_pin_configure+0xb8>
		return 0;
    2cb2:	2700      	movs	r7, #0
}
    2cb4:	4638      	mov	r0, r7
    2cb6:	b006      	add	sp, #24
    2cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    2cbc:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2cc0:	f001 f9b6 	bl	4030 <nrfx_gpiote_channel_free>
    2cc4:	e7f5      	b.n	2cb2 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
    2cc6:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2cca:	f001 f9b1 	bl	4030 <nrfx_gpiote_channel_free>
    2cce:	e7bc      	b.n	2c4a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2cd0:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    2cd4:	d0dc      	beq.n	2c90 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2cd6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2cda:	2301      	movs	r3, #1
    2cdc:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    2cde:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    2ce2:	e7d5      	b.n	2c90 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    2ce4:	4620      	mov	r0, r4
    2ce6:	f004 fb9e 	bl	7426 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    2cea:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2cee:	2300      	movs	r3, #0
    2cf0:	461a      	mov	r2, r3
    2cf2:	a902      	add	r1, sp, #8
    2cf4:	4628      	mov	r0, r5
    2cf6:	f001 f84b 	bl	3d90 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2cfa:	4b05      	ldr	r3, [pc, #20]	; (2d10 <gpio_nrfx_pin_configure+0x10c>)
    2cfc:	4298      	cmp	r0, r3
    2cfe:	d101      	bne.n	2d04 <gpio_nrfx_pin_configure+0x100>
    2d00:	2700      	movs	r7, #0
    2d02:	e7d7      	b.n	2cb4 <gpio_nrfx_pin_configure+0xb0>
    2d04:	f06f 0715 	mvn.w	r7, #21
    2d08:	e7d4      	b.n	2cb4 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
    2d0a:	f06f 0715 	mvn.w	r7, #21
    2d0e:	e7d1      	b.n	2cb4 <gpio_nrfx_pin_configure+0xb0>
    2d10:	0bad0000 	.word	0x0bad0000

00002d14 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2d14:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2d16:	f001 f981 	bl	401c <nrfx_gpiote_is_init>
    2d1a:	b108      	cbz	r0, 2d20 <gpio_nrfx_init+0xc>
		return 0;
    2d1c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2d1e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    2d20:	f001 f952 	bl	3fc8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2d24:	4b08      	ldr	r3, [pc, #32]	; (2d48 <gpio_nrfx_init+0x34>)
    2d26:	4298      	cmp	r0, r3
    2d28:	d10a      	bne.n	2d40 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2d2a:	2100      	movs	r1, #0
    2d2c:	4807      	ldr	r0, [pc, #28]	; (2d4c <gpio_nrfx_init+0x38>)
    2d2e:	f001 f92d 	bl	3f8c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2d32:	2200      	movs	r2, #0
    2d34:	2105      	movs	r1, #5
    2d36:	2006      	movs	r0, #6
    2d38:	f003 ffae 	bl	6c98 <z_arm_irq_priority_set>
	return 0;
    2d3c:	2000      	movs	r0, #0
    2d3e:	e7ee      	b.n	2d1e <gpio_nrfx_init+0xa>
		return -EIO;
    2d40:	f06f 0004 	mvn.w	r0, #4
    2d44:	e7eb      	b.n	2d1e <gpio_nrfx_init+0xa>
    2d46:	bf00      	nop
    2d48:	0bad0000 	.word	0x0bad0000
    2d4c:	000074cf 	.word	0x000074cf

00002d50 <pinctrl_configure_pins>:
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2d50:	f04f 0c00 	mov.w	ip, #0
    2d54:	458c      	cmp	ip, r1
    2d56:	f080 80b7 	bcs.w	2ec8 <pinctrl_configure_pins+0x178>
{
    2d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d5c:	e032      	b.n	2dc4 <pinctrl_configure_pins+0x74>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    2d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d62:	e039      	b.n	2dd8 <pinctrl_configure_pins+0x88>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    2d64:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2d68:	2401      	movs	r4, #1
			write = 1U;
    2d6a:	4625      	mov	r5, r4
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    2d6c:	2b7f      	cmp	r3, #127	; 0x7f
    2d6e:	d023      	beq.n	2db8 <pinctrl_configure_pins+0x68>
			if (write != NO_WRITE) {
    2d70:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    2d74:	d00a      	beq.n	2d8c <pinctrl_configure_pins+0x3c>
    if (value == 0)
    2d76:	2d00      	cmp	r5, #0
    2d78:	f040 8095 	bne.w	2ea6 <pinctrl_configure_pins+0x156>
    *p_pin = pin_number & 0x1F;
    2d7c:	f003 071f 	and.w	r7, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2d80:	2501      	movs	r5, #1
    2d82:	40bd      	lsls	r5, r7
    p_reg->OUTCLR = clr_mask;
    2d84:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    2d88:	f8c7 550c 	str.w	r5, [r7, #1292]	; 0x50c
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    2d8c:	5985      	ldr	r5, [r0, r6]
    2d8e:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    2d92:	f040 8091 	bne.w	2eb8 <pinctrl_configure_pins+0x168>
    2d96:	4626      	mov	r6, r4
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    2d98:	f3c5 15c1 	ubfx	r5, r5, #7, #2
    *p_pin = pin_number & 0x1F;
    2d9c:	f003 031f 	and.w	r3, r3, #31
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2da0:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    2da4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2da8:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    2dac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2db0:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    2db4:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2db8:	f10c 0c01 	add.w	ip, ip, #1
    2dbc:	fa5f fc8c 	uxtb.w	ip, ip
    2dc0:	458c      	cmp	ip, r1
    2dc2:	d27c      	bcs.n	2ebe <pinctrl_configure_pins+0x16e>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2dc4:	ea4f 068c 	mov.w	r6, ip, lsl #2
    2dc8:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    2dcc:	f3c4 2e43 	ubfx	lr, r4, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    2dd0:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    2dd4:	2b7f      	cmp	r3, #127	; 0x7f
    2dd6:	d0c2      	beq.n	2d5e <pinctrl_configure_pins+0xe>
		switch (NRF_GET_FUN(pins[i])) {
    2dd8:	0c24      	lsrs	r4, r4, #16
    2dda:	2c19      	cmp	r4, #25
    2ddc:	d871      	bhi.n	2ec2 <pinctrl_configure_pins+0x172>
    2dde:	a501      	add	r5, pc, #4	; (adr r5, 2de4 <pinctrl_configure_pins+0x94>)
    2de0:	f855 f024 	ldr.w	pc, [r5, r4, lsl #2]
    2de4:	00002d65 	.word	0x00002d65
    2de8:	00002e4d 	.word	0x00002e4d
    2dec:	00002e59 	.word	0x00002e59
    2df0:	00002e63 	.word	0x00002e63
    2df4:	00002ec3 	.word	0x00002ec3
    2df8:	00002ec3 	.word	0x00002ec3
    2dfc:	00002ec3 	.word	0x00002ec3
    2e00:	00002ec3 	.word	0x00002ec3
    2e04:	00002ec3 	.word	0x00002ec3
    2e08:	00002ec3 	.word	0x00002ec3
    2e0c:	00002ec3 	.word	0x00002ec3
    2e10:	00002ec3 	.word	0x00002ec3
    2e14:	00002ec3 	.word	0x00002ec3
    2e18:	00002ec3 	.word	0x00002ec3
    2e1c:	00002ec3 	.word	0x00002ec3
    2e20:	00002ec3 	.word	0x00002ec3
    2e24:	00002ec3 	.word	0x00002ec3
    2e28:	00002ec3 	.word	0x00002ec3
    2e2c:	00002ec3 	.word	0x00002ec3
    2e30:	00002ec3 	.word	0x00002ec3
    2e34:	00002ec3 	.word	0x00002ec3
    2e38:	00002ec3 	.word	0x00002ec3
    2e3c:	00002e6f 	.word	0x00002e6f
    2e40:	00002e7d 	.word	0x00002e7d
    2e44:	00002e8b 	.word	0x00002e8b
    2e48:	00002e99 	.word	0x00002e99
			NRF_PSEL_UART(reg, RXD) = pin;
    2e4c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2e50:	2400      	movs	r4, #0
		uint32_t write = NO_WRITE;
    2e52:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			break;
    2e56:	e789      	b.n	2d6c <pinctrl_configure_pins+0x1c>
			NRF_PSEL_UART(reg, RTS) = pin;
    2e58:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2e5c:	2401      	movs	r4, #1
			write = 1U;
    2e5e:	4625      	mov	r5, r4
			break;
    2e60:	e784      	b.n	2d6c <pinctrl_configure_pins+0x1c>
			NRF_PSEL_UART(reg, CTS) = pin;
    2e62:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2e66:	2400      	movs	r4, #0
		uint32_t write = NO_WRITE;
    2e68:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			break;
    2e6c:	e77e      	b.n	2d6c <pinctrl_configure_pins+0x1c>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    2e6e:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    2e72:	5985      	ldr	r5, [r0, r6]
    2e74:	f3c5 3580 	ubfx	r5, r5, #14, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2e78:	2401      	movs	r4, #1
			break;
    2e7a:	e777      	b.n	2d6c <pinctrl_configure_pins+0x1c>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    2e7c:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2e80:	5985      	ldr	r5, [r0, r6]
    2e82:	f3c5 3580 	ubfx	r5, r5, #14, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2e86:	2401      	movs	r4, #1
			break;
    2e88:	e770      	b.n	2d6c <pinctrl_configure_pins+0x1c>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    2e8a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    2e8e:	5985      	ldr	r5, [r0, r6]
    2e90:	f3c5 3580 	ubfx	r5, r5, #14, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2e94:	2401      	movs	r4, #1
			break;
    2e96:	e769      	b.n	2d6c <pinctrl_configure_pins+0x1c>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2e98:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    2e9c:	5985      	ldr	r5, [r0, r6]
    2e9e:	f3c5 3580 	ubfx	r5, r5, #14, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2ea2:	2401      	movs	r4, #1
			break;
    2ea4:	e762      	b.n	2d6c <pinctrl_configure_pins+0x1c>
    *p_pin = pin_number & 0x1F;
    2ea6:	f003 071f 	and.w	r7, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2eaa:	2501      	movs	r5, #1
    2eac:	40bd      	lsls	r5, r7
    p_reg->OUTSET = set_mask;
    2eae:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    2eb2:	f8c7 5508 	str.w	r5, [r7, #1288]	; 0x508
}
    2eb6:	e769      	b.n	2d8c <pinctrl_configure_pins+0x3c>
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2eb8:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    2eba:	2400      	movs	r4, #0
    2ebc:	e76c      	b.n	2d98 <pinctrl_configure_pins+0x48>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    2ebe:	2000      	movs	r0, #0
    2ec0:	e001      	b.n	2ec6 <pinctrl_configure_pins+0x176>
		switch (NRF_GET_FUN(pins[i])) {
    2ec2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
    2ec8:	2000      	movs	r0, #0
}
    2eca:	4770      	bx	lr

00002ecc <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    2ecc:	4802      	ldr	r0, [pc, #8]	; (2ed8 <pwm_nrfx_get_cycles_per_sec+0xc>)
    2ece:	2100      	movs	r1, #0
    2ed0:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    2ed4:	2000      	movs	r0, #0
    2ed6:	4770      	bx	lr
    2ed8:	00f42400 	.word	0x00f42400

00002edc <pwm_nrfx_init>:
	.set_cycles = pwm_nrfx_set_cycles,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    2edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ede:	b083      	sub	sp, #12
	const struct pwm_nrfx_config *config = dev->config;
    2ee0:	6845      	ldr	r5, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    2ee2:	6906      	ldr	r6, [r0, #16]
	uint8_t initially_inverted = 0;

	int ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
    2ee4:	2100      	movs	r1, #0
    2ee6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    2ee8:	f004 fbd6 	bl	7698 <pinctrl_apply_state>

	if (ret < 0) {
    2eec:	2800      	cmp	r0, #0
    2eee:	db37      	blt.n	2f60 <pwm_nrfx_init+0x84>
		return ret;
	}

	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    2ef0:	2400      	movs	r4, #0
	uint8_t initially_inverted = 0;
    2ef2:	4627      	mov	r7, r4
    2ef4:	e002      	b.n	2efc <pwm_nrfx_init+0x20>
		if (channel_psel_get(i, &psel, config)) {
			/* Mark channels as inverted according to what initial
			 * state of their outputs has been set by pinctrl (high
			 * idle state means that the channel is inverted).
			 */
			initially_inverted |= nrf_gpio_pin_out_read(psel) ?
    2ef6:	433b      	orrs	r3, r7
    2ef8:	b2df      	uxtb	r7, r3
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    2efa:	3401      	adds	r4, #1
    2efc:	2c03      	cmp	r4, #3
    2efe:	d814      	bhi.n	2f2a <pwm_nrfx_init+0x4e>
		if (channel_psel_get(i, &psel, config)) {
    2f00:	462a      	mov	r2, r5
    2f02:	a901      	add	r1, sp, #4
    2f04:	4620      	mov	r0, r4
    2f06:	f004 fb35 	bl	7574 <channel_psel_get>
    2f0a:	2800      	cmp	r0, #0
    2f0c:	d0f5      	beq.n	2efa <pwm_nrfx_init+0x1e>
			initially_inverted |= nrf_gpio_pin_out_read(psel) ?
    2f0e:	9b01      	ldr	r3, [sp, #4]
    *p_pin = pin_number & 0x1F;
    2f10:	f003 021f 	and.w	r2, r3, #31
    return p_reg->OUT;
    2f14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2f18:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
    2f1c:	40d3      	lsrs	r3, r2
					      BIT(i) : 0;
    2f1e:	f013 0301 	ands.w	r3, r3, #1
    2f22:	d0e8      	beq.n	2ef6 <pwm_nrfx_init+0x1a>
    2f24:	2301      	movs	r3, #1
    2f26:	40a3      	lsls	r3, r4
    2f28:	e7e5      	b.n	2ef6 <pwm_nrfx_init+0x1a>
		}
	}

	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    2f2a:	2300      	movs	r3, #0
    2f2c:	e005      	b.n	2f3a <pwm_nrfx_init+0x5e>
		bool inverted = initially_inverted & BIT(i);

		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
    2f2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2f32:	eb06 0243 	add.w	r2, r6, r3, lsl #1
    2f36:	8091      	strh	r1, [r2, #4]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
    2f38:	3301      	adds	r3, #1
    2f3a:	2b03      	cmp	r3, #3
    2f3c:	d805      	bhi.n	2f4a <pwm_nrfx_init+0x6e>
		bool inverted = initially_inverted & BIT(i);
    2f3e:	2201      	movs	r2, #1
    2f40:	409a      	lsls	r2, r3
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
    2f42:	4217      	tst	r7, r2
    2f44:	d0f3      	beq.n	2f2e <pwm_nrfx_init+0x52>
    2f46:	2100      	movs	r1, #0
    2f48:	e7f3      	b.n	2f32 <pwm_nrfx_init+0x56>
	}

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    2f4a:	2300      	movs	r3, #0
    2f4c:	461a      	mov	r2, r3
    2f4e:	f105 0108 	add.w	r1, r5, #8
    2f52:	4628      	mov	r0, r5
    2f54:	f001 f936 	bl	41c4 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    2f58:	4b04      	ldr	r3, [pc, #16]	; (2f6c <pwm_nrfx_init+0x90>)
    2f5a:	4298      	cmp	r0, r3
    2f5c:	d102      	bne.n	2f64 <pwm_nrfx_init+0x88>
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
	}

	return 0;
    2f5e:	2000      	movs	r0, #0
}
    2f60:	b003      	add	sp, #12
    2f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBUSY;
    2f64:	f06f 000f 	mvn.w	r0, #15
    2f68:	e7fa      	b.n	2f60 <pwm_nrfx_init+0x84>
    2f6a:	bf00      	nop
    2f6c:	0bad0000 	.word	0x0bad0000

00002f70 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    2f70:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    2f72:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    2f74:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    2f78:	d06f      	beq.n	305a <baudrate_set+0xea>
    2f7a:	d83a      	bhi.n	2ff2 <baudrate_set+0x82>
    2f7c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    2f80:	d06e      	beq.n	3060 <baudrate_set+0xf0>
    2f82:	d90a      	bls.n	2f9a <baudrate_set+0x2a>
    2f84:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    2f88:	d075      	beq.n	3076 <baudrate_set+0x106>
    2f8a:	d924      	bls.n	2fd6 <baudrate_set+0x66>
    2f8c:	f647 2312 	movw	r3, #31250	; 0x7a12
    2f90:	4299      	cmp	r1, r3
    2f92:	d12b      	bne.n	2fec <baudrate_set+0x7c>
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
#if defined(UARTE_BAUDRATE_BAUDRATE_Baud31250)
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2f94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2f98:	e013      	b.n	2fc2 <baudrate_set+0x52>
	switch (baudrate) {
    2f9a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    2f9e:	d061      	beq.n	3064 <baudrate_set+0xf4>
    2fa0:	d907      	bls.n	2fb2 <baudrate_set+0x42>
    2fa2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2fa6:	d063      	beq.n	3070 <baudrate_set+0x100>
    2fa8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2fac:	d110      	bne.n	2fd0 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2fae:	4b3c      	ldr	r3, [pc, #240]	; (30a0 <baudrate_set+0x130>)
    2fb0:	e007      	b.n	2fc2 <baudrate_set+0x52>
	switch (baudrate) {
    2fb2:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2fb6:	d058      	beq.n	306a <baudrate_set+0xfa>
    2fb8:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2fbc:	d105      	bne.n	2fca <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    2fbe:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2fc2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    2fc6:	2000      	movs	r0, #0
    2fc8:	4770      	bx	lr
	switch (baudrate) {
    2fca:	f06f 0015 	mvn.w	r0, #21
    2fce:	4770      	bx	lr
    2fd0:	f06f 0015 	mvn.w	r0, #21
    2fd4:	4770      	bx	lr
    2fd6:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2fda:	d04e      	beq.n	307a <baudrate_set+0x10a>
    2fdc:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2fe0:	d101      	bne.n	2fe6 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2fe2:	4b30      	ldr	r3, [pc, #192]	; (30a4 <baudrate_set+0x134>)
    2fe4:	e7ed      	b.n	2fc2 <baudrate_set+0x52>
	switch (baudrate) {
    2fe6:	f06f 0015 	mvn.w	r0, #21
    2fea:	4770      	bx	lr
    2fec:	f06f 0015 	mvn.w	r0, #21
    2ff0:	4770      	bx	lr
    2ff2:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2ff6:	d042      	beq.n	307e <baudrate_set+0x10e>
    2ff8:	d909      	bls.n	300e <baudrate_set+0x9e>
    2ffa:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    2ffe:	d046      	beq.n	308e <baudrate_set+0x11e>
    3000:	d91f      	bls.n	3042 <baudrate_set+0xd2>
    3002:	4b29      	ldr	r3, [pc, #164]	; (30a8 <baudrate_set+0x138>)
    3004:	4299      	cmp	r1, r3
    3006:	d148      	bne.n	309a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3008:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    300c:	e7d9      	b.n	2fc2 <baudrate_set+0x52>
	switch (baudrate) {
    300e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    3012:	d037      	beq.n	3084 <baudrate_set+0x114>
    3014:	d905      	bls.n	3022 <baudrate_set+0xb2>
    3016:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    301a:	d10f      	bne.n	303c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    301c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3020:	e7cf      	b.n	2fc2 <baudrate_set+0x52>
	switch (baudrate) {
    3022:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    3026:	4299      	cmp	r1, r3
    3028:	d02e      	beq.n	3088 <baudrate_set+0x118>
    302a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    302e:	d102      	bne.n	3036 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3030:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3034:	e7c5      	b.n	2fc2 <baudrate_set+0x52>
	switch (baudrate) {
    3036:	f06f 0015 	mvn.w	r0, #21
    303a:	4770      	bx	lr
    303c:	f06f 0015 	mvn.w	r0, #21
    3040:	4770      	bx	lr
    3042:	4b1a      	ldr	r3, [pc, #104]	; (30ac <baudrate_set+0x13c>)
    3044:	4299      	cmp	r1, r3
    3046:	d025      	beq.n	3094 <baudrate_set+0x124>
    3048:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    304c:	d102      	bne.n	3054 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    304e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3052:	e7b6      	b.n	2fc2 <baudrate_set+0x52>
	switch (baudrate) {
    3054:	f06f 0015 	mvn.w	r0, #21
    3058:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    305a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    305e:	e7b0      	b.n	2fc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3060:	4b13      	ldr	r3, [pc, #76]	; (30b0 <baudrate_set+0x140>)
    3062:	e7ae      	b.n	2fc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3064:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3068:	e7ab      	b.n	2fc2 <baudrate_set+0x52>
	switch (baudrate) {
    306a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    306e:	e7a8      	b.n	2fc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3070:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3074:	e7a5      	b.n	2fc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3076:	4b0f      	ldr	r3, [pc, #60]	; (30b4 <baudrate_set+0x144>)
    3078:	e7a3      	b.n	2fc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    307a:	4b0f      	ldr	r3, [pc, #60]	; (30b8 <baudrate_set+0x148>)
    307c:	e7a1      	b.n	2fc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    307e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3082:	e79e      	b.n	2fc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3084:	4b0d      	ldr	r3, [pc, #52]	; (30bc <baudrate_set+0x14c>)
    3086:	e79c      	b.n	2fc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3088:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    308c:	e799      	b.n	2fc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    308e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3092:	e796      	b.n	2fc2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3094:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3098:	e793      	b.n	2fc2 <baudrate_set+0x52>
	switch (baudrate) {
    309a:	f06f 0015 	mvn.w	r0, #21
}
    309e:	4770      	bx	lr
    30a0:	0013b000 	.word	0x0013b000
    30a4:	004ea000 	.word	0x004ea000
    30a8:	000f4240 	.word	0x000f4240
    30ac:	0003d090 	.word	0x0003d090
    30b0:	00275000 	.word	0x00275000
    30b4:	0075c000 	.word	0x0075c000
    30b8:	003af000 	.word	0x003af000
    30bc:	013a9000 	.word	0x013a9000

000030c0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    30c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30c2:	4605      	mov	r5, r0
    30c4:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    30c6:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    30c8:	f005 f97a 	bl	83c0 <k_is_in_isr>
    30cc:	b910      	cbnz	r0, 30d4 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    30ce:	4b12      	ldr	r3, [pc, #72]	; (3118 <uarte_nrfx_poll_out+0x58>)
    30d0:	781b      	ldrb	r3, [r3, #0]
    30d2:	b983      	cbnz	r3, 30f6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    30d4:	f04f 0320 	mov.w	r3, #32
    30d8:	f3ef 8411 	mrs	r4, BASEPRI
    30dc:	f383 8812 	msr	BASEPRI_MAX, r3
    30e0:	f3bf 8f6f 	isb	sy
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    30e4:	4628      	mov	r0, r5
    30e6:	f004 fba7 	bl	7838 <is_tx_ready>
    30ea:	b940      	cbnz	r0, 30fe <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    30ec:	f384 8811 	msr	BASEPRI, r4
    30f0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    30f4:	e7ee      	b.n	30d4 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    30f6:	4628      	mov	r0, r5
    30f8:	f004 fccf 	bl	7a9a <wait_tx_ready>
    30fc:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    30fe:	697b      	ldr	r3, [r7, #20]
    3100:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    3102:	2201      	movs	r2, #1
    3104:	6979      	ldr	r1, [r7, #20]
    3106:	4628      	mov	r0, r5
    3108:	f004 fbb0 	bl	786c <tx_start>
	__asm__ volatile(
    310c:	f384 8811 	msr	BASEPRI, r4
    3110:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    3114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3116:	bf00      	nop
    3118:	20001802 	.word	0x20001802

0000311c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    311c:	b538      	push	{r3, r4, r5, lr}
    311e:	4604      	mov	r4, r0
    3120:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3122:	f101 001c 	add.w	r0, r1, #28
    3126:	f001 f845 	bl	41b4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    312a:	4b0c      	ldr	r3, [pc, #48]	; (315c <endtx_stoptx_ppi_init+0x40>)
    312c:	4298      	cmp	r0, r3
    312e:	d111      	bne.n	3154 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3130:	7f2b      	ldrb	r3, [r5, #28]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3132:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    3136:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3138:	4a09      	ldr	r2, [pc, #36]	; (3160 <endtx_stoptx_ppi_init+0x44>)
    313a:	33a2      	adds	r3, #162	; 0xa2
    313c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3140:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3144:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3146:	7f29      	ldrb	r1, [r5, #28]
    3148:	2301      	movs	r3, #1
    314a:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    314c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    3150:	2000      	movs	r0, #0
}
    3152:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    3154:	f06f 0004 	mvn.w	r0, #4
    3158:	e7fb      	b.n	3152 <endtx_stoptx_ppi_init+0x36>
    315a:	bf00      	nop
    315c:	0bad0000 	.word	0x0bad0000
    3160:	4001f000 	.word	0x4001f000

00003164 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3164:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    3168:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    316c:	4b01      	ldr	r3, [pc, #4]	; (3174 <set_comparator+0x10>)
    316e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    3172:	4770      	bx	lr
    3174:	40011000 	.word	0x40011000

00003178 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    317c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    317e:	4a02      	ldr	r2, [pc, #8]	; (3188 <event_enable+0x10>)
    3180:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    3184:	4770      	bx	lr
    3186:	bf00      	nop
    3188:	40011000 	.word	0x40011000

0000318c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    318c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3190:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3192:	4a02      	ldr	r2, [pc, #8]	; (319c <event_disable+0x10>)
    3194:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    3198:	4770      	bx	lr
    319a:	bf00      	nop
    319c:	40011000 	.word	0x40011000

000031a0 <counter>:
     return p_reg->COUNTER;
    31a0:	4b01      	ldr	r3, [pc, #4]	; (31a8 <counter+0x8>)
    31a2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    31a6:	4770      	bx	lr
    31a8:	40011000 	.word	0x40011000

000031ac <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
    31ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31b0:	4606      	mov	r6, r0
    31b2:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
    31b4:	f7ff ffea 	bl	318c <event_disable>
	event_clear(chan);
    31b8:	4630      	mov	r0, r6
    31ba:	f004 fd17 	bl	7bec <event_clear>
	uint32_t cc_val = req_cc;
    31be:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    31c0:	2703      	movs	r7, #3
    31c2:	e001      	b.n	31c8 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
    31c4:	193d      	adds	r5, r7, r4
			cc_inc++;
    31c6:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
    31c8:	4629      	mov	r1, r5
    31ca:	4630      	mov	r0, r6
    31cc:	f7ff ffca 	bl	3164 <set_comparator>
		event_enable(chan);
    31d0:	4630      	mov	r0, r6
    31d2:	f7ff ffd1 	bl	3178 <event_enable>
		now = counter();
    31d6:	f7ff ffe3 	bl	31a0 <counter>
    31da:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    31dc:	1cc1      	adds	r1, r0, #3
    31de:	4628      	mov	r0, r5
    31e0:	f004 fcf3 	bl	7bca <counter_sub>
    31e4:	4b0b      	ldr	r3, [pc, #44]	; (3214 <set_alarm+0x68>)
    31e6:	4298      	cmp	r0, r3
    31e8:	d911      	bls.n	320e <set_alarm+0x62>
			if (event_check(chan)) {
    31ea:	4630      	mov	r0, r6
    31ec:	f004 fcf1 	bl	7bd2 <event_check>
    31f0:	2800      	cmp	r0, #0
    31f2:	d0e7      	beq.n	31c4 <set_alarm+0x18>
				now = counter();
    31f4:	f7ff ffd4 	bl	31a0 <counter>
    31f8:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    31fa:	4641      	mov	r1, r8
    31fc:	f004 fce5 	bl	7bca <counter_sub>
    3200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3204:	d903      	bls.n	320e <set_alarm+0x62>
					event_clear(chan);
    3206:	4630      	mov	r0, r6
    3208:	f004 fcf0 	bl	7bec <event_clear>
    320c:	e7da      	b.n	31c4 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
    320e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3212:	bf00      	nop
    3214:	007ffffd 	.word	0x007ffffd

00003218 <int_event_disable_rtc>:
    p_reg->INTENCLR = mask;
    3218:	4b03      	ldr	r3, [pc, #12]	; (3228 <int_event_disable_rtc+0x10>)
    321a:	4a04      	ldr	r2, [pc, #16]	; (322c <int_event_disable_rtc+0x14>)
    321c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    3220:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	/* Reset interrupt enabling to expected reset values */
	nrf_rtc_int_disable(RTC, mask);

	/* Reset event routing enabling to expected reset values */
	nrf_rtc_event_disable(RTC, mask);
}
    3224:	4770      	bx	lr
    3226:	bf00      	nop
    3228:	40011000 	.word	0x40011000
    322c:	000f0003 	.word	0x000f0003

00003230 <compare_int_lock>:
{
    3230:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3232:	2301      	movs	r3, #1
    3234:	4083      	lsls	r3, r0
    3236:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    323a:	4a0e      	ldr	r2, [pc, #56]	; (3274 <compare_int_lock+0x44>)
    323c:	f3bf 8f5b 	dmb	ish
    3240:	e852 1f00 	ldrex	r1, [r2]
    3244:	ea01 0e0c 	and.w	lr, r1, ip
    3248:	e842 e400 	strex	r4, lr, [r2]
    324c:	2c00      	cmp	r4, #0
    324e:	d1f7      	bne.n	3240 <compare_int_lock+0x10>
    3250:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3254:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3258:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    325a:	4807      	ldr	r0, [pc, #28]	; (3278 <compare_int_lock+0x48>)
    325c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3260:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3264:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    3268:	420b      	tst	r3, r1
}
    326a:	bf14      	ite	ne
    326c:	2001      	movne	r0, #1
    326e:	2000      	moveq	r0, #0
    3270:	bd10      	pop	{r4, pc}
    3272:	bf00      	nop
    3274:	200012dc 	.word	0x200012dc
    3278:	40011000 	.word	0x40011000

0000327c <channel_processing_check_and_clear>:
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    327c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3280:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
    3282:	4a14      	ldr	r2, [pc, #80]	; (32d4 <channel_processing_check_and_clear+0x58>)
    3284:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3288:	4213      	tst	r3, r2
    328a:	d101      	bne.n	3290 <channel_processing_check_and_clear+0x14>
	return false;
    328c:	2000      	movs	r0, #0
}
    328e:	4770      	bx	lr
{
    3290:	b510      	push	{r4, lr}
    3292:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    3294:	2301      	movs	r3, #1
    3296:	4083      	lsls	r3, r0
    3298:	43db      	mvns	r3, r3
    329a:	490f      	ldr	r1, [pc, #60]	; (32d8 <channel_processing_check_and_clear+0x5c>)
    329c:	f3bf 8f5b 	dmb	ish
    32a0:	e851 2f00 	ldrex	r2, [r1]
    32a4:	ea02 0003 	and.w	r0, r2, r3
    32a8:	e841 0c00 	strex	ip, r0, [r1]
    32ac:	f1bc 0f00 	cmp.w	ip, #0
    32b0:	d1f6      	bne.n	32a0 <channel_processing_check_and_clear+0x24>
    32b2:	f3bf 8f5b 	dmb	ish
    32b6:	fa22 f304 	lsr.w	r3, r2, r4
    32ba:	f013 0f01 	tst.w	r3, #1
    32be:	d103      	bne.n	32c8 <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
    32c0:	4620      	mov	r0, r4
    32c2:	f004 fc86 	bl	7bd2 <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    32c6:	b118      	cbz	r0, 32d0 <channel_processing_check_and_clear+0x54>
			event_clear(chan);
    32c8:	4620      	mov	r0, r4
    32ca:	f004 fc8f 	bl	7bec <event_clear>
			return true;
    32ce:	2001      	movs	r0, #1
}
    32d0:	bd10      	pop	{r4, pc}
    32d2:	bf00      	nop
    32d4:	40011000 	.word	0x40011000
    32d8:	200012d8 	.word	0x200012d8

000032dc <compare_int_unlock>:
	if (key) {
    32dc:	b901      	cbnz	r1, 32e0 <compare_int_unlock+0x4>
}
    32de:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    32e0:	2301      	movs	r3, #1
    32e2:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    32e4:	4a11      	ldr	r2, [pc, #68]	; (332c <compare_int_unlock+0x50>)
    32e6:	f3bf 8f5b 	dmb	ish
    32ea:	e852 cf00 	ldrex	ip, [r2]
    32ee:	ea4c 0c03 	orr.w	ip, ip, r3
    32f2:	e842 c100 	strex	r1, ip, [r2]
    32f6:	2900      	cmp	r1, #0
    32f8:	d1f7      	bne.n	32ea <compare_int_unlock+0xe>
    32fa:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    32fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3302:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    3304:	4a0a      	ldr	r2, [pc, #40]	; (3330 <compare_int_unlock+0x54>)
    3306:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    330a:	f3bf 8f5b 	dmb	ish
    330e:	4b09      	ldr	r3, [pc, #36]	; (3334 <compare_int_unlock+0x58>)
    3310:	681b      	ldr	r3, [r3, #0]
    3312:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3316:	40c3      	lsrs	r3, r0
    3318:	f013 0f01 	tst.w	r3, #1
    331c:	d0df      	beq.n	32de <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    331e:	4b06      	ldr	r3, [pc, #24]	; (3338 <compare_int_unlock+0x5c>)
    3320:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3324:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    3328:	e7d9      	b.n	32de <compare_int_unlock+0x2>
    332a:	bf00      	nop
    332c:	200012dc 	.word	0x200012dc
    3330:	40011000 	.word	0x40011000
    3334:	200012d8 	.word	0x200012d8
    3338:	e000e100 	.word	0xe000e100

0000333c <sys_clock_timeout_handler>:
{
    333c:	b538      	push	{r3, r4, r5, lr}
    333e:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    3340:	4610      	mov	r0, r2
    3342:	4619      	mov	r1, r3
    3344:	f004 fc5e 	bl	7c04 <absolute_time_to_cc>
    3348:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    334a:	490d      	ldr	r1, [pc, #52]	; (3380 <sys_clock_timeout_handler+0x44>)
    334c:	680b      	ldr	r3, [r1, #0]
    334e:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
    3350:	181b      	adds	r3, r3, r0
    3352:	684c      	ldr	r4, [r1, #4]
    3354:	f144 0400 	adc.w	r4, r4, #0
    3358:	600b      	str	r3, [r1, #0]
    335a:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    335c:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    3360:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3364:	d209      	bcs.n	337a <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3366:	4b07      	ldr	r3, [pc, #28]	; (3384 <sys_clock_timeout_handler+0x48>)
    3368:	681b      	ldr	r3, [r3, #0]
    336a:	0a19      	lsrs	r1, r3, #8
    336c:	061b      	lsls	r3, r3, #24
    336e:	18d4      	adds	r4, r2, r3
    3370:	f141 0500 	adc.w	r5, r1, #0
    3374:	4b04      	ldr	r3, [pc, #16]	; (3388 <sys_clock_timeout_handler+0x4c>)
    3376:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
    337a:	f002 f81f 	bl	53bc <sys_clock_announce>
}
    337e:	bd38      	pop	{r3, r4, r5, pc}
    3380:	20000b28 	.word	0x20000b28
    3384:	200012e0 	.word	0x200012e0
    3388:	20000b30 	.word	0x20000b30

0000338c <z_nrf_rtc_timer_read>:
{
    338c:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    338e:	4b0d      	ldr	r3, [pc, #52]	; (33c4 <z_nrf_rtc_timer_read+0x38>)
    3390:	681c      	ldr	r4, [r3, #0]
    3392:	0a25      	lsrs	r5, r4, #8
    3394:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3396:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    339a:	f7ff ff01 	bl	31a0 <counter>
    339e:	4603      	mov	r3, r0
	val += cntr;
    33a0:	1900      	adds	r0, r0, r4
    33a2:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    33a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    33aa:	d20a      	bcs.n	33c2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    33ac:	4b06      	ldr	r3, [pc, #24]	; (33c8 <z_nrf_rtc_timer_read+0x3c>)
    33ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    33b2:	4290      	cmp	r0, r2
    33b4:	eb71 0303 	sbcs.w	r3, r1, r3
    33b8:	d203      	bcs.n	33c2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    33ba:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    33be:	f141 0100 	adc.w	r1, r1, #0
}
    33c2:	bd38      	pop	{r3, r4, r5, pc}
    33c4:	200012e0 	.word	0x200012e0
    33c8:	20000b30 	.word	0x20000b30

000033cc <compare_set_nolocks>:
{
    33cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33ce:	4606      	mov	r6, r0
    33d0:	4614      	mov	r4, r2
    33d2:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    33d4:	4610      	mov	r0, r2
    33d6:	4619      	mov	r1, r3
    33d8:	f004 fc14 	bl	7c04 <absolute_time_to_cc>
    33dc:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    33de:	f7ff ffd5 	bl	338c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    33e2:	42a0      	cmp	r0, r4
    33e4:	eb71 0305 	sbcs.w	r3, r1, r5
    33e8:	d215      	bcs.n	3416 <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    33ea:	1a20      	subs	r0, r4, r0
    33ec:	eb65 0101 	sbc.w	r1, r5, r1
    33f0:	4b17      	ldr	r3, [pc, #92]	; (3450 <compare_set_nolocks+0x84>)
    33f2:	4298      	cmp	r0, r3
    33f4:	f171 0100 	sbcs.w	r1, r1, #0
    33f8:	d227      	bcs.n	344a <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
    33fa:	4b16      	ldr	r3, [pc, #88]	; (3454 <compare_set_nolocks+0x88>)
    33fc:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    3400:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3404:	42ab      	cmp	r3, r5
    3406:	bf08      	it	eq
    3408:	42a2      	cmpeq	r2, r4
    340a:	d012      	beq.n	3432 <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
    340c:	4639      	mov	r1, r7
    340e:	4630      	mov	r0, r6
    3410:	f7ff fecc 	bl	31ac <set_alarm>
    3414:	e00d      	b.n	3432 <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
    3416:	2301      	movs	r3, #1
    3418:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    341a:	4a0f      	ldr	r2, [pc, #60]	; (3458 <compare_set_nolocks+0x8c>)
    341c:	f3bf 8f5b 	dmb	ish
    3420:	e852 0f00 	ldrex	r0, [r2]
    3424:	4318      	orrs	r0, r3
    3426:	e842 0100 	strex	r1, r0, [r2]
    342a:	2900      	cmp	r1, #0
    342c:	d1f8      	bne.n	3420 <compare_set_nolocks+0x54>
    342e:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    3432:	4b08      	ldr	r3, [pc, #32]	; (3454 <compare_set_nolocks+0x88>)
    3434:	0132      	lsls	r2, r6, #4
    3436:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    343a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    343e:	9906      	ldr	r1, [sp, #24]
    3440:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    3442:	9b07      	ldr	r3, [sp, #28]
    3444:	6073      	str	r3, [r6, #4]
	return ret;
    3446:	2000      	movs	r0, #0
}
    3448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    344a:	f06f 0015 	mvn.w	r0, #21
    344e:	e7fb      	b.n	3448 <compare_set_nolocks+0x7c>
    3450:	00800001 	.word	0x00800001
    3454:	20000b18 	.word	0x20000b18
    3458:	200012d8 	.word	0x200012d8

0000345c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    345c:	b530      	push	{r4, r5, lr}
    345e:	b083      	sub	sp, #12
			CLOCK_CONTROL_NRF_LF_START_NOWAIT :
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	int_event_disable_rtc();
    3460:	f7ff feda 	bl	3218 <int_event_disable_rtc>
    p_reg->PRESCALER = val;
    3464:	2300      	movs	r3, #0
    3466:	4a1d      	ldr	r2, [pc, #116]	; (34dc <sys_clock_driver_init+0x80>)
    3468:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    346c:	2b00      	cmp	r3, #0
    346e:	dd24      	ble.n	34ba <sys_clock_driver_init+0x5e>
    p_reg->INTENSET = mask;
    3470:	4c1a      	ldr	r4, [pc, #104]	; (34dc <sys_clock_driver_init+0x80>)
    3472:	2502      	movs	r5, #2
    3474:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3478:	4b19      	ldr	r3, [pc, #100]	; (34e0 <sys_clock_driver_init+0x84>)
    347a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    347e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3482:	2200      	movs	r2, #0
    3484:	2101      	movs	r1, #1
    3486:	2011      	movs	r0, #17
    3488:	f003 fc06 	bl	6c98 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    348c:	2011      	movs	r0, #17
    348e:	f003 fbfe 	bl	6c8e <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3492:	2301      	movs	r3, #1
    3494:	60a3      	str	r3, [r4, #8]
    3496:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3498:	4a12      	ldr	r2, [pc, #72]	; (34e4 <sys_clock_driver_init+0x88>)
    349a:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    349c:	2400      	movs	r4, #0
    349e:	9401      	str	r4, [sp, #4]
    34a0:	4b11      	ldr	r3, [pc, #68]	; (34e8 <sys_clock_driver_init+0x8c>)
    34a2:	9300      	str	r3, [sp, #0]
    34a4:	4a11      	ldr	r2, [pc, #68]	; (34ec <sys_clock_driver_init+0x90>)
    34a6:	2300      	movs	r3, #0
    34a8:	4620      	mov	r0, r4
    34aa:	f004 fbbc 	bl	7c26 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    34ae:	4628      	mov	r0, r5
    34b0:	f7ff f83c 	bl	252c <z_nrf_clock_control_lf_on>

	return 0;
}
    34b4:	4620      	mov	r0, r4
    34b6:	b003      	add	sp, #12
    34b8:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    34ba:	4a0d      	ldr	r2, [pc, #52]	; (34f0 <sys_clock_driver_init+0x94>)
    34bc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    34c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    34c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    34c8:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    34cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    34d0:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    34d2:	4902      	ldr	r1, [pc, #8]	; (34dc <sys_clock_driver_init+0x80>)
    34d4:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    34d8:	3301      	adds	r3, #1
    34da:	e7c7      	b.n	346c <sys_clock_driver_init+0x10>
    34dc:	40011000 	.word	0x40011000
    34e0:	e000e100 	.word	0xe000e100
    34e4:	200012dc 	.word	0x200012dc
    34e8:	0000333d 	.word	0x0000333d
    34ec:	007fffff 	.word	0x007fffff
    34f0:	20000b18 	.word	0x20000b18

000034f4 <process_channel>:
{
    34f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    34f8:	b082      	sub	sp, #8
    34fa:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    34fc:	f7ff febe 	bl	327c <channel_processing_check_and_clear>
    3500:	b910      	cbnz	r0, 3508 <process_channel+0x14>
}
    3502:	b002      	add	sp, #8
    3504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    3508:	f7ff ff40 	bl	338c <z_nrf_rtc_timer_read>
    350c:	4682      	mov	sl, r0
    350e:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    3510:	f004 fb7b 	bl	7c0a <full_int_lock>
    3514:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    3516:	4b15      	ldr	r3, [pc, #84]	; (356c <process_channel+0x78>)
    3518:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    351c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    3520:	45c2      	cmp	sl, r8
    3522:	eb75 0509 	sbcs.w	r5, r5, r9
    3526:	d20b      	bcs.n	3540 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3528:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    352a:	4630      	mov	r0, r6
    352c:	f004 fb76 	bl	7c1c <full_int_unlock>
		if (handler) {
    3530:	2d00      	cmp	r5, #0
    3532:	d0e6      	beq.n	3502 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    3534:	9700      	str	r7, [sp, #0]
    3536:	4642      	mov	r2, r8
    3538:	464b      	mov	r3, r9
    353a:	4620      	mov	r0, r4
    353c:	47a8      	blx	r5
}
    353e:	e7e0      	b.n	3502 <process_channel+0xe>
			handler = cc_data[chan].callback;
    3540:	4a0a      	ldr	r2, [pc, #40]	; (356c <process_channel+0x78>)
    3542:	0123      	lsls	r3, r4, #4
    3544:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    3548:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    354a:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    354c:	2000      	movs	r0, #0
    354e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3558:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    355c:	4620      	mov	r0, r4
    355e:	f7ff fe15 	bl	318c <event_disable>
			event_clear(chan);
    3562:	4620      	mov	r0, r4
    3564:	f004 fb42 	bl	7bec <event_clear>
    3568:	e7df      	b.n	352a <process_channel+0x36>
    356a:	bf00      	nop
    356c:	20000b18 	.word	0x20000b18

00003570 <rtc_nrf_isr>:
{
    3570:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    3572:	4b0e      	ldr	r3, [pc, #56]	; (35ac <rtc_nrf_isr+0x3c>)
    3574:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3578:	f013 0f02 	tst.w	r3, #2
    357c:	d00d      	beq.n	359a <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    357e:	4b0b      	ldr	r3, [pc, #44]	; (35ac <rtc_nrf_isr+0x3c>)
    3580:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3584:	b14b      	cbz	r3, 359a <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3586:	4b09      	ldr	r3, [pc, #36]	; (35ac <rtc_nrf_isr+0x3c>)
    3588:	2200      	movs	r2, #0
    358a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    358e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    3592:	4a07      	ldr	r2, [pc, #28]	; (35b0 <rtc_nrf_isr+0x40>)
    3594:	6813      	ldr	r3, [r2, #0]
    3596:	3301      	adds	r3, #1
    3598:	6013      	str	r3, [r2, #0]
{
    359a:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    359c:	2c00      	cmp	r4, #0
    359e:	dd00      	ble.n	35a2 <rtc_nrf_isr+0x32>
}
    35a0:	bd10      	pop	{r4, pc}
		process_channel(chan);
    35a2:	4620      	mov	r0, r4
    35a4:	f7ff ffa6 	bl	34f4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    35a8:	3401      	adds	r4, #1
    35aa:	e7f7      	b.n	359c <rtc_nrf_isr+0x2c>
    35ac:	40011000 	.word	0x40011000
    35b0:	200012e0 	.word	0x200012e0

000035b4 <sys_clock_set_timeout>:
{
    35b4:	b510      	push	{r4, lr}
    35b6:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
    35b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    35bc:	d006      	beq.n	35cc <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    35be:	2801      	cmp	r0, #1
    35c0:	dd09      	ble.n	35d6 <sys_clock_set_timeout+0x22>
    35c2:	4b15      	ldr	r3, [pc, #84]	; (3618 <sys_clock_set_timeout+0x64>)
    35c4:	4298      	cmp	r0, r3
    35c6:	dc24      	bgt.n	3612 <sys_clock_set_timeout+0x5e>
    35c8:	4604      	mov	r4, r0
    35ca:	e005      	b.n	35d8 <sys_clock_set_timeout+0x24>
		sys_busy = false;
    35cc:	4b13      	ldr	r3, [pc, #76]	; (361c <sys_clock_set_timeout+0x68>)
    35ce:	2200      	movs	r2, #0
    35d0:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
    35d2:	4c13      	ldr	r4, [pc, #76]	; (3620 <sys_clock_set_timeout+0x6c>)
    35d4:	e003      	b.n	35de <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    35d6:	2401      	movs	r4, #1
		sys_busy = true;
    35d8:	4b10      	ldr	r3, [pc, #64]	; (361c <sys_clock_set_timeout+0x68>)
    35da:	2201      	movs	r2, #1
    35dc:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    35de:	f7ff fed5 	bl	338c <z_nrf_rtc_timer_read>
    35e2:	4b10      	ldr	r3, [pc, #64]	; (3624 <sys_clock_set_timeout+0x70>)
    35e4:	681a      	ldr	r2, [r3, #0]
    35e6:	685b      	ldr	r3, [r3, #4]
    35e8:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    35ea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    35ee:	d300      	bcc.n	35f2 <sys_clock_set_timeout+0x3e>
		cyc = 0;
    35f0:	2400      	movs	r4, #0
	cyc += unannounced;
    35f2:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    35f4:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    35f8:	d300      	bcc.n	35fc <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
    35fa:	4c09      	ldr	r4, [pc, #36]	; (3620 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
    35fc:	2000      	movs	r0, #0
    35fe:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3600:	9001      	str	r0, [sp, #4]
    3602:	4909      	ldr	r1, [pc, #36]	; (3628 <sys_clock_set_timeout+0x74>)
    3604:	9100      	str	r1, [sp, #0]
    3606:	f143 0300 	adc.w	r3, r3, #0
    360a:	f004 fb0c 	bl	7c26 <compare_set>
}
    360e:	b002      	add	sp, #8
    3610:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    3612:	4c03      	ldr	r4, [pc, #12]	; (3620 <sys_clock_set_timeout+0x6c>)
    3614:	e7e0      	b.n	35d8 <sys_clock_set_timeout+0x24>
    3616:	bf00      	nop
    3618:	007ffffe 	.word	0x007ffffe
    361c:	20001801 	.word	0x20001801
    3620:	007fffff 	.word	0x007fffff
    3624:	20000b28 	.word	0x20000b28
    3628:	0000333d 	.word	0x0000333d

0000362c <sys_clock_elapsed>:
{
    362c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    362e:	f7ff fead 	bl	338c <z_nrf_rtc_timer_read>
    3632:	4b02      	ldr	r3, [pc, #8]	; (363c <sys_clock_elapsed+0x10>)
    3634:	681b      	ldr	r3, [r3, #0]
}
    3636:	1ac0      	subs	r0, r0, r3
    3638:	bd08      	pop	{r3, pc}
    363a:	bf00      	nop
    363c:	20000b28 	.word	0x20000b28

00003640 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    3640:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3644:	4905      	ldr	r1, [pc, #20]	; (365c <__NVIC_SystemReset+0x1c>)
    3646:	68ca      	ldr	r2, [r1, #12]
    3648:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    364c:	4b04      	ldr	r3, [pc, #16]	; (3660 <__NVIC_SystemReset+0x20>)
    364e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3650:	60cb      	str	r3, [r1, #12]
    3652:	f3bf 8f4f 	dsb	sy
    __NOP();
    3656:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3658:	e7fd      	b.n	3656 <__NVIC_SystemReset+0x16>
    365a:	bf00      	nop
    365c:	e000ed00 	.word	0xe000ed00
    3660:	05fa0004 	.word	0x05fa0004

00003664 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3664:	4b02      	ldr	r3, [pc, #8]	; (3670 <nvmc_wait+0xc>)
    3666:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    366a:	2b00      	cmp	r3, #0
    366c:	d0fa      	beq.n	3664 <nvmc_wait>
}
    366e:	4770      	bx	lr
    3670:	4001e000 	.word	0x4001e000

00003674 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    3674:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3676:	4b03      	ldr	r3, [pc, #12]	; (3684 <nvmc_config+0x10>)
    3678:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    367c:	f7ff fff2 	bl	3664 <nvmc_wait>
}
    3680:	bd08      	pop	{r3, pc}
    3682:	bf00      	nop
    3684:	4001e000 	.word	0x4001e000

00003688 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    3688:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    368a:	f004 fae9 	bl	7c60 <nrf52_errata_12>
    368e:	b140      	cbz	r0, 36a2 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    3690:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3694:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    3698:	f3c3 2304 	ubfx	r3, r3, #8, #5
    369c:	4a6b      	ldr	r2, [pc, #428]	; (384c <SystemInit+0x1c4>)
    369e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    36a2:	f004 faef 	bl	7c84 <nrf52_errata_16>
    36a6:	b110      	cbz	r0, 36ae <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    36a8:	4b69      	ldr	r3, [pc, #420]	; (3850 <SystemInit+0x1c8>)
    36aa:	4a6a      	ldr	r2, [pc, #424]	; (3854 <SystemInit+0x1cc>)
    36ac:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    36ae:	f004 faff 	bl	7cb0 <nrf52_errata_31>
    36b2:	b148      	cbz	r0, 36c8 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    36b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    36b8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    36bc:	f3c3 3342 	ubfx	r3, r3, #13, #3
    36c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    36c4:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    36c8:	f004 fb04 	bl	7cd4 <nrf52_errata_32>
    36cc:	b130      	cbz	r0, 36dc <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    36ce:	4a62      	ldr	r2, [pc, #392]	; (3858 <SystemInit+0x1d0>)
    36d0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    36d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    36d8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    36dc:	f004 fb10 	bl	7d00 <nrf52_errata_36>
    36e0:	b140      	cbz	r0, 36f4 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    36e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36e6:	2200      	movs	r2, #0
    36e8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    36ec:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    36f0:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    36f4:	f004 fb16 	bl	7d24 <nrf52_errata_37>
    36f8:	b120      	cbz	r0, 3704 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    36fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36fe:	2203      	movs	r2, #3
    3700:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    3704:	f004 fb24 	bl	7d50 <nrf52_errata_57>
    3708:	b160      	cbz	r0, 3724 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    370a:	4b54      	ldr	r3, [pc, #336]	; (385c <SystemInit+0x1d4>)
    370c:	2205      	movs	r2, #5
    370e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    3712:	2201      	movs	r2, #1
    3714:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    3718:	2200      	movs	r2, #0
    371a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    371e:	223f      	movs	r2, #63	; 0x3f
    3720:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3724:	f004 fb2a 	bl	7d7c <nrf52_errata_66>
    3728:	2800      	cmp	r0, #0
    372a:	d046      	beq.n	37ba <SystemInit+0x132>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    372c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3730:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3734:	4b4a      	ldr	r3, [pc, #296]	; (3860 <SystemInit+0x1d8>)
    3736:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    373a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    373e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3742:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3746:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    374a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    374e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3752:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3756:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    375a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    375e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3762:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3766:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    376a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    376e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3772:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3776:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    377a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    377e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3782:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3786:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    378a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    378e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3792:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3796:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    379a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    379e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    37a2:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    37a6:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    37aa:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    37ae:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    37b2:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    37b6:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    37ba:	f004 fb01 	bl	7dc0 <nrf52_errata_108>
    37be:	b148      	cbz	r0, 37d4 <SystemInit+0x14c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    37c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    37c4:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    37c8:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    37cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    37d0:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    37d4:	f004 fb06 	bl	7de4 <nrf52_errata_136>
    37d8:	b160      	cbz	r0, 37f4 <SystemInit+0x16c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    37da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    37e2:	f013 0f01 	tst.w	r3, #1
    37e6:	d005      	beq.n	37f4 <SystemInit+0x16c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    37e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37ec:	f06f 0201 	mvn.w	r2, #1
    37f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    37f4:	f004 fb08 	bl	7e08 <nrf52_errata_182>
    37f8:	b130      	cbz	r0, 3808 <SystemInit+0x180>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    37fa:	4a1a      	ldr	r2, [pc, #104]	; (3864 <SystemInit+0x1dc>)
    37fc:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    3800:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3804:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
    3808:	f004 fb26 	bl	7e58 <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    380c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3810:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3814:	2b00      	cmp	r3, #0
    3816:	db06      	blt.n	3826 <SystemInit+0x19e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3818:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    381c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3820:	2b00      	cmp	r3, #0
    3822:	db00      	blt.n	3826 <SystemInit+0x19e>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    3824:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    3826:	2001      	movs	r0, #1
    3828:	f7ff ff24 	bl	3674 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    382c:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    3830:	2515      	movs	r5, #21
    3832:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    3836:	f7ff ff15 	bl	3664 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    383a:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    383e:	f7ff ff11 	bl	3664 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    3842:	2000      	movs	r0, #0
    3844:	f7ff ff16 	bl	3674 <nvmc_config>
            NVIC_SystemReset();
    3848:	f7ff fefa 	bl	3640 <__NVIC_SystemReset>
    384c:	40013000 	.word	0x40013000
    3850:	4007c000 	.word	0x4007c000
    3854:	baadf00d 	.word	0xbaadf00d
    3858:	e000ed00 	.word	0xe000ed00
    385c:	40005000 	.word	0x40005000
    3860:	4000c000 	.word	0x4000c000
    3864:	40001000 	.word	0x40001000

00003868 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3868:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    386a:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    386c:	fab4 f384 	clz	r3, r4
    3870:	f1c3 031f 	rsb	r3, r3, #31
    3874:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    3878:	2b00      	cmp	r3, #0
    387a:	db16      	blt.n	38aa <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    387c:	2201      	movs	r2, #1
    387e:	fa02 f303 	lsl.w	r3, r2, r3
    3882:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3886:	f3bf 8f5b 	dmb	ish
    388a:	e850 2f00 	ldrex	r2, [r0]
    388e:	42a2      	cmp	r2, r4
    3890:	d104      	bne.n	389c <nrfx_flag32_alloc+0x34>
    3892:	e840 3e00 	strex	lr, r3, [r0]
    3896:	f1be 0f00 	cmp.w	lr, #0
    389a:	d1f6      	bne.n	388a <nrfx_flag32_alloc+0x22>
    389c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    38a0:	d1e3      	bne.n	386a <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    38a2:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    38a6:	4802      	ldr	r0, [pc, #8]	; (38b0 <nrfx_flag32_alloc+0x48>)
}
    38a8:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    38aa:	4802      	ldr	r0, [pc, #8]	; (38b4 <nrfx_flag32_alloc+0x4c>)
    38ac:	e7fc      	b.n	38a8 <nrfx_flag32_alloc+0x40>
    38ae:	bf00      	nop
    38b0:	0bad0000 	.word	0x0bad0000
    38b4:	0bad0002 	.word	0x0bad0002

000038b8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    38b8:	6803      	ldr	r3, [r0, #0]
    38ba:	40cb      	lsrs	r3, r1
    38bc:	f013 0f01 	tst.w	r3, #1
    38c0:	d115      	bne.n	38ee <nrfx_flag32_free+0x36>
{
    38c2:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    38c4:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    38c6:	2301      	movs	r3, #1
    38c8:	408b      	lsls	r3, r1
    38ca:	4313      	orrs	r3, r2
    38cc:	f3bf 8f5b 	dmb	ish
    38d0:	e850 cf00 	ldrex	ip, [r0]
    38d4:	4594      	cmp	ip, r2
    38d6:	d104      	bne.n	38e2 <nrfx_flag32_free+0x2a>
    38d8:	e840 3e00 	strex	lr, r3, [r0]
    38dc:	f1be 0f00 	cmp.w	lr, #0
    38e0:	d1f6      	bne.n	38d0 <nrfx_flag32_free+0x18>
    38e2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    38e6:	d1ed      	bne.n	38c4 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    38e8:	4802      	ldr	r0, [pc, #8]	; (38f4 <nrfx_flag32_free+0x3c>)
}
    38ea:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    38ee:	4802      	ldr	r0, [pc, #8]	; (38f8 <nrfx_flag32_free+0x40>)
}
    38f0:	4770      	bx	lr
    38f2:	bf00      	nop
    38f4:	0bad0000 	.word	0x0bad0000
    38f8:	0bad0004 	.word	0x0bad0004

000038fc <nrfx_clock_anomaly_132>:
    uint32_t core_debug;
    uint32_t dwt_ctrl;

    // Preserve DEMCR register to do not influence into its configuration. Enable the trace and
    // debug blocks. It is required to read and write data to DWT block.
    core_debug = CoreDebug->DEMCR;
    38fc:	4b0d      	ldr	r3, [pc, #52]	; (3934 <nrfx_clock_anomaly_132+0x38>)
    38fe:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    3902:	f041 7280 	orr.w	r2, r1, #16777216	; 0x1000000
    3906:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

    // Preserve CTRL register in DWT block to do not influence into its configuration. Make sure
    // that cycle counter is enabled.
    dwt_ctrl = DWT->CTRL;
    390a:	f5a3 435d 	sub.w	r3, r3, #56576	; 0xdd00
    390e:	6818      	ldr	r0, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    3910:	f040 0201 	orr.w	r2, r0, #1
    3914:	601a      	str	r2, [r3, #0]

    // Store start value of cycle counter.
    cyccnt_inital = DWT->CYCCNT;
    3916:	685a      	ldr	r2, [r3, #4]

    // Delay required time.
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    3918:	4b07      	ldr	r3, [pc, #28]	; (3938 <nrfx_clock_anomaly_132+0x3c>)
    391a:	685b      	ldr	r3, [r3, #4]
    391c:	1a9b      	subs	r3, r3, r2
    391e:	f5b3 5f0a 	cmp.w	r3, #8832	; 0x2280
    3922:	d3f9      	bcc.n	3918 <nrfx_clock_anomaly_132+0x1c>
    {}

    // Restore preserved registers.
    DWT->CTRL = dwt_ctrl;
    3924:	4b04      	ldr	r3, [pc, #16]	; (3938 <nrfx_clock_anomaly_132+0x3c>)
    3926:	6018      	str	r0, [r3, #0]
    CoreDebug->DEMCR = core_debug;
    3928:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
    392c:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
}
    3930:	4770      	bx	lr
    3932:	bf00      	nop
    3934:	e000ed00 	.word	0xe000ed00
    3938:	e0001000 	.word	0xe0001000

0000393c <clock_stop>:
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    393c:	b570      	push	{r4, r5, r6, lr}
    393e:	b082      	sub	sp, #8
    switch (domain)
    3940:	4606      	mov	r6, r0
    3942:	b118      	cbz	r0, 394c <clock_stop+0x10>
    3944:	2801      	cmp	r0, #1
    3946:	d016      	beq.n	3976 <clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3948:	b002      	add	sp, #8
    394a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    394c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3950:	2202      	movs	r2, #2
    3952:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3956:	2200      	movs	r2, #0
    3958:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    395c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3960:	2201      	movs	r2, #1
    3962:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3964:	2301      	movs	r3, #1
    3966:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    396a:	429e      	cmp	r6, r3
    396c:	d00f      	beq.n	398e <clock_stop+0x52>
    396e:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3970:	f242 7410 	movw	r4, #10000	; 0x2710
    3974:	e013      	b.n	399e <clock_stop+0x62>
    p_reg->INTENCLR = mask;
    3976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    397a:	2201      	movs	r2, #1
    397c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3980:	2100      	movs	r1, #0
    3982:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    3986:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    398a:	605a      	str	r2, [r3, #4]
}
    398c:	e7ea      	b.n	3964 <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    398e:	f10d 0507 	add.w	r5, sp, #7
    3992:	e7ed      	b.n	3970 <clock_stop+0x34>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3994:	2001      	movs	r0, #1
    3996:	f004 fa6f 	bl	7e78 <nrfx_busy_wait>
    399a:	3c01      	subs	r4, #1
    399c:	d00c      	beq.n	39b8 <clock_stop+0x7c>
    399e:	462a      	mov	r2, r5
    39a0:	4631      	mov	r1, r6
    39a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    39a6:	f004 fa6b 	bl	7e80 <nrf_clock_is_running>
    39aa:	b128      	cbz	r0, 39b8 <clock_stop+0x7c>
    39ac:	2d00      	cmp	r5, #0
    39ae:	d0f1      	beq.n	3994 <clock_stop+0x58>
    39b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    39b4:	2b01      	cmp	r3, #1
    39b6:	d0ed      	beq.n	3994 <clock_stop+0x58>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    39b8:	2e01      	cmp	r6, #1
    39ba:	d1c5      	bne.n	3948 <clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    39bc:	4b01      	ldr	r3, [pc, #4]	; (39c4 <clock_stop+0x88>)
    39be:	2200      	movs	r2, #0
    39c0:	715a      	strb	r2, [r3, #5]
    39c2:	e7c1      	b.n	3948 <clock_stop+0xc>
    39c4:	200012e4 	.word	0x200012e4

000039c8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    39c8:	4b06      	ldr	r3, [pc, #24]	; (39e4 <nrfx_clock_init+0x1c>)
    39ca:	791b      	ldrb	r3, [r3, #4]
    39cc:	b93b      	cbnz	r3, 39de <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    39ce:	4b05      	ldr	r3, [pc, #20]	; (39e4 <nrfx_clock_init+0x1c>)
    39d0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    39d2:	2201      	movs	r2, #1
    39d4:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    39d6:	2200      	movs	r2, #0
    39d8:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    39da:	4803      	ldr	r0, [pc, #12]	; (39e8 <nrfx_clock_init+0x20>)
    39dc:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    39de:	4803      	ldr	r0, [pc, #12]	; (39ec <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    39e0:	4770      	bx	lr
    39e2:	bf00      	nop
    39e4:	200012e4 	.word	0x200012e4
    39e8:	0bad0000 	.word	0x0bad0000
    39ec:	0bad000c 	.word	0x0bad000c

000039f0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    39f0:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    39f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    39f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    39fa:	b18b      	cbz	r3, 3a20 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a00:	2200      	movs	r2, #0
    3a02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3a06:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    3a0a:	2201      	movs	r2, #1
    3a0c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3a10:	4b15      	ldr	r3, [pc, #84]	; (3a68 <nrfx_power_clock_irq_handler+0x78>)
    3a12:	795b      	ldrb	r3, [r3, #5]
    3a14:	b923      	cbnz	r3, 3a20 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    3a16:	4b14      	ldr	r3, [pc, #80]	; (3a68 <nrfx_power_clock_irq_handler+0x78>)
    3a18:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3a1a:	681b      	ldr	r3, [r3, #0]
    3a1c:	2000      	movs	r0, #0
    3a1e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3a20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a24:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3a28:	b19b      	cbz	r3, 3a52 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a2e:	2200      	movs	r2, #0
    3a30:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3a34:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3a38:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3a3c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3a40:	f012 0f03 	tst.w	r2, #3
    3a44:	d106      	bne.n	3a54 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a4a:	2201      	movs	r2, #1
    3a4c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a50:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3a52:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    3a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a58:	2202      	movs	r2, #2
    3a5a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3a5e:	4b02      	ldr	r3, [pc, #8]	; (3a68 <nrfx_power_clock_irq_handler+0x78>)
    3a60:	681b      	ldr	r3, [r3, #0]
    3a62:	2001      	movs	r0, #1
    3a64:	4798      	blx	r3
}
    3a66:	e7f4      	b.n	3a52 <nrfx_power_clock_irq_handler+0x62>
    3a68:	200012e4 	.word	0x200012e4

00003a6c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3a6c:	3008      	adds	r0, #8
    3a6e:	4b03      	ldr	r3, [pc, #12]	; (3a7c <pin_in_use+0x10>)
    3a70:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3a74:	f000 0001 	and.w	r0, r0, #1
    3a78:	4770      	bx	lr
    3a7a:	bf00      	nop
    3a7c:	20000a08 	.word	0x20000a08

00003a80 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3a80:	3008      	adds	r0, #8
    3a82:	4b03      	ldr	r3, [pc, #12]	; (3a90 <pin_in_use_by_te+0x10>)
    3a84:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3a88:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3a8c:	4770      	bx	lr
    3a8e:	bf00      	nop
    3a90:	20000a08 	.word	0x20000a08

00003a94 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3a94:	3008      	adds	r0, #8
    3a96:	4b04      	ldr	r3, [pc, #16]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a98:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3a9c:	f010 001c 	ands.w	r0, r0, #28
    3aa0:	bf18      	it	ne
    3aa2:	2001      	movne	r0, #1
    3aa4:	4770      	bx	lr
    3aa6:	bf00      	nop
    3aa8:	20000a08 	.word	0x20000a08

00003aac <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3aac:	3008      	adds	r0, #8
    3aae:	4b03      	ldr	r3, [pc, #12]	; (3abc <pin_is_output+0x10>)
    3ab0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3ab4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3ab8:	4770      	bx	lr
    3aba:	bf00      	nop
    3abc:	20000a08 	.word	0x20000a08

00003ac0 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3ac0:	3008      	adds	r0, #8
    3ac2:	4b02      	ldr	r3, [pc, #8]	; (3acc <pin_te_get+0xc>)
    3ac4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3ac8:	0b40      	lsrs	r0, r0, #13
    3aca:	4770      	bx	lr
    3acc:	20000a08 	.word	0x20000a08

00003ad0 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3ad0:	2200      	movs	r2, #0
    3ad2:	e004      	b.n	3ade <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3ad8:	4283      	cmp	r3, r0
    3ada:	d00f      	beq.n	3afc <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3adc:	3201      	adds	r2, #1
    3ade:	2a1f      	cmp	r2, #31
    3ae0:	d80a      	bhi.n	3af8 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3ae2:	f102 0308 	add.w	r3, r2, #8
    3ae6:	4906      	ldr	r1, [pc, #24]	; (3b00 <handler_in_use+0x30>)
    3ae8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    3aec:	f413 7f80 	tst.w	r3, #256	; 0x100
    3af0:	d0f0      	beq.n	3ad4 <handler_in_use+0x4>
    3af2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3af6:	e7ef      	b.n	3ad8 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    3af8:	2000      	movs	r0, #0
    3afa:	4770      	bx	lr
            return true;
    3afc:	2001      	movs	r0, #1
}
    3afe:	4770      	bx	lr
    3b00:	20000a08 	.word	0x20000a08

00003b04 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    3b04:	2300      	movs	r3, #0
    3b06:	b113      	cbz	r3, 3b0e <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    3b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    3b0c:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3b0e:	4a07      	ldr	r2, [pc, #28]	; (3b2c <find_handler+0x28>)
    3b10:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    3b14:	4282      	cmp	r2, r0
    3b16:	d001      	beq.n	3b1c <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    3b18:	3301      	adds	r3, #1
    3b1a:	e7f4      	b.n	3b06 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3b1c:	4a03      	ldr	r2, [pc, #12]	; (3b2c <find_handler+0x28>)
    3b1e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    3b22:	6852      	ldr	r2, [r2, #4]
    3b24:	428a      	cmp	r2, r1
    3b26:	d1f7      	bne.n	3b18 <find_handler+0x14>
            return i;
    3b28:	4618      	mov	r0, r3
    3b2a:	4770      	bx	lr
    3b2c:	20000a08 	.word	0x20000a08

00003b30 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3b30:	f100 0208 	add.w	r2, r0, #8
    3b34:	4b0d      	ldr	r3, [pc, #52]	; (3b6c <get_initial_sense+0x3c>)
    3b36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    3b3a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3b3e:	2b04      	cmp	r3, #4
    3b40:	d00d      	beq.n	3b5e <get_initial_sense+0x2e>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3b42:	2b05      	cmp	r3, #5
    3b44:	d00d      	beq.n	3b62 <get_initial_sense+0x32>
    *p_pin = pin_number & 0x1F;
    3b46:	f000 001f 	and.w	r0, r0, #31
    return p_reg->IN;
    3b4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3b4e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3b52:	40c3      	lsrs	r3, r0
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3b54:	f013 0f01 	tst.w	r3, #1
    3b58:	d005      	beq.n	3b66 <get_initial_sense+0x36>
    3b5a:	2003      	movs	r0, #3
    3b5c:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3b5e:	2003      	movs	r0, #3
    3b60:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3b62:	2002      	movs	r0, #2
    3b64:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3b66:	2002      	movs	r0, #2
    }

    return sense;
}
    3b68:	4770      	bx	lr
    3b6a:	bf00      	nop
    3b6c:	20000a08 	.word	0x20000a08

00003b70 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3b70:	3008      	adds	r0, #8
    3b72:	4b06      	ldr	r3, [pc, #24]	; (3b8c <channel_handler_get+0x1c>)
    3b74:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3b78:	f410 7f80 	tst.w	r0, #256	; 0x100
    3b7c:	d004      	beq.n	3b88 <channel_handler_get+0x18>
    3b7e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    3b82:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3b86:	4770      	bx	lr
        return NULL;
    3b88:	2000      	movs	r0, #0
}
    3b8a:	4770      	bx	lr
    3b8c:	20000a08 	.word	0x20000a08

00003b90 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3b90:	b570      	push	{r4, r5, r6, lr}
    3b92:	4604      	mov	r4, r0
    3b94:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    3b96:	f7ff ffeb 	bl	3b70 <channel_handler_get>

    if (handler)
    3b9a:	b120      	cbz	r0, 3ba6 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    3b9c:	6806      	ldr	r6, [r0, #0]
    3b9e:	6842      	ldr	r2, [r0, #4]
    3ba0:	4629      	mov	r1, r5
    3ba2:	4620      	mov	r0, r4
    3ba4:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    3ba6:	4b04      	ldr	r3, [pc, #16]	; (3bb8 <call_handler+0x28>)
    3ba8:	689b      	ldr	r3, [r3, #8]
    3baa:	b123      	cbz	r3, 3bb6 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3bac:	4a02      	ldr	r2, [pc, #8]	; (3bb8 <call_handler+0x28>)
    3bae:	68d2      	ldr	r2, [r2, #12]
    3bb0:	4629      	mov	r1, r5
    3bb2:	4620      	mov	r0, r4
    3bb4:	4798      	blx	r3
    }
}
    3bb6:	bd70      	pop	{r4, r5, r6, pc}
    3bb8:	20000a08 	.word	0x20000a08

00003bbc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3bbc:	f100 0208 	add.w	r2, r0, #8
    3bc0:	4b0e      	ldr	r3, [pc, #56]	; (3bfc <release_handler+0x40>)
    3bc2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    3bc6:	f413 7f80 	tst.w	r3, #256	; 0x100
    3bca:	d016      	beq.n	3bfa <release_handler+0x3e>
{
    3bcc:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3bce:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3bd2:	4610      	mov	r0, r2
    3bd4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3bd8:	4a08      	ldr	r2, [pc, #32]	; (3bfc <release_handler+0x40>)
    3bda:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    3bde:	4620      	mov	r0, r4
    3be0:	f7ff ff76 	bl	3ad0 <handler_in_use>
    3be4:	b100      	cbz	r0, 3be8 <release_handler+0x2c>
}
    3be6:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    3be8:	4804      	ldr	r0, [pc, #16]	; (3bfc <release_handler+0x40>)
    3bea:	2300      	movs	r3, #0
    3bec:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3bf0:	4621      	mov	r1, r4
    3bf2:	3054      	adds	r0, #84	; 0x54
    3bf4:	f7ff fe60 	bl	38b8 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3bf8:	e7f5      	b.n	3be6 <release_handler+0x2a>
    3bfa:	4770      	bx	lr
    3bfc:	20000a08 	.word	0x20000a08

00003c00 <pin_handler_trigger_uninit>:
{
    3c00:	b510      	push	{r4, lr}
    3c02:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    3c04:	f7ff ff3c 	bl	3a80 <pin_in_use_by_te>
    3c08:	b140      	cbz	r0, 3c1c <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3c0a:	4620      	mov	r0, r4
    3c0c:	f7ff ff58 	bl	3ac0 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3c10:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3c14:	4b06      	ldr	r3, [pc, #24]	; (3c30 <pin_handler_trigger_uninit+0x30>)
    3c16:	2200      	movs	r2, #0
    3c18:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    3c1c:	4620      	mov	r0, r4
    3c1e:	f7ff ffcd 	bl	3bbc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3c22:	3408      	adds	r4, #8
    3c24:	4b03      	ldr	r3, [pc, #12]	; (3c34 <pin_handler_trigger_uninit+0x34>)
    3c26:	2200      	movs	r2, #0
    3c28:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    3c2c:	bd10      	pop	{r4, pc}
    3c2e:	bf00      	nop
    3c30:	40006000 	.word	0x40006000
    3c34:	20000a08 	.word	0x20000a08

00003c38 <pin_handler_set>:
{
    3c38:	b570      	push	{r4, r5, r6, lr}
    3c3a:	b082      	sub	sp, #8
    3c3c:	4605      	mov	r5, r0
    3c3e:	460e      	mov	r6, r1
    3c40:	4614      	mov	r4, r2
    release_handler(pin);
    3c42:	f7ff ffbb 	bl	3bbc <release_handler>
    if (!handler)
    3c46:	b326      	cbz	r6, 3c92 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    3c48:	4621      	mov	r1, r4
    3c4a:	4630      	mov	r0, r6
    3c4c:	f7ff ff5a 	bl	3b04 <find_handler>
    if (handler_id < 0)
    3c50:	1e03      	subs	r3, r0, #0
    3c52:	db13      	blt.n	3c7c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    3c54:	4910      	ldr	r1, [pc, #64]	; (3c98 <pin_handler_set+0x60>)
    3c56:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3c5a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    3c5e:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3c60:	f105 0008 	add.w	r0, r5, #8
    3c64:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    3c68:	025b      	lsls	r3, r3, #9
    3c6a:	b29b      	uxth	r3, r3
    3c6c:	4313      	orrs	r3, r2
    3c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3c72:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    3c76:	4809      	ldr	r0, [pc, #36]	; (3c9c <pin_handler_set+0x64>)
}
    3c78:	b002      	add	sp, #8
    3c7a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3c7c:	f10d 0107 	add.w	r1, sp, #7
    3c80:	4807      	ldr	r0, [pc, #28]	; (3ca0 <pin_handler_set+0x68>)
    3c82:	f7ff fdf1 	bl	3868 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3c86:	4b05      	ldr	r3, [pc, #20]	; (3c9c <pin_handler_set+0x64>)
    3c88:	4298      	cmp	r0, r3
    3c8a:	d1f5      	bne.n	3c78 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    3c8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3c90:	e7e0      	b.n	3c54 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    3c92:	4802      	ldr	r0, [pc, #8]	; (3c9c <pin_handler_set+0x64>)
    3c94:	e7f0      	b.n	3c78 <pin_handler_set+0x40>
    3c96:	bf00      	nop
    3c98:	20000a08 	.word	0x20000a08
    3c9c:	0bad0000 	.word	0x0bad0000
    3ca0:	20000a5c 	.word	0x20000a5c

00003ca4 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    3ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ca6:	b083      	sub	sp, #12
    for (i = start_port; i < (start_port + length); i++)
    3ca8:	2300      	movs	r3, #0
    3caa:	a801      	add	r0, sp, #4
    3cac:	e008      	b.n	3cc0 <port_event_handle+0x1c>
        *p_masks = gpio_regs[i]->LATCH;
    3cae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3cb2:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    3cb6:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    3cba:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    3cbe:	3301      	adds	r3, #1
    3cc0:	2b00      	cmp	r3, #0
    3cc2:	d0f4      	beq.n	3cae <port_event_handle+0xa>
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3cc4:	2400      	movs	r4, #0
    3cc6:	b3a4      	cbz	r4, 3d32 <port_event_handle+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3cc8:	4b1e      	ldr	r3, [pc, #120]	; (3d44 <port_event_handle+0xa0>)
    3cca:	2200      	movs	r2, #0
    3ccc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3cd0:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    3cd4:	a801      	add	r0, sp, #4
    3cd6:	f004 fa72 	bl	81be <latch_pending_read_and_check>
    3cda:	2800      	cmp	r0, #0
    3cdc:	d1f2      	bne.n	3cc4 <port_event_handle+0x20>
}
    3cde:	b003      	add	sp, #12
    3ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    3ce2:	fa90 f0a0 	rbit	r0, r0
    3ce6:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    3cea:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3cee:	f100 0208 	add.w	r2, r0, #8
    3cf2:	4b15      	ldr	r3, [pc, #84]	; (3d48 <port_event_handle+0xa4>)
    3cf4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3cf8:	08c6      	lsrs	r6, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    3cfa:	f000 0307 	and.w	r3, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3cfe:	af01      	add	r7, sp, #4
    3d00:	5dba      	ldrb	r2, [r7, r6]
    3d02:	2501      	movs	r5, #1
    3d04:	fa05 f303 	lsl.w	r3, r5, r3
    3d08:	43db      	mvns	r3, r3
    3d0a:	b25b      	sxtb	r3, r3
    3d0c:	4013      	ands	r3, r2
    3d0e:	55bb      	strb	r3, [r7, r6]
    *p_pin = pin_number & 0x1F;
    3d10:	f000 071f 	and.w	r7, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3d14:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    3d18:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    3d1c:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    3d20:	f3c2 4201 	ubfx	r2, r2, #16, #2
    3d24:	f3c1 0182 	ubfx	r1, r1, #2, #3
    3d28:	f004 f9fa 	bl	8120 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    3d2c:	40bd      	lsls	r5, r7
    3d2e:	f8c6 5520 	str.w	r5, [r6, #1312]	; 0x520
            while (latch[i])
    3d32:	ab02      	add	r3, sp, #8
    3d34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3d38:	f853 0c04 	ldr.w	r0, [r3, #-4]
    3d3c:	2800      	cmp	r0, #0
    3d3e:	d1d0      	bne.n	3ce2 <port_event_handle+0x3e>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3d40:	3401      	adds	r4, #1
    3d42:	e7c0      	b.n	3cc6 <port_event_handle+0x22>
    3d44:	40006000 	.word	0x40006000
    3d48:	20000a08 	.word	0x20000a08

00003d4c <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    3d4c:	b538      	push	{r3, r4, r5, lr}
    3d4e:	4604      	mov	r4, r0
    while (mask)
    3d50:	e018      	b.n	3d84 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    3d52:	fa94 f3a4 	rbit	r3, r4
    3d56:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3d5a:	2201      	movs	r2, #1
    3d5c:	409a      	lsls	r2, r3
    3d5e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3d62:	4a0a      	ldr	r2, [pc, #40]	; (3d8c <gpiote_evt_handle+0x40>)
    3d64:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3d68:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    3d6c:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3d70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3d74:	f3c0 4001 	ubfx	r0, r0, #16, #2
    3d78:	f004 f9cb 	bl	8112 <gpiote_polarity_to_trigger>
    3d7c:	4601      	mov	r1, r0
    3d7e:	4628      	mov	r0, r5
    3d80:	f7ff ff06 	bl	3b90 <call_handler>
    while (mask)
    3d84:	2c00      	cmp	r4, #0
    3d86:	d1e4      	bne.n	3d52 <gpiote_evt_handle+0x6>
    }
}
    3d88:	bd38      	pop	{r3, r4, r5, pc}
    3d8a:	bf00      	nop
    3d8c:	40006000 	.word	0x40006000

00003d90 <nrfx_gpiote_input_configure>:
{
    3d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d94:	b084      	sub	sp, #16
    3d96:	4604      	mov	r4, r0
    3d98:	4615      	mov	r5, r2
    3d9a:	461e      	mov	r6, r3
    if (p_input_config)
    3d9c:	b309      	cbz	r1, 3de2 <nrfx_gpiote_input_configure+0x52>
    3d9e:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    3da0:	f004 f9a1 	bl	80e6 <pin_is_task_output>
    3da4:	2800      	cmp	r0, #0
    3da6:	d13f      	bne.n	3e28 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3da8:	2300      	movs	r3, #0
    3daa:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3dae:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3db2:	9301      	str	r3, [sp, #4]
    3db4:	9300      	str	r3, [sp, #0]
    3db6:	463b      	mov	r3, r7
    3db8:	f10d 020f 	add.w	r2, sp, #15
    3dbc:	f10d 010e 	add.w	r1, sp, #14
    3dc0:	4620      	mov	r0, r4
    3dc2:	f004 f938 	bl	8036 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3dc6:	4a38      	ldr	r2, [pc, #224]	; (3ea8 <nrfx_gpiote_input_configure+0x118>)
    3dc8:	f104 0108 	add.w	r1, r4, #8
    3dcc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3dd0:	f023 0302 	bic.w	r3, r3, #2
    3dd4:	b29b      	uxth	r3, r3
    3dd6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3dda:	f043 0301 	orr.w	r3, r3, #1
    3dde:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3de2:	b1bd      	cbz	r5, 3e14 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3de4:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3de6:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    3dea:	4620      	mov	r0, r4
    3dec:	f7ff fe5e 	bl	3aac <pin_is_output>
    3df0:	b1e0      	cbz	r0, 3e2c <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    3df2:	f1b8 0f00 	cmp.w	r8, #0
    3df6:	d151      	bne.n	3e9c <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3df8:	4a2b      	ldr	r2, [pc, #172]	; (3ea8 <nrfx_gpiote_input_configure+0x118>)
    3dfa:	f104 0108 	add.w	r1, r4, #8
    3dfe:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3e02:	f023 031c 	bic.w	r3, r3, #28
    3e06:	b29b      	uxth	r3, r3
    3e08:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3e0c:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    3e10:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    3e14:	2e00      	cmp	r6, #0
    3e16:	d045      	beq.n	3ea4 <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3e18:	6872      	ldr	r2, [r6, #4]
    3e1a:	6831      	ldr	r1, [r6, #0]
    3e1c:	4620      	mov	r0, r4
    3e1e:	f7ff ff0b 	bl	3c38 <pin_handler_set>
}
    3e22:	b004      	add	sp, #16
    3e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    3e28:	4820      	ldr	r0, [pc, #128]	; (3eac <nrfx_gpiote_input_configure+0x11c>)
    3e2a:	e7fa      	b.n	3e22 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3e2c:	4a1e      	ldr	r2, [pc, #120]	; (3ea8 <nrfx_gpiote_input_configure+0x118>)
    3e2e:	f104 0108 	add.w	r1, r4, #8
    3e32:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3e36:	f023 0320 	bic.w	r3, r3, #32
    3e3a:	04db      	lsls	r3, r3, #19
    3e3c:	0cdb      	lsrs	r3, r3, #19
    3e3e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    3e42:	f1b8 0f00 	cmp.w	r8, #0
    3e46:	d0d7      	beq.n	3df8 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    3e48:	2f03      	cmp	r7, #3
    3e4a:	d829      	bhi.n	3ea0 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3e4c:	686b      	ldr	r3, [r5, #4]
    3e4e:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3e50:	b937      	cbnz	r7, 3e60 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
    3e52:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    3e56:	4b16      	ldr	r3, [pc, #88]	; (3eb0 <nrfx_gpiote_input_configure+0x120>)
    3e58:	2200      	movs	r2, #0
    3e5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3e5e:	e7cb      	b.n	3df8 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    3e60:	4638      	mov	r0, r7
    3e62:	f004 f957 	bl	8114 <gpiote_trigger_to_polarity>
    3e66:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3e68:	4811      	ldr	r0, [pc, #68]	; (3eb0 <nrfx_gpiote_input_configure+0x120>)
    3e6a:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    3e6e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    3e72:	f022 0203 	bic.w	r2, r2, #3
    3e76:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    3e7a:	4622      	mov	r2, r4
    3e7c:	4629      	mov	r1, r5
    3e7e:	f004 f8a2 	bl	7fc6 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3e82:	4a09      	ldr	r2, [pc, #36]	; (3ea8 <nrfx_gpiote_input_configure+0x118>)
    3e84:	f104 0108 	add.w	r1, r4, #8
    3e88:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3e8c:	036d      	lsls	r5, r5, #13
    3e8e:	b2ad      	uxth	r5, r5
    3e90:	432b      	orrs	r3, r5
    3e92:	f043 0320 	orr.w	r3, r3, #32
    3e96:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    3e9a:	e7ad      	b.n	3df8 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    3e9c:	4803      	ldr	r0, [pc, #12]	; (3eac <nrfx_gpiote_input_configure+0x11c>)
    3e9e:	e7c0      	b.n	3e22 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    3ea0:	4802      	ldr	r0, [pc, #8]	; (3eac <nrfx_gpiote_input_configure+0x11c>)
    3ea2:	e7be      	b.n	3e22 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    3ea4:	4803      	ldr	r0, [pc, #12]	; (3eb4 <nrfx_gpiote_input_configure+0x124>)
    3ea6:	e7bc      	b.n	3e22 <nrfx_gpiote_input_configure+0x92>
    3ea8:	20000a08 	.word	0x20000a08
    3eac:	0bad0004 	.word	0x0bad0004
    3eb0:	40006000 	.word	0x40006000
    3eb4:	0bad0000 	.word	0x0bad0000

00003eb8 <nrfx_gpiote_output_configure>:
{
    3eb8:	b570      	push	{r4, r5, r6, lr}
    3eba:	b084      	sub	sp, #16
    3ebc:	4604      	mov	r4, r0
    3ebe:	4615      	mov	r5, r2
    if (p_config)
    3ec0:	b329      	cbz	r1, 3f0e <nrfx_gpiote_output_configure+0x56>
    3ec2:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3ec4:	f004 f91e 	bl	8104 <pin_is_input>
    3ec8:	b120      	cbz	r0, 3ed4 <nrfx_gpiote_output_configure+0x1c>
    3eca:	4620      	mov	r0, r4
    3ecc:	f7ff fdd8 	bl	3a80 <pin_in_use_by_te>
    3ed0:	2800      	cmp	r0, #0
    3ed2:	d138      	bne.n	3f46 <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3ed4:	4620      	mov	r0, r4
    3ed6:	f7ff fddd 	bl	3a94 <pin_has_trigger>
    3eda:	b110      	cbz	r0, 3ee2 <nrfx_gpiote_output_configure+0x2a>
    3edc:	7873      	ldrb	r3, [r6, #1]
    3ede:	2b01      	cmp	r3, #1
    3ee0:	d031      	beq.n	3f46 <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3ee2:	2301      	movs	r3, #1
    3ee4:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3ee8:	2300      	movs	r3, #0
    3eea:	9301      	str	r3, [sp, #4]
    3eec:	9600      	str	r6, [sp, #0]
    3eee:	1cb3      	adds	r3, r6, #2
    3ef0:	1c72      	adds	r2, r6, #1
    3ef2:	f10d 010f 	add.w	r1, sp, #15
    3ef6:	4620      	mov	r0, r4
    3ef8:	f004 f89d 	bl	8036 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3efc:	4a1f      	ldr	r2, [pc, #124]	; (3f7c <nrfx_gpiote_output_configure+0xc4>)
    3efe:	f104 0108 	add.w	r1, r4, #8
    3f02:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3f06:	f043 0303 	orr.w	r3, r3, #3
    3f0a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    3f0e:	b385      	cbz	r5, 3f72 <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
    3f10:	4620      	mov	r0, r4
    3f12:	f004 f8f7 	bl	8104 <pin_is_input>
    3f16:	bb70      	cbnz	r0, 3f76 <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
    3f18:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    3f1a:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    3f1e:	4b18      	ldr	r3, [pc, #96]	; (3f80 <nrfx_gpiote_output_configure+0xc8>)
    3f20:	2100      	movs	r1, #0
    3f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3f26:	4a15      	ldr	r2, [pc, #84]	; (3f7c <nrfx_gpiote_output_configure+0xc4>)
    3f28:	f104 0108 	add.w	r1, r4, #8
    3f2c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3f30:	f023 0320 	bic.w	r3, r3, #32
    3f34:	04db      	lsls	r3, r3, #19
    3f36:	0cdb      	lsrs	r3, r3, #19
    3f38:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3f3c:	786b      	ldrb	r3, [r5, #1]
    3f3e:	b923      	cbnz	r3, 3f4a <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
    3f40:	4810      	ldr	r0, [pc, #64]	; (3f84 <nrfx_gpiote_output_configure+0xcc>)
}
    3f42:	b004      	add	sp, #16
    3f44:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    3f46:	4810      	ldr	r0, [pc, #64]	; (3f88 <nrfx_gpiote_output_configure+0xd0>)
    3f48:	e7fb      	b.n	3f42 <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
    3f4a:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3f4c:	9200      	str	r2, [sp, #0]
    3f4e:	4622      	mov	r2, r4
    3f50:	4631      	mov	r1, r6
    3f52:	480b      	ldr	r0, [pc, #44]	; (3f80 <nrfx_gpiote_output_configure+0xc8>)
    3f54:	f004 f850 	bl	7ff8 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3f58:	4a08      	ldr	r2, [pc, #32]	; (3f7c <nrfx_gpiote_output_configure+0xc4>)
    3f5a:	3408      	adds	r4, #8
    3f5c:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    3f60:	0376      	lsls	r6, r6, #13
    3f62:	b2b6      	uxth	r6, r6
    3f64:	4333      	orrs	r3, r6
    3f66:	f043 0320 	orr.w	r3, r3, #32
    3f6a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    3f6e:	4805      	ldr	r0, [pc, #20]	; (3f84 <nrfx_gpiote_output_configure+0xcc>)
    3f70:	e7e7      	b.n	3f42 <nrfx_gpiote_output_configure+0x8a>
    3f72:	4804      	ldr	r0, [pc, #16]	; (3f84 <nrfx_gpiote_output_configure+0xcc>)
    3f74:	e7e5      	b.n	3f42 <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
    3f76:	4804      	ldr	r0, [pc, #16]	; (3f88 <nrfx_gpiote_output_configure+0xd0>)
    3f78:	e7e3      	b.n	3f42 <nrfx_gpiote_output_configure+0x8a>
    3f7a:	bf00      	nop
    3f7c:	20000a08 	.word	0x20000a08
    3f80:	40006000 	.word	0x40006000
    3f84:	0bad0000 	.word	0x0bad0000
    3f88:	0bad0004 	.word	0x0bad0004

00003f8c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3f8c:	4b01      	ldr	r3, [pc, #4]	; (3f94 <nrfx_gpiote_global_callback_set+0x8>)
    3f8e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    3f90:	60d9      	str	r1, [r3, #12]
}
    3f92:	4770      	bx	lr
    3f94:	20000a08 	.word	0x20000a08

00003f98 <nrfx_gpiote_channel_get>:
{
    3f98:	b538      	push	{r3, r4, r5, lr}
    3f9a:	4604      	mov	r4, r0
    3f9c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    3f9e:	f7ff fd6f 	bl	3a80 <pin_in_use_by_te>
    3fa2:	b140      	cbz	r0, 3fb6 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3fa4:	f104 0008 	add.w	r0, r4, #8
    3fa8:	4b04      	ldr	r3, [pc, #16]	; (3fbc <nrfx_gpiote_channel_get+0x24>)
    3faa:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    3fae:	0b5b      	lsrs	r3, r3, #13
    3fb0:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    3fb2:	4803      	ldr	r0, [pc, #12]	; (3fc0 <nrfx_gpiote_channel_get+0x28>)
}
    3fb4:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3fb6:	4803      	ldr	r0, [pc, #12]	; (3fc4 <nrfx_gpiote_channel_get+0x2c>)
    3fb8:	e7fc      	b.n	3fb4 <nrfx_gpiote_channel_get+0x1c>
    3fba:	bf00      	nop
    3fbc:	20000a08 	.word	0x20000a08
    3fc0:	0bad0000 	.word	0x0bad0000
    3fc4:	0bad0004 	.word	0x0bad0004

00003fc8 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3fc8:	4b0f      	ldr	r3, [pc, #60]	; (4008 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8>)
    3fca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    3fce:	b10b      	cbz	r3, 3fd4 <nrfx_gpiote_init+0xc>
        return err_code;
    3fd0:	480e      	ldr	r0, [pc, #56]	; (400c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc>)
}
    3fd2:	4770      	bx	lr
{
    3fd4:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3fd6:	4c0e      	ldr	r4, [pc, #56]	; (4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>)
    3fd8:	2240      	movs	r2, #64	; 0x40
    3fda:	2100      	movs	r1, #0
    3fdc:	4620      	mov	r0, r4
    3fde:	f004 fd96 	bl	8b0e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3fe2:	2006      	movs	r0, #6
    3fe4:	f002 fe53 	bl	6c8e <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3fe8:	4b0a      	ldr	r3, [pc, #40]	; (4014 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14>)
    3fea:	2200      	movs	r2, #0
    3fec:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3ff0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3ff4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3ff8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3ffc:	2301      	movs	r3, #1
    3ffe:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4002:	6463      	str	r3, [r4, #68]	; 0x44
    return err_code;
    4004:	4804      	ldr	r0, [pc, #16]	; (4018 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18>)
}
    4006:	bd10      	pop	{r4, pc}
    4008:	20000a08 	.word	0x20000a08
    400c:	0bad0005 	.word	0x0bad0005
    4010:	20000a18 	.word	0x20000a18
    4014:	40006000 	.word	0x40006000
    4018:	0bad0000 	.word	0x0bad0000

0000401c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    401c:	4b03      	ldr	r3, [pc, #12]	; (402c <nrfx_gpiote_is_init+0x10>)
    401e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    4022:	3800      	subs	r0, #0
    4024:	bf18      	it	ne
    4026:	2001      	movne	r0, #1
    4028:	4770      	bx	lr
    402a:	bf00      	nop
    402c:	20000a08 	.word	0x20000a08

00004030 <nrfx_gpiote_channel_free>:
{
    4030:	b508      	push	{r3, lr}
    4032:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4034:	4801      	ldr	r0, [pc, #4]	; (403c <nrfx_gpiote_channel_free+0xc>)
    4036:	f7ff fc3f 	bl	38b8 <nrfx_flag32_free>
}
    403a:	bd08      	pop	{r3, pc}
    403c:	20000a58 	.word	0x20000a58

00004040 <nrfx_gpiote_channel_alloc>:
{
    4040:	b508      	push	{r3, lr}
    4042:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4044:	4801      	ldr	r0, [pc, #4]	; (404c <nrfx_gpiote_channel_alloc+0xc>)
    4046:	f7ff fc0f 	bl	3868 <nrfx_flag32_alloc>
}
    404a:	bd08      	pop	{r3, pc}
    404c:	20000a58 	.word	0x20000a58

00004050 <nrfx_gpiote_trigger_enable>:
{
    4050:	b538      	push	{r3, r4, r5, lr}
    4052:	4604      	mov	r4, r0
    4054:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4056:	f7ff fd13 	bl	3a80 <pin_in_use_by_te>
    405a:	b300      	cbz	r0, 409e <nrfx_gpiote_trigger_enable+0x4e>
    405c:	4620      	mov	r0, r4
    405e:	f004 f851 	bl	8104 <pin_is_input>
    4062:	b1e0      	cbz	r0, 409e <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    4064:	4620      	mov	r0, r4
    4066:	f7ff fd2b 	bl	3ac0 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    406a:	0083      	lsls	r3, r0, #2
    406c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    4070:	b29b      	uxth	r3, r3
    4072:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4076:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    407a:	2200      	movs	r2, #0
    407c:	601a      	str	r2, [r3, #0]
    407e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4080:	4a10      	ldr	r2, [pc, #64]	; (40c4 <nrfx_gpiote_trigger_enable+0x74>)
    4082:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    4086:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    408a:	f043 0301 	orr.w	r3, r3, #1
    408e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    4092:	b1ad      	cbz	r5, 40c0 <nrfx_gpiote_trigger_enable+0x70>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4094:	2301      	movs	r3, #1
    4096:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    4098:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    409c:	e010      	b.n	40c0 <nrfx_gpiote_trigger_enable+0x70>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    409e:	4620      	mov	r0, r4
    40a0:	f7ff fd46 	bl	3b30 <get_initial_sense>
    *p_pin = pin_number & 0x1F;
    40a4:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    40a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    40ac:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    40b0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    40b4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    40b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    40bc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    40c0:	bd38      	pop	{r3, r4, r5, pc}
    40c2:	bf00      	nop
    40c4:	40006000 	.word	0x40006000

000040c8 <nrfx_gpiote_trigger_disable>:
{
    40c8:	b510      	push	{r4, lr}
    40ca:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    40cc:	f7ff fcd8 	bl	3a80 <pin_in_use_by_te>
    40d0:	b1a0      	cbz	r0, 40fc <nrfx_gpiote_trigger_disable+0x34>
    40d2:	4620      	mov	r0, r4
    40d4:	f004 f816 	bl	8104 <pin_is_input>
    40d8:	b180      	cbz	r0, 40fc <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    40da:	4620      	mov	r0, r4
    40dc:	f7ff fcf0 	bl	3ac0 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    40e0:	2201      	movs	r2, #1
    40e2:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    40e4:	4b0c      	ldr	r3, [pc, #48]	; (4118 <nrfx_gpiote_trigger_disable+0x50>)
    40e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    40ea:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    40ee:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    40f2:	f022 0203 	bic.w	r2, r2, #3
    40f6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    40fa:	e00b      	b.n	4114 <nrfx_gpiote_trigger_disable+0x4c>
    *p_pin = pin_number & 0x1F;
    40fc:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4100:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4104:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    4108:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    410c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    4110:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    4114:	bd10      	pop	{r4, pc}
    4116:	bf00      	nop
    4118:	40006000 	.word	0x40006000

0000411c <nrfx_gpiote_pin_uninit>:
{
    411c:	b510      	push	{r4, lr}
    411e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4120:	f7ff fca4 	bl	3a6c <pin_in_use>
    4124:	b908      	cbnz	r0, 412a <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    4126:	4809      	ldr	r0, [pc, #36]	; (414c <nrfx_gpiote_pin_uninit+0x30>)
}
    4128:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    412a:	4620      	mov	r0, r4
    412c:	f7ff ffcc 	bl	40c8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4130:	4620      	mov	r0, r4
    4132:	f7ff fd65 	bl	3c00 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    4136:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    413a:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    413e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4142:	2202      	movs	r2, #2
    4144:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    return NRFX_SUCCESS;
    4148:	4801      	ldr	r0, [pc, #4]	; (4150 <nrfx_gpiote_pin_uninit+0x34>)
    414a:	e7ed      	b.n	4128 <nrfx_gpiote_pin_uninit+0xc>
    414c:	0bad0004 	.word	0x0bad0004
    4150:	0bad0000 	.word	0x0bad0000

00004154 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    4154:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4156:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    4158:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    415c:	2100      	movs	r1, #0
    uint32_t status = 0;
    415e:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4160:	e003      	b.n	416a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    4162:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    4164:	3304      	adds	r3, #4
    4166:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4168:	3101      	adds	r1, #1
    416a:	2907      	cmp	r1, #7
    416c:	d814      	bhi.n	4198 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    416e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    4172:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    4176:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4178:	2a00      	cmp	r2, #0
    417a:	d0f2      	beq.n	4162 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    417c:	4a0c      	ldr	r2, [pc, #48]	; (41b0 <nrfx_gpiote_irq_handler+0x5c>)
    417e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    4182:	4210      	tst	r0, r2
    4184:	d0ed      	beq.n	4162 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    4186:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    418a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    418e:	2500      	movs	r5, #0
    4190:	6015      	str	r5, [r2, #0]
    4192:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    4194:	4304      	orrs	r4, r0
    4196:	e7e4      	b.n	4162 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4198:	4b05      	ldr	r3, [pc, #20]	; (41b0 <nrfx_gpiote_irq_handler+0x5c>)
    419a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    419e:	b91b      	cbnz	r3, 41a8 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    41a0:	4620      	mov	r0, r4
    41a2:	f7ff fdd3 	bl	3d4c <gpiote_evt_handle>
}
    41a6:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    41a8:	f7ff fd7c 	bl	3ca4 <port_event_handle>
    41ac:	e7f8      	b.n	41a0 <nrfx_gpiote_irq_handler+0x4c>
    41ae:	bf00      	nop
    41b0:	40006000 	.word	0x40006000

000041b4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    41b4:	b508      	push	{r3, lr}
    41b6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    41b8:	4801      	ldr	r0, [pc, #4]	; (41c0 <nrfx_ppi_channel_alloc+0xc>)
    41ba:	f7ff fb55 	bl	3868 <nrfx_flag32_alloc>
}
    41be:	bd08      	pop	{r3, pc}
    41c0:	20000a64 	.word	0x20000a64

000041c4 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    41c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41c8:	4604      	mov	r4, r0
    41ca:	460d      	mov	r5, r1
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    41cc:	7906      	ldrb	r6, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    41ce:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    41d2:	492b      	ldr	r1, [pc, #172]	; (4280 <nrfx_pwm_init+0xbc>)
    41d4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    41d8:	7a09      	ldrb	r1, [r1, #8]
    41da:	b111      	cbz	r1, 41e2 <nrfx_pwm_init+0x1e>
    {
        err_code = NRFX_ERROR_INVALID_STATE;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    41dc:	4829      	ldr	r0, [pc, #164]	; (4284 <nrfx_pwm_init+0xc0>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    41de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_cb->handler = handler;
    41e2:	4f27      	ldr	r7, [pc, #156]	; (4280 <nrfx_pwm_init+0xbc>)
    41e4:	ea4f 0880 	mov.w	r8, r0, lsl #2
    41e8:	eb07 0180 	add.w	r1, r7, r0, lsl #2
    41ec:	f847 2008 	str.w	r2, [r7, r8]
    p_cb->p_context = p_context;
    41f0:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    41f2:	7b2b      	ldrb	r3, [r5, #12]
    41f4:	728b      	strb	r3, [r1, #10]
    configure_pins(p_instance, p_config);
    41f6:	4629      	mov	r1, r5
    41f8:	4620      	mov	r0, r4
    41fa:	f003 fff9 	bl	81f0 <configure_pins>
    nrf_pwm_enable(p_instance->p_registers);
    41fe:	6823      	ldr	r3, [r4, #0]
}
#endif // defined(DPPI_PRESENT)

NRF_STATIC_INLINE void nrf_pwm_enable(NRF_PWM_Type * p_reg)
{
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    4200:	2201      	movs	r2, #1
    4202:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_pwm_configure(p_instance->p_registers,
    4206:	6823      	ldr	r3, [r4, #0]
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    4208:	7968      	ldrb	r0, [r5, #5]
    420a:	79a9      	ldrb	r1, [r5, #6]
    420c:	892a      	ldrh	r2, [r5, #8]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
    420e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->MODE       = mode;
    4212:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    4216:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    nrf_pwm_decoder_set(p_instance->p_registers,
    421a:	6822      	ldr	r2, [r4, #0]
        p_config->load_mode, p_config->step_mode);
    421c:	7aab      	ldrb	r3, [r5, #10]
    421e:	7ae9      	ldrb	r1, [r5, #11]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    4220:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    4224:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    4228:	6822      	ldr	r2, [r4, #0]
    p_reg->SHORTS = mask;
    422a:	2300      	movs	r3, #0
    422c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    nrf_pwm_int_set(p_instance->p_registers, 0);
    4230:	6822      	ldr	r2, [r4, #0]
    p_reg->INTEN = mask;
    4232:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
    4236:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4238:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    423c:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
    4240:	6822      	ldr	r2, [r4, #0]
    4242:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    4246:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
    424a:	6822      	ldr	r2, [r4, #0]
    424c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    4250:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    4254:	6822      	ldr	r2, [r4, #0]
    4256:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    425a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    if (p_cb->handler)
    425e:	f857 3008 	ldr.w	r3, [r7, r8]
    4262:	b123      	cbz	r3, 426e <nrfx_pwm_init+0xaa>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    4264:	6820      	ldr	r0, [r4, #0]
    4266:	f340 3007 	sbfx	r0, r0, #12, #8
    426a:	f002 fd10 	bl	6c8e <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    426e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    4272:	4b03      	ldr	r3, [pc, #12]	; (4280 <nrfx_pwm_init+0xbc>)
    4274:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    4278:	2201      	movs	r2, #1
    427a:	721a      	strb	r2, [r3, #8]
    return err_code;
    427c:	4802      	ldr	r0, [pc, #8]	; (4288 <nrfx_pwm_init+0xc4>)
    427e:	e7ae      	b.n	41de <nrfx_pwm_init+0x1a>
    4280:	200012ec 	.word	0x200012ec
    4284:	0bad0005 	.word	0x0bad0005
    4288:	0bad0000 	.word	0x0bad0000

0000428c <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    428c:	b538      	push	{r3, r4, r5, lr}
    428e:	468c      	mov	ip, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4290:	7901      	ldrb	r1, [r0, #4]
    4292:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4296:	4c21      	ldr	r4, [pc, #132]	; (431c <nrfx_pwm_simple_playback+0x90>)
    4298:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    429c:	6804      	ldr	r4, [r0, #0]
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    429e:	f8dc 5000 	ldr.w	r5, [ip]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    42a2:	f8c4 5520 	str.w	r5, [r4, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    42a6:	f8bc 5004 	ldrh.w	r5, [ip, #4]
    p_reg->SEQ[seq_id].CNT = length;
    42aa:	f8c4 5524 	str.w	r5, [r4, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    42ae:	f8dc 5008 	ldr.w	r5, [ip, #8]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    42b2:	f8c4 5528 	str.w	r5, [r4, #1320]	; 0x528
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    42b6:	f8dc 500c 	ldr.w	r5, [ip, #12]
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    42ba:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    42be:	6804      	ldr	r4, [r0, #0]
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    42c0:	f8dc 5000 	ldr.w	r5, [ip]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    42c4:	f8c4 5540 	str.w	r5, [r4, #1344]	; 0x540
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    42c8:	f8bc 5004 	ldrh.w	r5, [ip, #4]
    p_reg->SEQ[seq_id].CNT = length;
    42cc:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    42d0:	f8dc 5008 	ldr.w	r5, [ip, #8]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    42d4:	f8c4 5548 	str.w	r5, [r4, #1352]	; 0x548
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    42d8:	f8dc 500c 	ldr.w	r5, [ip, #12]
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    42dc:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
    bool odd = (playback_count & 1);
    42e0:	f002 0501 	and.w	r5, r2, #1
    nrf_pwm_loop_set(p_instance->p_registers,
    42e4:	eb05 0252 	add.w	r2, r5, r2, lsr #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    42e8:	6804      	ldr	r4, [r0, #0]
    42ea:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    42ee:	f013 0f01 	tst.w	r3, #1
    42f2:	d105      	bne.n	4300 <nrfx_pwm_simple_playback+0x74>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    42f4:	f013 0202 	ands.w	r2, r3, #2
    42f8:	d003      	beq.n	4302 <nrfx_pwm_simple_playback+0x76>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    42fa:	b15d      	cbz	r5, 4314 <nrfx_pwm_simple_playback+0x88>
    42fc:	2208      	movs	r2, #8
    42fe:	e000      	b.n	4302 <nrfx_pwm_simple_playback+0x76>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    4300:	2210      	movs	r2, #16
    }
    else
    {
        shorts_mask = 0;
    }
    nrf_pwm_shorts_set(p_instance->p_registers, shorts_mask);
    4302:	6804      	ldr	r4, [r0, #0]
    p_reg->SHORTS = mask;
    4304:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    4308:	b2da      	uxtb	r2, r3
    430a:	b12d      	cbz	r5, 4318 <nrfx_pwm_simple_playback+0x8c>
    430c:	230c      	movs	r3, #12
    430e:	f003 ffc6 	bl	829e <start_playback>
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    4312:	bd38      	pop	{r3, r4, r5, pc}
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    4314:	2204      	movs	r2, #4
    4316:	e7f4      	b.n	4302 <nrfx_pwm_simple_playback+0x76>
    return start_playback(p_instance, p_cb, flags,
    4318:	2308      	movs	r3, #8
    431a:	e7f8      	b.n	430e <nrfx_pwm_simple_playback+0x82>
    431c:	200012ec 	.word	0x200012ec

00004320 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    4320:	4602      	mov	r2, r0
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4322:	7903      	ldrb	r3, [r0, #4]

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4324:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    4328:	490a      	ldr	r1, [pc, #40]	; (4354 <nrfx_pwm_is_stopped+0x34>)
    432a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    432e:	7a09      	ldrb	r1, [r1, #8]
    4330:	b2c9      	uxtb	r1, r1
    4332:	2902      	cmp	r1, #2
    4334:	d00c      	beq.n	4350 <nrfx_pwm_is_stopped+0x30>
    {
        ret_val = true;
    4336:	2001      	movs	r0, #1
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    4338:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    433a:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    433e:	b132      	cbz	r2, 434e <nrfx_pwm_is_stopped+0x2e>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4340:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4344:	4a03      	ldr	r2, [pc, #12]	; (4354 <nrfx_pwm_is_stopped+0x34>)
    4346:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    434a:	2001      	movs	r0, #1
    434c:	7218      	strb	r0, [r3, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    434e:	4770      	bx	lr
    bool ret_val = false;
    4350:	2000      	movs	r0, #0
    4352:	e7f1      	b.n	4338 <nrfx_pwm_is_stopped+0x18>
    4354:	200012ec 	.word	0x200012ec

00004358 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4358:	4b15      	ldr	r3, [pc, #84]	; (43b0 <_DoInit+0x58>)
    435a:	2203      	movs	r2, #3
    435c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    435e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4360:	4914      	ldr	r1, [pc, #80]	; (43b4 <_DoInit+0x5c>)
    4362:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4364:	4a14      	ldr	r2, [pc, #80]	; (43b8 <_DoInit+0x60>)
    4366:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4368:	f44f 6280 	mov.w	r2, #1024	; 0x400
    436c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    436e:	2200      	movs	r2, #0
    4370:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4372:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4374:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    4376:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4378:	4910      	ldr	r1, [pc, #64]	; (43bc <_DoInit+0x64>)
    437a:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    437c:	2110      	movs	r1, #16
    437e:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4380:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4382:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4384:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4386:	4a0e      	ldr	r2, [pc, #56]	; (43c0 <_DoInit+0x68>)
    4388:	6810      	ldr	r0, [r2, #0]
    438a:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    438e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4392:	4a0c      	ldr	r2, [pc, #48]	; (43c4 <_DoInit+0x6c>)
    4394:	e892 0003 	ldmia.w	r2, {r0, r1}
    4398:	6018      	str	r0, [r3, #0]
    439a:	8099      	strh	r1, [r3, #4]
    439c:	0c09      	lsrs	r1, r1, #16
    439e:	7199      	strb	r1, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    43a0:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    43a4:	2220      	movs	r2, #32
    43a6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    43a8:	f3bf 8f5f 	dmb	sy
}
    43ac:	4770      	bx	lr
    43ae:	bf00      	nop
    43b0:	20001708 	.word	0x20001708
    43b4:	0000957c 	.word	0x0000957c
    43b8:	20001308 	.word	0x20001308
    43bc:	200012f8 	.word	0x200012f8
    43c0:	00009588 	.word	0x00009588
    43c4:	0000958c 	.word	0x0000958c

000043c8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    43c8:	4b03      	ldr	r3, [pc, #12]	; (43d8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    43ca:	e000      	b.n	43ce <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    43cc:	3318      	adds	r3, #24
	while (dev < __device_end) {
    43ce:	4a03      	ldr	r2, [pc, #12]	; (43dc <z_device_state_init+0x14>)
    43d0:	4293      	cmp	r3, r2
    43d2:	d3fb      	bcc.n	43cc <z_device_state_init+0x4>
	}
}
    43d4:	4770      	bx	lr
    43d6:	bf00      	nop
    43d8:	00008db8 	.word	0x00008db8
    43dc:	00008e30 	.word	0x00008e30

000043e0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    43e0:	4b01      	ldr	r3, [pc, #4]	; (43e8 <z_impl_z_errno+0x8>)
    43e2:	6898      	ldr	r0, [r3, #8]
}
    43e4:	3094      	adds	r0, #148	; 0x94
    43e6:	4770      	bx	lr
    43e8:	200017b0 	.word	0x200017b0

000043ec <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    43ec:	b570      	push	{r4, r5, r6, lr}
    43ee:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    43f0:	4b12      	ldr	r3, [pc, #72]	; (443c <z_sys_init_run_level+0x50>)
    43f2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    43f6:	e009      	b.n	440c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    43f8:	4243      	negs	r3, r0
    43fa:	e017      	b.n	442c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    43fc:	68ea      	ldr	r2, [r5, #12]
    43fe:	7013      	strb	r3, [r2, #0]
			}
			dev->state->initialized = true;
    4400:	68ea      	ldr	r2, [r5, #12]
    4402:	7853      	ldrb	r3, [r2, #1]
    4404:	f043 0301 	orr.w	r3, r3, #1
    4408:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    440a:	3408      	adds	r4, #8
    440c:	1c73      	adds	r3, r6, #1
    440e:	4a0b      	ldr	r2, [pc, #44]	; (443c <z_sys_init_run_level+0x50>)
    4410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4414:	42a3      	cmp	r3, r4
    4416:	d910      	bls.n	443a <z_sys_init_run_level+0x4e>
		const struct device *dev = entry->dev;
    4418:	6865      	ldr	r5, [r4, #4]
		if (dev != NULL) {
    441a:	b15d      	cbz	r5, 4434 <z_sys_init_run_level+0x48>
			int rc = entry->init_fn.dev(dev);
    441c:	6823      	ldr	r3, [r4, #0]
    441e:	4628      	mov	r0, r5
    4420:	4798      	blx	r3
			if (rc != 0) {
    4422:	4603      	mov	r3, r0
    4424:	2800      	cmp	r0, #0
    4426:	d0eb      	beq.n	4400 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    4428:	2800      	cmp	r0, #0
    442a:	dbe5      	blt.n	43f8 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    442c:	2bff      	cmp	r3, #255	; 0xff
    442e:	dde5      	ble.n	43fc <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    4430:	23ff      	movs	r3, #255	; 0xff
    4432:	e7e3      	b.n	43fc <z_sys_init_run_level+0x10>
			if (rc == 0) {
				/* Run automatic device runtime enablement */
				(void)pm_device_runtime_auto_enable(dev);
			}
		} else {
			(void)entry->init_fn.sys();
    4434:	6823      	ldr	r3, [r4, #0]
    4436:	4798      	blx	r3
    4438:	e7e7      	b.n	440a <z_sys_init_run_level+0x1e>
		}
	}
}
    443a:	bd70      	pop	{r4, r5, r6, pc}
    443c:	000095a8 	.word	0x000095a8

00004440 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    4440:	b510      	push	{r4, lr}
    4442:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    4444:	23b0      	movs	r3, #176	; 0xb0
    4446:	4c11      	ldr	r4, [pc, #68]	; (448c <init_idle_thread+0x4c>)
    4448:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    444c:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4450:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4454:	4b0e      	ldr	r3, [pc, #56]	; (4490 <init_idle_thread+0x50>)
    4456:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	z_setup_new_thread(thread, stack,
    445a:	4a0e      	ldr	r2, [pc, #56]	; (4494 <init_idle_thread+0x54>)
    445c:	9205      	str	r2, [sp, #20]
    445e:	2201      	movs	r2, #1
    4460:	9204      	str	r2, [sp, #16]
    4462:	220f      	movs	r2, #15
    4464:	9203      	str	r2, [sp, #12]
    4466:	2200      	movs	r2, #0
    4468:	9202      	str	r2, [sp, #8]
    446a:	9201      	str	r2, [sp, #4]
    446c:	9300      	str	r3, [sp, #0]
    446e:	4b0a      	ldr	r3, [pc, #40]	; (4498 <init_idle_thread+0x58>)
    4470:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4474:	4909      	ldr	r1, [pc, #36]	; (449c <init_idle_thread+0x5c>)
    4476:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
    447a:	4620      	mov	r0, r4
    447c:	f000 f906 	bl	468c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4480:	7b63      	ldrb	r3, [r4, #13]
    4482:	f023 0304 	bic.w	r3, r3, #4
    4486:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    4488:	b006      	add	sp, #24
    448a:	bd10      	pop	{r4, pc}
    448c:	20000b38 	.word	0x20000b38
    4490:	200017b0 	.word	0x200017b0
    4494:	00009598 	.word	0x00009598
    4498:	000047e9 	.word	0x000047e9
    449c:	20002080 	.word	0x20002080

000044a0 <bg_thread_main>:
{
    44a0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    44a2:	4b0a      	ldr	r3, [pc, #40]	; (44cc <bg_thread_main+0x2c>)
    44a4:	2201      	movs	r2, #1
    44a6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    44a8:	2003      	movs	r0, #3
    44aa:	f7ff ff9f 	bl	43ec <z_sys_init_run_level>
	boot_banner();
    44ae:	f001 f8cd 	bl	564c <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    44b2:	2004      	movs	r0, #4
    44b4:	f7ff ff9a 	bl	43ec <z_sys_init_run_level>
	z_init_static_threads();
    44b8:	f000 f94c 	bl	4754 <z_init_static_threads>
	(void)main();
    44bc:	f7fc fa8a 	bl	9d4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    44c0:	4a03      	ldr	r2, [pc, #12]	; (44d0 <bg_thread_main+0x30>)
    44c2:	7b13      	ldrb	r3, [r2, #12]
    44c4:	f023 0301 	bic.w	r3, r3, #1
    44c8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    44ca:	bd08      	pop	{r3, pc}
    44cc:	20001802 	.word	0x20001802
    44d0:	20000be8 	.word	0x20000be8

000044d4 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    44d4:	b508      	push	{r3, lr}
    44d6:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    44d8:	4a01      	ldr	r2, [pc, #4]	; (44e0 <switch_to_main_thread+0xc>)
    44da:	4802      	ldr	r0, [pc, #8]	; (44e4 <switch_to_main_thread+0x10>)
    44dc:	f7fd f974 	bl	17c8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    44e0:	000044a1 	.word	0x000044a1
    44e4:	20000be8 	.word	0x20000be8

000044e8 <z_bss_zero>:
{
    44e8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    44ea:	4803      	ldr	r0, [pc, #12]	; (44f8 <z_bss_zero+0x10>)
    44ec:	4a03      	ldr	r2, [pc, #12]	; (44fc <z_bss_zero+0x14>)
    44ee:	1a12      	subs	r2, r2, r0
    44f0:	2100      	movs	r1, #0
    44f2:	f003 ff4a 	bl	838a <z_early_memset>
}
    44f6:	bd08      	pop	{r3, pc}
    44f8:	20000b18 	.word	0x20000b18
    44fc:	20001804 	.word	0x20001804

00004500 <z_init_cpu>:
{
    4500:	b510      	push	{r4, lr}
    4502:	4604      	mov	r4, r0
	init_idle_thread(id);
    4504:	f7ff ff9c 	bl	4440 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4508:	23b0      	movs	r3, #176	; 0xb0
    450a:	490b      	ldr	r1, [pc, #44]	; (4538 <z_init_cpu+0x38>)
    450c:	fb03 1104 	mla	r1, r3, r4, r1
    4510:	4a0a      	ldr	r2, [pc, #40]	; (453c <z_init_cpu+0x3c>)
    4512:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4516:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    451a:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    451c:	741c      	strb	r4, [r3, #16]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    451e:	eb04 1144 	add.w	r1, r4, r4, lsl #5
    4522:	4b07      	ldr	r3, [pc, #28]	; (4540 <z_init_cpu+0x40>)
    4524:	eb03 1381 	add.w	r3, r3, r1, lsl #6
    4528:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
    452c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    4530:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    4534:	6053      	str	r3, [r2, #4]
}
    4536:	bd10      	pop	{r4, pc}
    4538:	20000b38 	.word	0x20000b38
    453c:	200017b0 	.word	0x200017b0
    4540:	20001840 	.word	0x20001840

00004544 <prepare_multithreading>:
{
    4544:	b570      	push	{r4, r5, r6, lr}
    4546:	b086      	sub	sp, #24
	z_sched_init();
    4548:	f000 fd7a 	bl	5040 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    454c:	4d10      	ldr	r5, [pc, #64]	; (4590 <prepare_multithreading+0x4c>)
    454e:	4b11      	ldr	r3, [pc, #68]	; (4594 <prepare_multithreading+0x50>)
    4550:	619d      	str	r5, [r3, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4552:	4b11      	ldr	r3, [pc, #68]	; (4598 <prepare_multithreading+0x54>)
    4554:	9305      	str	r3, [sp, #20]
    4556:	2301      	movs	r3, #1
    4558:	9304      	str	r3, [sp, #16]
    455a:	2400      	movs	r4, #0
    455c:	9403      	str	r4, [sp, #12]
    455e:	9402      	str	r4, [sp, #8]
    4560:	9401      	str	r4, [sp, #4]
    4562:	9400      	str	r4, [sp, #0]
    4564:	4b0d      	ldr	r3, [pc, #52]	; (459c <prepare_multithreading+0x58>)
    4566:	f44f 6280 	mov.w	r2, #1024	; 0x400
    456a:	490d      	ldr	r1, [pc, #52]	; (45a0 <prepare_multithreading+0x5c>)
    456c:	4628      	mov	r0, r5
    456e:	f000 f88d 	bl	468c <z_setup_new_thread>
    4572:	4606      	mov	r6, r0
    4574:	7b6b      	ldrb	r3, [r5, #13]
    4576:	f023 0304 	bic.w	r3, r3, #4
    457a:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    457c:	4628      	mov	r0, r5
    457e:	f004 f867 	bl	8650 <z_ready_thread>
	z_init_cpu(0);
    4582:	4620      	mov	r0, r4
    4584:	f7ff ffbc 	bl	4500 <z_init_cpu>
}
    4588:	4630      	mov	r0, r6
    458a:	b006      	add	sp, #24
    458c:	bd70      	pop	{r4, r5, r6, pc}
    458e:	bf00      	nop
    4590:	20000be8 	.word	0x20000be8
    4594:	200017b0 	.word	0x200017b0
    4598:	000095a0 	.word	0x000095a0
    459c:	000044a1 	.word	0x000044a1
    45a0:	20002200 	.word	0x20002200

000045a4 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    45a4:	b500      	push	{lr}
    45a6:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    45a8:	2000      	movs	r0, #0
    45aa:	f7ff ff1f 	bl	43ec <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    45ae:	4b1d      	ldr	r3, [pc, #116]	; (4624 <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    45b0:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    45b4:	4c1c      	ldr	r4, [pc, #112]	; (4628 <z_cstart+0x84>)
    45b6:	6963      	ldr	r3, [r4, #20]
    45b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    45bc:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    45be:	23e0      	movs	r3, #224	; 0xe0
    45c0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    45c4:	2500      	movs	r5, #0
    45c6:	77e5      	strb	r5, [r4, #31]
    45c8:	7625      	strb	r5, [r4, #24]
    45ca:	7665      	strb	r5, [r4, #25]
    45cc:	76a5      	strb	r5, [r4, #26]
    45ce:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    45d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    45d4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    45d8:	6263      	str	r3, [r4, #36]	; 0x24
    45da:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    45de:	f7fd fac5 	bl	1b6c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    45e2:	f7fc ffe3 	bl	15ac <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    45e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    45ea:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    45ec:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    45ee:	f7fd fbdf 	bl	1db0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    45f2:	f7fd fb6f 	bl	1cd4 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    45f6:	2401      	movs	r4, #1
    45f8:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    45fc:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    4600:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    4602:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    4604:	9529      	str	r5, [sp, #164]	; 0xa4

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    4606:	4b09      	ldr	r3, [pc, #36]	; (462c <z_cstart+0x88>)
    4608:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    460c:	f7ff fedc 	bl	43c8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    4610:	4620      	mov	r0, r4
    4612:	f7ff feeb 	bl	43ec <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    4616:	2002      	movs	r0, #2
    4618:	f7ff fee8 	bl	43ec <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    461c:	f7ff ff92 	bl	4544 <prepare_multithreading>
    4620:	f7ff ff58 	bl	44d4 <switch_to_main_thread>
    4624:	20002080 	.word	0x20002080
    4628:	e000ed00 	.word	0xe000ed00
    462c:	200017b0 	.word	0x200017b0

00004630 <z_thread_monitor_exit>:
	__asm__ volatile(
    4630:	f04f 0320 	mov.w	r3, #32
    4634:	f3ef 8111 	mrs	r1, BASEPRI
    4638:	f383 8812 	msr	BASEPRI_MAX, r3
    463c:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    4640:	4b0a      	ldr	r3, [pc, #40]	; (466c <z_thread_monitor_exit+0x3c>)
    4642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4644:	4283      	cmp	r3, r0
    4646:	d104      	bne.n	4652 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    4648:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    464a:	4b08      	ldr	r3, [pc, #32]	; (466c <z_thread_monitor_exit+0x3c>)
    464c:	625a      	str	r2, [r3, #36]	; 0x24
    464e:	e007      	b.n	4660 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    4650:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    4652:	b113      	cbz	r3, 465a <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    4654:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    4656:	4282      	cmp	r2, r0
    4658:	d1fa      	bne.n	4650 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    465a:	b10b      	cbz	r3, 4660 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    465c:	6f02      	ldr	r2, [r0, #112]	; 0x70
    465e:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    4660:	f381 8811 	msr	BASEPRI, r1
    4664:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    4668:	4770      	bx	lr
    466a:	bf00      	nop
    466c:	200017b0 	.word	0x200017b0

00004670 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    4670:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4672:	ea53 0102 	orrs.w	r1, r3, r2
    4676:	d102      	bne.n	467e <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    4678:	f003 fea8 	bl	83cc <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    467c:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    467e:	4902      	ldr	r1, [pc, #8]	; (4688 <schedule_new_thread+0x18>)
    4680:	3018      	adds	r0, #24
    4682:	f000 fe1b 	bl	52bc <z_add_timeout>
    4686:	e7f9      	b.n	467c <schedule_new_thread+0xc>
    4688:	000086dd 	.word	0x000086dd

0000468c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    468c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4690:	b085      	sub	sp, #20
    4692:	4604      	mov	r4, r0
    4694:	460f      	mov	r7, r1
    4696:	4615      	mov	r5, r2
    4698:	461e      	mov	r6, r3
    469a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    469e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    46a2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    46a6:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    46aa:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    46ae:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    46b0:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    46b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    46b4:	2204      	movs	r2, #4
    46b6:	9911      	ldr	r1, [sp, #68]	; 0x44
    46b8:	f003 fe8c 	bl	83d4 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    46bc:	462a      	mov	r2, r5
    46be:	4639      	mov	r1, r7
    46c0:	4620      	mov	r0, r4
    46c2:	f003 fe6a 	bl	839a <setup_thread_stack>
    46c6:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    46c8:	f8cd 8008 	str.w	r8, [sp, #8]
    46cc:	f8cd 9004 	str.w	r9, [sp, #4]
    46d0:	f8cd a000 	str.w	sl, [sp]
    46d4:	4633      	mov	r3, r6
    46d6:	4602      	mov	r2, r0
    46d8:	4639      	mov	r1, r7
    46da:	4620      	mov	r0, r4
    46dc:	f7fd f82e 	bl	173c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    46e0:	2300      	movs	r3, #0
    46e2:	6563      	str	r3, [r4, #84]	; 0x54
#endif
#ifdef CONFIG_EVENTS
	new_thread->no_wake_on_timeout = false;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    46e4:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    46e6:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    46ea:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    46ee:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    46f2:	f04f 0320 	mov.w	r3, #32
    46f6:	f3ef 8211 	mrs	r2, BASEPRI
    46fa:	f383 8812 	msr	BASEPRI_MAX, r3
    46fe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    4702:	4b13      	ldr	r3, [pc, #76]	; (4750 <z_setup_new_thread+0xc4>)
    4704:	6a59      	ldr	r1, [r3, #36]	; 0x24
    4706:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    4708:	625c      	str	r4, [r3, #36]	; 0x24
	__asm__ volatile(
    470a:	f382 8811 	msr	BASEPRI, r2
    470e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    4712:	f1bb 0f00 	cmp.w	fp, #0
    4716:	d013      	beq.n	4740 <z_setup_new_thread+0xb4>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    4718:	221f      	movs	r2, #31
    471a:	4659      	mov	r1, fp
    471c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    4720:	f004 f9ff 	bl	8b22 <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    4724:	2300      	movs	r3, #0
    4726:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    472a:	4b09      	ldr	r3, [pc, #36]	; (4750 <z_setup_new_thread+0xc4>)
    472c:	689b      	ldr	r3, [r3, #8]
    472e:	b15b      	cbz	r3, 4748 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    4730:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    4734:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    4738:	4628      	mov	r0, r5
    473a:	b005      	add	sp, #20
    473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    4740:	2300      	movs	r3, #0
    4742:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    4746:	e7f0      	b.n	472a <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    4748:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    474c:	e7f4      	b.n	4738 <z_setup_new_thread+0xac>
    474e:	bf00      	nop
    4750:	200017b0 	.word	0x200017b0

00004754 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    4754:	b530      	push	{r4, r5, lr}
    4756:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    4758:	4c21      	ldr	r4, [pc, #132]	; (47e0 <z_init_static_threads+0x8c>)
    475a:	e014      	b.n	4786 <z_init_static_threads+0x32>
		z_setup_new_thread(
    475c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    475e:	9305      	str	r3, [sp, #20]
    4760:	6a23      	ldr	r3, [r4, #32]
    4762:	9304      	str	r3, [sp, #16]
    4764:	69e3      	ldr	r3, [r4, #28]
    4766:	9303      	str	r3, [sp, #12]
    4768:	69a3      	ldr	r3, [r4, #24]
    476a:	9302      	str	r3, [sp, #8]
    476c:	6963      	ldr	r3, [r4, #20]
    476e:	9301      	str	r3, [sp, #4]
    4770:	6923      	ldr	r3, [r4, #16]
    4772:	9300      	str	r3, [sp, #0]
    4774:	68e3      	ldr	r3, [r4, #12]
    4776:	68a2      	ldr	r2, [r4, #8]
    4778:	6861      	ldr	r1, [r4, #4]
    477a:	6820      	ldr	r0, [r4, #0]
    477c:	f7ff ff86 	bl	468c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    4780:	6823      	ldr	r3, [r4, #0]
    4782:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4784:	342c      	adds	r4, #44	; 0x2c
    4786:	4b17      	ldr	r3, [pc, #92]	; (47e4 <z_init_static_threads+0x90>)
    4788:	429c      	cmp	r4, r3
    478a:	d3e7      	bcc.n	475c <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    478c:	f000 fa1a 	bl	4bc4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4790:	4c13      	ldr	r4, [pc, #76]	; (47e0 <z_init_static_threads+0x8c>)
    4792:	e000      	b.n	4796 <z_init_static_threads+0x42>
    4794:	342c      	adds	r4, #44	; 0x2c
    4796:	4b13      	ldr	r3, [pc, #76]	; (47e4 <z_init_static_threads+0x90>)
    4798:	429c      	cmp	r4, r3
    479a:	d21c      	bcs.n	47d6 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    479c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    479e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    47a2:	d0f7      	beq.n	4794 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    47a4:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    47a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    47aa:	17c1      	asrs	r1, r0, #31
    47ac:	03c9      	lsls	r1, r1, #15
    47ae:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    47b2:	03c0      	lsls	r0, r0, #15
    47b4:	f240 33e7 	movw	r3, #999	; 0x3e7
    47b8:	18c0      	adds	r0, r0, r3
    47ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    47be:	f04f 0300 	mov.w	r3, #0
    47c2:	f141 0100 	adc.w	r1, r1, #0
    47c6:	f7fb fcdb 	bl	180 <__aeabi_uldivmod>
    47ca:	4602      	mov	r2, r0
    47cc:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    47ce:	4628      	mov	r0, r5
    47d0:	f7ff ff4e 	bl	4670 <schedule_new_thread>
    47d4:	e7de      	b.n	4794 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    47d6:	f000 fbe1 	bl	4f9c <k_sched_unlock>
}
    47da:	b007      	add	sp, #28
    47dc:	bd30      	pop	{r4, r5, pc}
    47de:	bf00      	nop
    47e0:	00008f68 	.word	0x00008f68
    47e4:	00008f68 	.word	0x00008f68

000047e8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    47e8:	b508      	push	{r3, lr}
    47ea:	e001      	b.n	47f0 <idle+0x8>
	arch_cpu_idle();
    47ec:	f7fc fee4 	bl	15b8 <arch_cpu_idle>
	__asm__ volatile(
    47f0:	f04f 0220 	mov.w	r2, #32
    47f4:	f3ef 8311 	mrs	r3, BASEPRI
    47f8:	f382 8812 	msr	BASEPRI_MAX, r2
    47fc:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4800:	f004 f864 	bl	88cc <z_get_next_timeout_expiry>
    4804:	4b05      	ldr	r3, [pc, #20]	; (481c <idle+0x34>)
    4806:	6158      	str	r0, [r3, #20]
	return !z_sys_post_kernel;
    4808:	4b05      	ldr	r3, [pc, #20]	; (4820 <idle+0x38>)
    480a:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    480c:	2b00      	cmp	r3, #0
    480e:	d0ed      	beq.n	47ec <idle+0x4>
    4810:	f7fc fdc4 	bl	139c <pm_system_suspend>
    4814:	2800      	cmp	r0, #0
    4816:	d1eb      	bne.n	47f0 <idle+0x8>
    4818:	e7e8      	b.n	47ec <idle+0x4>
    481a:	bf00      	nop
    481c:	200017b0 	.word	0x200017b0
    4820:	20001802 	.word	0x20001802

00004824 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4828:	b082      	sub	sp, #8
    482a:	4604      	mov	r4, r0
    482c:	461e      	mov	r6, r3
    482e:	f04f 0320 	mov.w	r3, #32
    4832:	f3ef 8511 	mrs	r5, BASEPRI
    4836:	f383 8812 	msr	BASEPRI_MAX, r3
    483a:	f3bf 8f6f 	isb	sy
    483e:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4840:	68c1      	ldr	r1, [r0, #12]
    4842:	b999      	cbnz	r1, 486c <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    4844:	2900      	cmp	r1, #0
    4846:	d151      	bne.n	48ec <z_impl_k_mutex_lock+0xc8>
    4848:	4a36      	ldr	r2, [pc, #216]	; (4924 <z_impl_k_mutex_lock+0x100>)
    484a:	6892      	ldr	r2, [r2, #8]
    484c:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4850:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    4852:	3101      	adds	r1, #1
    4854:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    4856:	4a33      	ldr	r2, [pc, #204]	; (4924 <z_impl_k_mutex_lock+0x100>)
    4858:	6892      	ldr	r2, [r2, #8]
    485a:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    485c:	f383 8811 	msr	BASEPRI, r3
    4860:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    4864:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4866:	b002      	add	sp, #8
    4868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    486c:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    486e:	6880      	ldr	r0, [r0, #8]
    4870:	4a2c      	ldr	r2, [pc, #176]	; (4924 <z_impl_k_mutex_lock+0x100>)
    4872:	6892      	ldr	r2, [r2, #8]
    4874:	4290      	cmp	r0, r2
    4876:	d0e5      	beq.n	4844 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4878:	ea56 0107 	orrs.w	r1, r6, r7
    487c:	d038      	beq.n	48f0 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
    487e:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4882:	4641      	mov	r1, r8
    4884:	f992 000e 	ldrsb.w	r0, [r2, #14]
    4888:	f003 fdb5 	bl	83f6 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    488c:	4580      	cmp	r8, r0
    488e:	dc36      	bgt.n	48fe <z_impl_k_mutex_lock+0xda>
	bool resched = false;
    4890:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4894:	9700      	str	r7, [sp, #0]
    4896:	9601      	str	r6, [sp, #4]
    4898:	4622      	mov	r2, r4
    489a:	4629      	mov	r1, r5
    489c:	4822      	ldr	r0, [pc, #136]	; (4928 <z_impl_k_mutex_lock+0x104>)
    489e:	f000 fac9 	bl	4e34 <z_pend_curr>
	if (got_mutex == 0) {
    48a2:	2800      	cmp	r0, #0
    48a4:	d0df      	beq.n	4866 <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    48a6:	f04f 0320 	mov.w	r3, #32
    48aa:	f3ef 8511 	mrs	r5, BASEPRI
    48ae:	f383 8812 	msr	BASEPRI_MAX, r3
    48b2:	f3bf 8f6f 	isb	sy
    48b6:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
    48b8:	68a3      	ldr	r3, [r4, #8]
    48ba:	b343      	cbz	r3, 490e <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    48bc:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48be:	429c      	cmp	r4, r3
    48c0:	d023      	beq.n	490a <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    48c2:	b313      	cbz	r3, 490a <z_impl_k_mutex_lock+0xe6>
    48c4:	6921      	ldr	r1, [r4, #16]
    48c6:	f993 000e 	ldrsb.w	r0, [r3, #14]
    48ca:	f003 fd94 	bl	83f6 <new_prio_for_inheritance>
    48ce:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    48d0:	4620      	mov	r0, r4
    48d2:	f003 fd9b 	bl	840c <adjust_owner_prio>
    48d6:	b9e8      	cbnz	r0, 4914 <z_impl_k_mutex_lock+0xf0>
    48d8:	f1b8 0f00 	cmp.w	r8, #0
    48dc:	d11a      	bne.n	4914 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
    48de:	f386 8811 	msr	BASEPRI, r6
    48e2:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    48e6:	f06f 000a 	mvn.w	r0, #10
    48ea:	e7bc      	b.n	4866 <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    48ec:	6922      	ldr	r2, [r4, #16]
    48ee:	e7af      	b.n	4850 <z_impl_k_mutex_lock+0x2c>
    48f0:	f385 8811 	msr	BASEPRI, r5
    48f4:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    48f8:	f06f 000f 	mvn.w	r0, #15
    48fc:	e7b3      	b.n	4866 <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    48fe:	4601      	mov	r1, r0
    4900:	4620      	mov	r0, r4
    4902:	f003 fd83 	bl	840c <adjust_owner_prio>
    4906:	4680      	mov	r8, r0
    4908:	e7c4      	b.n	4894 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    490a:	6921      	ldr	r1, [r4, #16]
    490c:	e7e0      	b.n	48d0 <z_impl_k_mutex_lock+0xac>
	if (resched) {
    490e:	f1b8 0f00 	cmp.w	r8, #0
    4912:	d0e4      	beq.n	48de <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
    4914:	4629      	mov	r1, r5
    4916:	4804      	ldr	r0, [pc, #16]	; (4928 <z_impl_k_mutex_lock+0x104>)
    4918:	f000 f93e 	bl	4b98 <z_reschedule>
	return -EAGAIN;
    491c:	f06f 000a 	mvn.w	r0, #10
    4920:	e7a1      	b.n	4866 <z_impl_k_mutex_lock+0x42>
    4922:	bf00      	nop
    4924:	200017b0 	.word	0x200017b0
    4928:	200017d8 	.word	0x200017d8

0000492c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    492c:	6883      	ldr	r3, [r0, #8]
    492e:	b38b      	cbz	r3, 4994 <z_impl_k_mutex_unlock+0x68>
{
    4930:	b570      	push	{r4, r5, r6, lr}
    4932:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4934:	4a1a      	ldr	r2, [pc, #104]	; (49a0 <z_impl_k_mutex_unlock+0x74>)
    4936:	6892      	ldr	r2, [r2, #8]
    4938:	4293      	cmp	r3, r2
    493a:	d12e      	bne.n	499a <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    493c:	68c3      	ldr	r3, [r0, #12]
    493e:	2b01      	cmp	r3, #1
    4940:	d903      	bls.n	494a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    4942:	3b01      	subs	r3, #1
    4944:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    4946:	2000      	movs	r0, #0
}
    4948:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    494a:	f04f 0320 	mov.w	r3, #32
    494e:	f3ef 8511 	mrs	r5, BASEPRI
    4952:	f383 8812 	msr	BASEPRI_MAX, r3
    4956:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    495a:	6901      	ldr	r1, [r0, #16]
    495c:	f003 fd56 	bl	840c <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4960:	4620      	mov	r0, r4
    4962:	f003 ff2b 	bl	87bc <z_unpend_first_thread>
	mutex->owner = new_owner;
    4966:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4968:	b168      	cbz	r0, 4986 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    496a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    496e:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4970:	2400      	movs	r4, #0
    4972:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    4976:	f003 fe6b 	bl	8650 <z_ready_thread>
		z_reschedule(&lock, key);
    497a:	4629      	mov	r1, r5
    497c:	4809      	ldr	r0, [pc, #36]	; (49a4 <z_impl_k_mutex_unlock+0x78>)
    497e:	f000 f90b 	bl	4b98 <z_reschedule>
	return 0;
    4982:	4620      	mov	r0, r4
    4984:	e7e0      	b.n	4948 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    4986:	2000      	movs	r0, #0
    4988:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    498a:	f385 8811 	msr	BASEPRI, r5
    498e:	f3bf 8f6f 	isb	sy
    4992:	e7d9      	b.n	4948 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    4994:	f06f 0015 	mvn.w	r0, #21
}
    4998:	4770      	bx	lr
		return -EPERM;
    499a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    499e:	e7d3      	b.n	4948 <z_impl_k_mutex_unlock+0x1c>
    49a0:	200017b0 	.word	0x200017b0
    49a4:	200017d8 	.word	0x200017d8

000049a8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    49a8:	b510      	push	{r4, lr}
    49aa:	b082      	sub	sp, #8
    49ac:	4684      	mov	ip, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    49ae:	4686      	mov	lr, r0
	__asm__ volatile(
    49b0:	f04f 0020 	mov.w	r0, #32
    49b4:	f3ef 8111 	mrs	r1, BASEPRI
    49b8:	f380 8812 	msr	BASEPRI_MAX, r0
    49bc:	f3bf 8f6f 	isb	sy
    49c0:	460c      	mov	r4, r1
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    49c2:	f85e 0b08 	ldr.w	r0, [lr], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    49c6:	b1a0      	cbz	r0, 49f2 <z_impl_k_queue_get+0x4a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    49c8:	6803      	ldr	r3, [r0, #0]
    49ca:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
    49ce:	f8cc 3000 	str.w	r3, [ip]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
    49d2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    49d6:	4290      	cmp	r0, r2
    49d8:	d008      	beq.n	49ec <z_impl_k_queue_get+0x44>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    49da:	2101      	movs	r1, #1
    49dc:	f003 fda0 	bl	8520 <z_queue_node_peek>
	__asm__ volatile(
    49e0:	f384 8811 	msr	BASEPRI, r4
    49e4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    49e8:	b002      	add	sp, #8
    49ea:	bd10      	pop	{r4, pc}
	list->tail = node;
    49ec:	f8cc 3004 	str.w	r3, [ip, #4]
}
    49f0:	e7f3      	b.n	49da <z_impl_k_queue_get+0x32>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    49f2:	ea53 0002 	orrs.w	r0, r3, r2
    49f6:	d00a      	beq.n	4a0e <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    49f8:	9200      	str	r2, [sp, #0]
    49fa:	9301      	str	r3, [sp, #4]
    49fc:	4672      	mov	r2, lr
    49fe:	4670      	mov	r0, lr
    4a00:	f000 fa18 	bl	4e34 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    4a04:	b948      	cbnz	r0, 4a1a <z_impl_k_queue_get+0x72>
    4a06:	4b06      	ldr	r3, [pc, #24]	; (4a20 <z_impl_k_queue_get+0x78>)
    4a08:	689b      	ldr	r3, [r3, #8]
    4a0a:	6958      	ldr	r0, [r3, #20]
    4a0c:	e7ec      	b.n	49e8 <z_impl_k_queue_get+0x40>
    4a0e:	f381 8811 	msr	BASEPRI, r1
    4a12:	f3bf 8f6f 	isb	sy
		return NULL;
    4a16:	2000      	movs	r0, #0
    4a18:	e7e6      	b.n	49e8 <z_impl_k_queue_get+0x40>
	return (ret != 0) ? NULL : _current->base.swap_data;
    4a1a:	2000      	movs	r0, #0
    4a1c:	e7e4      	b.n	49e8 <z_impl_k_queue_get+0x40>
    4a1e:	bf00      	nop
    4a20:	200017b0 	.word	0x200017b0

00004a24 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4a24:	b538      	push	{r3, r4, r5, lr}
    4a26:	4604      	mov	r4, r0
	__asm__ volatile(
    4a28:	f04f 0320 	mov.w	r3, #32
    4a2c:	f3ef 8511 	mrs	r5, BASEPRI
    4a30:	f383 8812 	msr	BASEPRI_MAX, r3
    4a34:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4a38:	f003 fec0 	bl	87bc <z_unpend_first_thread>

	if (thread != NULL) {
    4a3c:	b148      	cbz	r0, 4a52 <z_impl_k_sem_give+0x2e>
    4a3e:	2200      	movs	r2, #0
    4a40:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4a44:	f003 fe04 	bl	8650 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4a48:	4629      	mov	r1, r5
    4a4a:	4807      	ldr	r0, [pc, #28]	; (4a68 <z_impl_k_sem_give+0x44>)
    4a4c:	f000 f8a4 	bl	4b98 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4a50:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4a52:	68a3      	ldr	r3, [r4, #8]
    4a54:	68e2      	ldr	r2, [r4, #12]
    4a56:	4293      	cmp	r3, r2
    4a58:	d003      	beq.n	4a62 <z_impl_k_sem_give+0x3e>
    4a5a:	2201      	movs	r2, #1
    4a5c:	4413      	add	r3, r2
    4a5e:	60a3      	str	r3, [r4, #8]
}
    4a60:	e7f2      	b.n	4a48 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4a62:	2200      	movs	r2, #0
    4a64:	e7fa      	b.n	4a5c <z_impl_k_sem_give+0x38>
    4a66:	bf00      	nop
    4a68:	200017d8 	.word	0x200017d8

00004a6c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4a6c:	b510      	push	{r4, lr}
    4a6e:	b082      	sub	sp, #8
    4a70:	f04f 0420 	mov.w	r4, #32
    4a74:	f3ef 8111 	mrs	r1, BASEPRI
    4a78:	f384 8812 	msr	BASEPRI_MAX, r4
    4a7c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4a80:	6884      	ldr	r4, [r0, #8]
    4a82:	b144      	cbz	r4, 4a96 <z_impl_k_sem_take+0x2a>
		sem->count--;
    4a84:	3c01      	subs	r4, #1
    4a86:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4a88:	f381 8811 	msr	BASEPRI, r1
    4a8c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4a90:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4a92:	b002      	add	sp, #8
    4a94:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4a96:	ea53 0402 	orrs.w	r4, r3, r2
    4a9a:	d006      	beq.n	4aaa <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4a9c:	9200      	str	r2, [sp, #0]
    4a9e:	9301      	str	r3, [sp, #4]
    4aa0:	4602      	mov	r2, r0
    4aa2:	4805      	ldr	r0, [pc, #20]	; (4ab8 <z_impl_k_sem_take+0x4c>)
    4aa4:	f000 f9c6 	bl	4e34 <z_pend_curr>
	return ret;
    4aa8:	e7f3      	b.n	4a92 <z_impl_k_sem_take+0x26>
    4aaa:	f381 8811 	msr	BASEPRI, r1
    4aae:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4ab2:	f06f 000f 	mvn.w	r0, #15
    4ab6:	e7ec      	b.n	4a92 <z_impl_k_sem_take+0x26>
    4ab8:	200017d8 	.word	0x200017d8

00004abc <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4abc:	89c3      	ldrh	r3, [r0, #14]
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    4abe:	2b7f      	cmp	r3, #127	; 0x7f
    4ac0:	d811      	bhi.n	4ae6 <sliceable+0x2a>
	int ret = slice_ticks;
    4ac2:	4b0e      	ldr	r3, [pc, #56]	; (4afc <sliceable+0x40>)
    4ac4:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    4ac6:	b17b      	cbz	r3, 4ae8 <sliceable+0x2c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4ac8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4acc:	4b0c      	ldr	r3, [pc, #48]	; (4b00 <sliceable+0x44>)
    4ace:	681b      	ldr	r3, [r3, #0]
    4ad0:	429a      	cmp	r2, r3
    4ad2:	db0c      	blt.n	4aee <sliceable+0x32>
	uint8_t state = thread->base.thread_state;
    4ad4:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    4ad6:	f013 0f1f 	tst.w	r3, #31
    4ada:	d10a      	bne.n	4af2 <sliceable+0x36>
		&& !z_is_idle_thread_object(thread);
    4adc:	4b09      	ldr	r3, [pc, #36]	; (4b04 <sliceable+0x48>)
    4ade:	4298      	cmp	r0, r3
    4ae0:	d009      	beq.n	4af6 <sliceable+0x3a>
    4ae2:	2301      	movs	r3, #1
    4ae4:	e000      	b.n	4ae8 <sliceable+0x2c>
    4ae6:	2300      	movs	r3, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    4ae8:	f003 0001 	and.w	r0, r3, #1
    4aec:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    4aee:	2300      	movs	r3, #0
    4af0:	e7fa      	b.n	4ae8 <sliceable+0x2c>
    4af2:	2300      	movs	r3, #0
    4af4:	e7f8      	b.n	4ae8 <sliceable+0x2c>
    4af6:	2300      	movs	r3, #0
    4af8:	e7f6      	b.n	4ae8 <sliceable+0x2c>
    4afa:	bf00      	nop
    4afc:	200017e4 	.word	0x200017e4
    4b00:	200017e0 	.word	0x200017e0
    4b04:	20000b38 	.word	0x20000b38

00004b08 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    4b08:	4b04      	ldr	r3, [pc, #16]	; (4b1c <slice_timeout+0x14>)
    4b0a:	1ac0      	subs	r0, r0, r3
    4b0c:	10c0      	asrs	r0, r0, #3
    4b0e:	4b04      	ldr	r3, [pc, #16]	; (4b20 <slice_timeout+0x18>)
    4b10:	fb03 f000 	mul.w	r0, r3, r0

	slice_expired[cpu] = true;
    4b14:	4b03      	ldr	r3, [pc, #12]	; (4b24 <slice_timeout+0x1c>)
    4b16:	2201      	movs	r2, #1
    4b18:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    4b1a:	4770      	bx	lr
    4b1c:	20000c98 	.word	0x20000c98
    4b20:	aaaaaaab 	.word	0xaaaaaaab
    4b24:	200017dc 	.word	0x200017dc

00004b28 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4b2c:	bf08      	it	eq
    4b2e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    4b32:	d100      	bne.n	4b36 <add_thread_timeout+0xe>
    4b34:	4770      	bx	lr
{
    4b36:	b508      	push	{r3, lr}
    4b38:	4902      	ldr	r1, [pc, #8]	; (4b44 <add_thread_timeout+0x1c>)
    4b3a:	3018      	adds	r0, #24
    4b3c:	f000 fbbe 	bl	52bc <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    4b40:	bd08      	pop	{r3, pc}
    4b42:	bf00      	nop
    4b44:	000086dd 	.word	0x000086dd

00004b48 <z_reset_time_slice>:
{
    4b48:	b570      	push	{r4, r5, r6, lr}
    4b4a:	4605      	mov	r5, r0
	int cpu = _current_cpu->id;
    4b4c:	4b0d      	ldr	r3, [pc, #52]	; (4b84 <z_reset_time_slice+0x3c>)
    4b4e:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    4b50:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    4b54:	4c0c      	ldr	r4, [pc, #48]	; (4b88 <z_reset_time_slice+0x40>)
    4b56:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    4b5a:	4620      	mov	r0, r4
    4b5c:	f003 fe98 	bl	8890 <z_abort_timeout>
	slice_expired[cpu] = false;
    4b60:	4b0a      	ldr	r3, [pc, #40]	; (4b8c <z_reset_time_slice+0x44>)
    4b62:	2200      	movs	r2, #0
    4b64:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    4b66:	4628      	mov	r0, r5
    4b68:	f7ff ffa8 	bl	4abc <sliceable>
    4b6c:	b900      	cbnz	r0, 4b70 <z_reset_time_slice+0x28>
}
    4b6e:	bd70      	pop	{r4, r5, r6, pc}
	int ret = slice_ticks;
    4b70:	4b07      	ldr	r3, [pc, #28]	; (4b90 <z_reset_time_slice+0x48>)
    4b72:	681a      	ldr	r2, [r3, #0]
			      K_TICKS(slice_time(curr) - 1));
    4b74:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    4b76:	17d3      	asrs	r3, r2, #31
    4b78:	4906      	ldr	r1, [pc, #24]	; (4b94 <z_reset_time_slice+0x4c>)
    4b7a:	4620      	mov	r0, r4
    4b7c:	f000 fb9e 	bl	52bc <z_add_timeout>
}
    4b80:	e7f5      	b.n	4b6e <z_reset_time_slice+0x26>
    4b82:	bf00      	nop
    4b84:	200017b0 	.word	0x200017b0
    4b88:	20000c98 	.word	0x20000c98
    4b8c:	200017dc 	.word	0x200017dc
    4b90:	200017e4 	.word	0x200017e4
    4b94:	00004b09 	.word	0x00004b09

00004b98 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4b98:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    4b9a:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4b9c:	b959      	cbnz	r1, 4bb6 <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4b9e:	f3ef 8205 	mrs	r2, IPSR
    4ba2:	b942      	cbnz	r2, 4bb6 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    4ba4:	4a06      	ldr	r2, [pc, #24]	; (4bc0 <z_reschedule+0x28>)
    4ba6:	6990      	ldr	r0, [r2, #24]
	return new_thread != _current;
    4ba8:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    4baa:	4290      	cmp	r0, r2
    4bac:	d003      	beq.n	4bb6 <z_reschedule+0x1e>
	ret = arch_swap(key);
    4bae:	4608      	mov	r0, r1
    4bb0:	f7fc fd6c 	bl	168c <arch_swap>
		z_swap(lock, key);
    4bb4:	e003      	b.n	4bbe <z_reschedule+0x26>
    4bb6:	f383 8811 	msr	BASEPRI, r3
    4bba:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    4bbe:	bd08      	pop	{r3, pc}
    4bc0:	200017b0 	.word	0x200017b0

00004bc4 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    4bc4:	2300      	movs	r3, #0
	__asm__ volatile(
    4bc6:	f04f 0220 	mov.w	r2, #32
    4bca:	f3ef 8111 	mrs	r1, BASEPRI
    4bce:	f382 8812 	msr	BASEPRI_MAX, r2
    4bd2:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    4bd6:	e009      	b.n	4bec <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    4bd8:	4b06      	ldr	r3, [pc, #24]	; (4bf4 <k_sched_lock+0x30>)
    4bda:	689a      	ldr	r2, [r3, #8]
    4bdc:	7bd3      	ldrb	r3, [r2, #15]
    4bde:	3b01      	subs	r3, #1
    4be0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4be2:	f381 8811 	msr	BASEPRI, r1
    4be6:	f3bf 8f6f 	isb	sy
    4bea:	2301      	movs	r3, #1
    4bec:	2b00      	cmp	r3, #0
    4bee:	d0f3      	beq.n	4bd8 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4bf0:	4770      	bx	lr
    4bf2:	bf00      	nop
    4bf4:	200017b0 	.word	0x200017b0

00004bf8 <update_cache>:
{
    4bf8:	b538      	push	{r3, r4, r5, lr}
    4bfa:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    4bfc:	4810      	ldr	r0, [pc, #64]	; (4c40 <update_cache+0x48>)
    4bfe:	f003 fd20 	bl	8642 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4c02:	4605      	mov	r5, r0
    4c04:	b170      	cbz	r0, 4c24 <update_cache+0x2c>
	if (preempt_ok != 0) {
    4c06:	b984      	cbnz	r4, 4c2a <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    4c08:	4b0e      	ldr	r3, [pc, #56]	; (4c44 <update_cache+0x4c>)
    4c0a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4c0c:	7b5a      	ldrb	r2, [r3, #13]
    4c0e:	f012 0f1f 	tst.w	r2, #31
    4c12:	d10a      	bne.n	4c2a <update_cache+0x32>
	return node->next != NULL;
    4c14:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4c16:	b942      	cbnz	r2, 4c2a <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4c18:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    4c1a:	2a7f      	cmp	r2, #127	; 0x7f
    4c1c:	d905      	bls.n	4c2a <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    4c1e:	4a09      	ldr	r2, [pc, #36]	; (4c44 <update_cache+0x4c>)
    4c20:	6193      	str	r3, [r2, #24]
    4c22:	e00b      	b.n	4c3c <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4c24:	4b07      	ldr	r3, [pc, #28]	; (4c44 <update_cache+0x4c>)
    4c26:	68dd      	ldr	r5, [r3, #12]
    4c28:	e7ed      	b.n	4c06 <update_cache+0xe>
		if (thread != _current) {
    4c2a:	4b06      	ldr	r3, [pc, #24]	; (4c44 <update_cache+0x4c>)
    4c2c:	689b      	ldr	r3, [r3, #8]
    4c2e:	42ab      	cmp	r3, r5
    4c30:	d002      	beq.n	4c38 <update_cache+0x40>
			z_reset_time_slice(thread);
    4c32:	4628      	mov	r0, r5
    4c34:	f7ff ff88 	bl	4b48 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4c38:	4b02      	ldr	r3, [pc, #8]	; (4c44 <update_cache+0x4c>)
    4c3a:	619d      	str	r5, [r3, #24]
}
    4c3c:	bd38      	pop	{r3, r4, r5, pc}
    4c3e:	bf00      	nop
    4c40:	200017cc 	.word	0x200017cc
    4c44:	200017b0 	.word	0x200017b0

00004c48 <move_thread_to_end_of_prio_q>:
{
    4c48:	b538      	push	{r3, r4, r5, lr}
    4c4a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    4c4c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    4c4e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4c52:	2b00      	cmp	r3, #0
    4c54:	db0a      	blt.n	4c6c <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    4c56:	7b6b      	ldrb	r3, [r5, #13]
    4c58:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4c5c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    4c5e:	4b1b      	ldr	r3, [pc, #108]	; (4ccc <move_thread_to_end_of_prio_q+0x84>)
    4c60:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c64:	429c      	cmp	r4, r3
    4c66:	d110      	bne.n	4c8a <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c68:	2400      	movs	r4, #0
    4c6a:	e00e      	b.n	4c8a <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4c6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4c70:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4c72:	4601      	mov	r1, r0
    4c74:	4816      	ldr	r0, [pc, #88]	; (4cd0 <move_thread_to_end_of_prio_q+0x88>)
    4c76:	f003 fcb0 	bl	85da <z_priq_dumb_remove>
}
    4c7a:	e7ec      	b.n	4c56 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4c7c:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    4c7e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4c80:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4c82:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4c84:	6065      	str	r5, [r4, #4]
}
    4c86:	e017      	b.n	4cb8 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c88:	2400      	movs	r4, #0
    4c8a:	b16c      	cbz	r4, 4ca8 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4c8c:	4621      	mov	r1, r4
    4c8e:	4628      	mov	r0, r5
    4c90:	f003 fc65 	bl	855e <z_sched_prio_cmp>
    4c94:	2800      	cmp	r0, #0
    4c96:	dcf1      	bgt.n	4c7c <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4c98:	2c00      	cmp	r4, #0
    4c9a:	d0f6      	beq.n	4c8a <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    4c9c:	4b0b      	ldr	r3, [pc, #44]	; (4ccc <move_thread_to_end_of_prio_q+0x84>)
    4c9e:	6a1b      	ldr	r3, [r3, #32]
    4ca0:	429c      	cmp	r4, r3
    4ca2:	d0f1      	beq.n	4c88 <move_thread_to_end_of_prio_q+0x40>
    4ca4:	6824      	ldr	r4, [r4, #0]
    4ca6:	e7f0      	b.n	4c8a <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    4ca8:	4b08      	ldr	r3, [pc, #32]	; (4ccc <move_thread_to_end_of_prio_q+0x84>)
    4caa:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    4cac:	f103 011c 	add.w	r1, r3, #28
    4cb0:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4cb2:	606a      	str	r2, [r5, #4]
	tail->next = node;
    4cb4:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4cb6:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
    4cb8:	4b04      	ldr	r3, [pc, #16]	; (4ccc <move_thread_to_end_of_prio_q+0x84>)
    4cba:	6898      	ldr	r0, [r3, #8]
    4cbc:	42a8      	cmp	r0, r5
    4cbe:	bf14      	ite	ne
    4cc0:	2000      	movne	r0, #0
    4cc2:	2001      	moveq	r0, #1
    4cc4:	f7ff ff98 	bl	4bf8 <update_cache>
}
    4cc8:	bd38      	pop	{r3, r4, r5, pc}
    4cca:	bf00      	nop
    4ccc:	200017b0 	.word	0x200017b0
    4cd0:	200017cc 	.word	0x200017cc

00004cd4 <z_time_slice>:
{
    4cd4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4cd6:	f04f 0220 	mov.w	r2, #32
    4cda:	f3ef 8311 	mrs	r3, BASEPRI
    4cde:	f382 8812 	msr	BASEPRI_MAX, r2
    4ce2:	f3bf 8f6f 	isb	sy
    4ce6:	461d      	mov	r5, r3
	struct k_thread *curr = _current;
    4ce8:	4b14      	ldr	r3, [pc, #80]	; (4d3c <z_time_slice+0x68>)
    4cea:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    4cec:	4b14      	ldr	r3, [pc, #80]	; (4d40 <z_time_slice+0x6c>)
    4cee:	681b      	ldr	r3, [r3, #0]
    4cf0:	42a3      	cmp	r3, r4
    4cf2:	d017      	beq.n	4d24 <z_time_slice+0x50>
	pending_current = NULL;
    4cf4:	4b12      	ldr	r3, [pc, #72]	; (4d40 <z_time_slice+0x6c>)
    4cf6:	2200      	movs	r2, #0
    4cf8:	601a      	str	r2, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    4cfa:	4b10      	ldr	r3, [pc, #64]	; (4d3c <z_time_slice+0x68>)
    4cfc:	7c1b      	ldrb	r3, [r3, #16]
    4cfe:	4a11      	ldr	r2, [pc, #68]	; (4d44 <z_time_slice+0x70>)
    4d00:	5cd3      	ldrb	r3, [r2, r3]
    4d02:	b153      	cbz	r3, 4d1a <z_time_slice+0x46>
    4d04:	4620      	mov	r0, r4
    4d06:	f7ff fed9 	bl	4abc <sliceable>
    4d0a:	b130      	cbz	r0, 4d1a <z_time_slice+0x46>
	uint8_t state = thread->base.thread_state;
    4d0c:	7b63      	ldrb	r3, [r4, #13]
		if (!z_is_thread_prevented_from_running(curr)) {
    4d0e:	f013 0f1f 	tst.w	r3, #31
    4d12:	d00f      	beq.n	4d34 <z_time_slice+0x60>
		z_reset_time_slice(curr);
    4d14:	4620      	mov	r0, r4
    4d16:	f7ff ff17 	bl	4b48 <z_reset_time_slice>
	__asm__ volatile(
    4d1a:	f385 8811 	msr	BASEPRI, r5
    4d1e:	f3bf 8f6f 	isb	sy
}
    4d22:	bd38      	pop	{r3, r4, r5, pc}
		z_reset_time_slice(curr);
    4d24:	4620      	mov	r0, r4
    4d26:	f7ff ff0f 	bl	4b48 <z_reset_time_slice>
    4d2a:	f385 8811 	msr	BASEPRI, r5
    4d2e:	f3bf 8f6f 	isb	sy
		return;
    4d32:	e7f6      	b.n	4d22 <z_time_slice+0x4e>
			move_thread_to_end_of_prio_q(curr);
    4d34:	4620      	mov	r0, r4
    4d36:	f7ff ff87 	bl	4c48 <move_thread_to_end_of_prio_q>
    4d3a:	e7eb      	b.n	4d14 <z_time_slice+0x40>
    4d3c:	200017b0 	.word	0x200017b0
    4d40:	200017d8 	.word	0x200017d8
    4d44:	200017dc 	.word	0x200017dc

00004d48 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    4d48:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4d4a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4d4e:	2b00      	cmp	r3, #0
    4d50:	db33      	blt.n	4dba <ready_thread+0x72>
{
    4d52:	b570      	push	{r4, r5, r6, lr}
    4d54:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4d56:	f012 0f1f 	tst.w	r2, #31
    4d5a:	d101      	bne.n	4d60 <ready_thread+0x18>
	return node->next != NULL;
    4d5c:	6986      	ldr	r6, [r0, #24]
    4d5e:	b106      	cbz	r6, 4d62 <ready_thread+0x1a>
}
    4d60:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    4d62:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4d66:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    4d68:	4b14      	ldr	r3, [pc, #80]	; (4dbc <ready_thread+0x74>)
    4d6a:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d6e:	429d      	cmp	r5, r3
    4d70:	d108      	bne.n	4d84 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d72:	4635      	mov	r5, r6
    4d74:	e006      	b.n	4d84 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    4d76:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    4d78:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4d7a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    4d7c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4d7e:	606c      	str	r4, [r5, #4]
}
    4d80:	e017      	b.n	4db2 <ready_thread+0x6a>
    4d82:	4635      	mov	r5, r6
    4d84:	b16d      	cbz	r5, 4da2 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4d86:	4629      	mov	r1, r5
    4d88:	4620      	mov	r0, r4
    4d8a:	f003 fbe8 	bl	855e <z_sched_prio_cmp>
    4d8e:	2800      	cmp	r0, #0
    4d90:	dcf1      	bgt.n	4d76 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4d92:	2d00      	cmp	r5, #0
    4d94:	d0f6      	beq.n	4d84 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    4d96:	4b09      	ldr	r3, [pc, #36]	; (4dbc <ready_thread+0x74>)
    4d98:	6a1b      	ldr	r3, [r3, #32]
    4d9a:	429d      	cmp	r5, r3
    4d9c:	d0f1      	beq.n	4d82 <ready_thread+0x3a>
    4d9e:	682d      	ldr	r5, [r5, #0]
    4da0:	e7f0      	b.n	4d84 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    4da2:	4b06      	ldr	r3, [pc, #24]	; (4dbc <ready_thread+0x74>)
    4da4:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    4da6:	f103 011c 	add.w	r1, r3, #28
    4daa:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    4dac:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4dae:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4db0:	621c      	str	r4, [r3, #32]
		update_cache(0);
    4db2:	2000      	movs	r0, #0
    4db4:	f7ff ff20 	bl	4bf8 <update_cache>
}
    4db8:	e7d2      	b.n	4d60 <ready_thread+0x18>
    4dba:	4770      	bx	lr
    4dbc:	200017b0 	.word	0x200017b0

00004dc0 <z_sched_start>:
{
    4dc0:	b510      	push	{r4, lr}
	__asm__ volatile(
    4dc2:	f04f 0320 	mov.w	r3, #32
    4dc6:	f3ef 8411 	mrs	r4, BASEPRI
    4dca:	f383 8812 	msr	BASEPRI_MAX, r3
    4dce:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4dd2:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    4dd4:	f013 0f04 	tst.w	r3, #4
    4dd8:	d104      	bne.n	4de4 <z_sched_start+0x24>
	__asm__ volatile(
    4dda:	f384 8811 	msr	BASEPRI, r4
    4dde:	f3bf 8f6f 	isb	sy
}
    4de2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4de4:	f023 0304 	bic.w	r3, r3, #4
    4de8:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    4dea:	f7ff ffad 	bl	4d48 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4dee:	4621      	mov	r1, r4
    4df0:	4801      	ldr	r0, [pc, #4]	; (4df8 <z_sched_start+0x38>)
    4df2:	f7ff fed1 	bl	4b98 <z_reschedule>
    4df6:	e7f4      	b.n	4de2 <z_sched_start+0x22>
    4df8:	200017e8 	.word	0x200017e8

00004dfc <unready_thread>:
{
    4dfc:	b510      	push	{r4, lr}
    4dfe:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    4e00:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    4e02:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4e06:	2b00      	cmp	r3, #0
    4e08:	db08      	blt.n	4e1c <unready_thread+0x20>
	update_cache(thread == _current);
    4e0a:	4b08      	ldr	r3, [pc, #32]	; (4e2c <unready_thread+0x30>)
    4e0c:	6898      	ldr	r0, [r3, #8]
    4e0e:	42a0      	cmp	r0, r4
    4e10:	bf14      	ite	ne
    4e12:	2000      	movne	r0, #0
    4e14:	2001      	moveq	r0, #1
    4e16:	f7ff feef 	bl	4bf8 <update_cache>
}
    4e1a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4e1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4e20:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4e22:	4601      	mov	r1, r0
    4e24:	4802      	ldr	r0, [pc, #8]	; (4e30 <unready_thread+0x34>)
    4e26:	f003 fbd8 	bl	85da <z_priq_dumb_remove>
}
    4e2a:	e7ee      	b.n	4e0a <unready_thread+0xe>
    4e2c:	200017b0 	.word	0x200017b0
    4e30:	200017cc 	.word	0x200017cc

00004e34 <z_pend_curr>:
{
    4e34:	b510      	push	{r4, lr}
    4e36:	460c      	mov	r4, r1
    4e38:	4611      	mov	r1, r2
	pending_current = _current;
    4e3a:	480a      	ldr	r0, [pc, #40]	; (4e64 <z_pend_curr+0x30>)
    4e3c:	6882      	ldr	r2, [r0, #8]
    4e3e:	4b0a      	ldr	r3, [pc, #40]	; (4e68 <z_pend_curr+0x34>)
    4e40:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    4e42:	f04f 0220 	mov.w	r2, #32
    4e46:	f3ef 8311 	mrs	r3, BASEPRI
    4e4a:	f382 8812 	msr	BASEPRI_MAX, r2
    4e4e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    4e52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4e56:	6880      	ldr	r0, [r0, #8]
    4e58:	f003 fc86 	bl	8768 <pend_locked>
    4e5c:	4620      	mov	r0, r4
    4e5e:	f7fc fc15 	bl	168c <arch_swap>
}
    4e62:	bd10      	pop	{r4, pc}
    4e64:	200017b0 	.word	0x200017b0
    4e68:	200017d8 	.word	0x200017d8

00004e6c <z_set_prio>:
{
    4e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4e70:	4605      	mov	r5, r0
    4e72:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    4e74:	2300      	movs	r3, #0
    4e76:	f04f 0220 	mov.w	r2, #32
    4e7a:	f3ef 8611 	mrs	r6, BASEPRI
    4e7e:	f382 8812 	msr	BASEPRI_MAX, r2
    4e82:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    4e86:	4618      	mov	r0, r3
    4e88:	e029      	b.n	4ede <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    4e8a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    4e8c:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4e8e:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4e90:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4e92:	6065      	str	r5, [r4, #4]
}
    4e94:	e017      	b.n	4ec6 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4e96:	4644      	mov	r4, r8
    4e98:	b16c      	cbz	r4, 4eb6 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4e9a:	4621      	mov	r1, r4
    4e9c:	4628      	mov	r0, r5
    4e9e:	f003 fb5e 	bl	855e <z_sched_prio_cmp>
    4ea2:	2800      	cmp	r0, #0
    4ea4:	dcf1      	bgt.n	4e8a <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4ea6:	2c00      	cmp	r4, #0
    4ea8:	d0f6      	beq.n	4e98 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    4eaa:	4b1d      	ldr	r3, [pc, #116]	; (4f20 <z_set_prio+0xb4>)
    4eac:	6a1b      	ldr	r3, [r3, #32]
    4eae:	429c      	cmp	r4, r3
    4eb0:	d0f1      	beq.n	4e96 <z_set_prio+0x2a>
    4eb2:	6824      	ldr	r4, [r4, #0]
    4eb4:	e7f0      	b.n	4e98 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    4eb6:	4b1a      	ldr	r3, [pc, #104]	; (4f20 <z_set_prio+0xb4>)
    4eb8:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    4eba:	f103 011c 	add.w	r1, r3, #28
    4ebe:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4ec0:	606a      	str	r2, [r5, #4]
	tail->next = node;
    4ec2:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4ec4:	621d      	str	r5, [r3, #32]
			update_cache(1);
    4ec6:	2001      	movs	r0, #1
    4ec8:	f7ff fe96 	bl	4bf8 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4ecc:	2001      	movs	r0, #1
    4ece:	e001      	b.n	4ed4 <z_set_prio+0x68>
			thread->base.prio = prio;
    4ed0:	73af      	strb	r7, [r5, #14]
    4ed2:	2000      	movs	r0, #0
	__asm__ volatile(
    4ed4:	f386 8811 	msr	BASEPRI, r6
    4ed8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4edc:	2301      	movs	r3, #1
    4ede:	b9e3      	cbnz	r3, 4f1a <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    4ee0:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4ee2:	f013 0f1f 	tst.w	r3, #31
    4ee6:	d1f3      	bne.n	4ed0 <z_set_prio+0x64>
	return node->next != NULL;
    4ee8:	f8d5 8018 	ldr.w	r8, [r5, #24]
    4eec:	f1b8 0f00 	cmp.w	r8, #0
    4ef0:	d1ee      	bne.n	4ed0 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ef6:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4ef8:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4f24 <z_set_prio+0xb8>
    4efc:	4629      	mov	r1, r5
    4efe:	4648      	mov	r0, r9
    4f00:	f003 fb6b 	bl	85da <z_priq_dumb_remove>
				thread->base.prio = prio;
    4f04:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4f06:	7b6b      	ldrb	r3, [r5, #13]
    4f08:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4f0c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    4f0e:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f12:	454c      	cmp	r4, r9
    4f14:	d1c0      	bne.n	4e98 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4f16:	4644      	mov	r4, r8
    4f18:	e7be      	b.n	4e98 <z_set_prio+0x2c>
}
    4f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4f1e:	bf00      	nop
    4f20:	200017b0 	.word	0x200017b0
    4f24:	200017cc 	.word	0x200017cc

00004f28 <z_impl_k_thread_suspend>:
{
    4f28:	b538      	push	{r3, r4, r5, lr}
    4f2a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4f2c:	3018      	adds	r0, #24
    4f2e:	f003 fcaf 	bl	8890 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    4f32:	2300      	movs	r3, #0
	__asm__ volatile(
    4f34:	f04f 0220 	mov.w	r2, #32
    4f38:	f3ef 8511 	mrs	r5, BASEPRI
    4f3c:	f382 8812 	msr	BASEPRI_MAX, r2
    4f40:	f3bf 8f6f 	isb	sy
    4f44:	e010      	b.n	4f68 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4f46:	7b63      	ldrb	r3, [r4, #13]
    4f48:	f043 0310 	orr.w	r3, r3, #16
    4f4c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    4f4e:	4b11      	ldr	r3, [pc, #68]	; (4f94 <z_impl_k_thread_suspend+0x6c>)
    4f50:	6898      	ldr	r0, [r3, #8]
    4f52:	42a0      	cmp	r0, r4
    4f54:	bf14      	ite	ne
    4f56:	2000      	movne	r0, #0
    4f58:	2001      	moveq	r0, #1
    4f5a:	f7ff fe4d 	bl	4bf8 <update_cache>
	__asm__ volatile(
    4f5e:	f385 8811 	msr	BASEPRI, r5
    4f62:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4f66:	2301      	movs	r3, #1
    4f68:	b963      	cbnz	r3, 4f84 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    4f6a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    4f6c:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4f70:	2b00      	cmp	r3, #0
    4f72:	dae8      	bge.n	4f46 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4f74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4f78:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4f7a:	4621      	mov	r1, r4
    4f7c:	4806      	ldr	r0, [pc, #24]	; (4f98 <z_impl_k_thread_suspend+0x70>)
    4f7e:	f003 fb2c 	bl	85da <z_priq_dumb_remove>
}
    4f82:	e7e0      	b.n	4f46 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    4f84:	4b03      	ldr	r3, [pc, #12]	; (4f94 <z_impl_k_thread_suspend+0x6c>)
    4f86:	689b      	ldr	r3, [r3, #8]
    4f88:	42a3      	cmp	r3, r4
    4f8a:	d000      	beq.n	4f8e <z_impl_k_thread_suspend+0x66>
}
    4f8c:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    4f8e:	f003 fb18 	bl	85c2 <z_reschedule_unlocked>
}
    4f92:	e7fb      	b.n	4f8c <z_impl_k_thread_suspend+0x64>
    4f94:	200017b0 	.word	0x200017b0
    4f98:	200017cc 	.word	0x200017cc

00004f9c <k_sched_unlock>:

void k_sched_unlock(void)
{
    4f9c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    4f9e:	2300      	movs	r3, #0
	__asm__ volatile(
    4fa0:	f04f 0220 	mov.w	r2, #32
    4fa4:	f3ef 8411 	mrs	r4, BASEPRI
    4fa8:	f382 8812 	msr	BASEPRI_MAX, r2
    4fac:	f3bf 8f6f 	isb	sy
    4fb0:	e00c      	b.n	4fcc <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    4fb2:	4b09      	ldr	r3, [pc, #36]	; (4fd8 <k_sched_unlock+0x3c>)
    4fb4:	689a      	ldr	r2, [r3, #8]
    4fb6:	7bd3      	ldrb	r3, [r2, #15]
    4fb8:	3301      	adds	r3, #1
    4fba:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4fbc:	2000      	movs	r0, #0
    4fbe:	f7ff fe1b 	bl	4bf8 <update_cache>
	__asm__ volatile(
    4fc2:	f384 8811 	msr	BASEPRI, r4
    4fc6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4fca:	2301      	movs	r3, #1
    4fcc:	2b00      	cmp	r3, #0
    4fce:	d0f0      	beq.n	4fb2 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    4fd0:	f003 faf7 	bl	85c2 <z_reschedule_unlocked>
}
    4fd4:	bd10      	pop	{r4, pc}
    4fd6:	bf00      	nop
    4fd8:	200017b0 	.word	0x200017b0

00004fdc <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    4fdc:	7b43      	ldrb	r3, [r0, #13]
    4fde:	f013 0f08 	tst.w	r3, #8
    4fe2:	d12a      	bne.n	503a <end_thread+0x5e>
{
    4fe4:	b510      	push	{r4, lr}
    4fe6:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    4fe8:	f043 0208 	orr.w	r2, r3, #8
    4fec:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4fee:	f023 0220 	bic.w	r2, r3, #32
    4ff2:	f042 0208 	orr.w	r2, r2, #8
    4ff6:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    4ff8:	f012 0f80 	tst.w	r2, #128	; 0x80
    4ffc:	d113      	bne.n	5026 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    4ffe:	68a3      	ldr	r3, [r4, #8]
    5000:	b113      	cbz	r3, 5008 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    5002:	4620      	mov	r0, r4
    5004:	f003 faf1 	bl	85ea <unpend_thread_no_timeout>
    5008:	f104 0018 	add.w	r0, r4, #24
    500c:	f003 fc40 	bl	8890 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    5010:	f104 0058 	add.w	r0, r4, #88	; 0x58
    5014:	f003 fb68 	bl	86e8 <unpend_all>
		update_cache(1);
    5018:	2001      	movs	r0, #1
    501a:	f7ff fded 	bl	4bf8 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    501e:	4620      	mov	r0, r4
    5020:	f7ff fb06 	bl	4630 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    5024:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5026:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    502a:	f043 0308 	orr.w	r3, r3, #8
    502e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5030:	4601      	mov	r1, r0
    5032:	4802      	ldr	r0, [pc, #8]	; (503c <end_thread+0x60>)
    5034:	f003 fad1 	bl	85da <z_priq_dumb_remove>
}
    5038:	e7e1      	b.n	4ffe <end_thread+0x22>
    503a:	4770      	bx	lr
    503c:	200017cc 	.word	0x200017cc

00005040 <z_sched_init>:
{
    5040:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    5042:	4802      	ldr	r0, [pc, #8]	; (504c <z_sched_init+0xc>)
    5044:	f003 fbec 	bl	8820 <init_ready_q>
}
    5048:	bd08      	pop	{r3, pc}
    504a:	bf00      	nop
    504c:	200017c8 	.word	0x200017c8

00005050 <z_impl_k_yield>:
{
    5050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5052:	f04f 0320 	mov.w	r3, #32
    5056:	f3ef 8611 	mrs	r6, BASEPRI
    505a:	f383 8812 	msr	BASEPRI_MAX, r3
    505e:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    5062:	4c1d      	ldr	r4, [pc, #116]	; (50d8 <z_impl_k_yield+0x88>)
    5064:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5066:	7b4b      	ldrb	r3, [r1, #13]
    5068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    506c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    506e:	f104 071c 	add.w	r7, r4, #28
    5072:	4638      	mov	r0, r7
    5074:	f003 fab1 	bl	85da <z_priq_dumb_remove>
	queue_thread(_current);
    5078:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    507a:	7b6b      	ldrb	r3, [r5, #13]
    507c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5080:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    5082:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5084:	42bc      	cmp	r4, r7
    5086:	d108      	bne.n	509a <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5088:	2400      	movs	r4, #0
    508a:	e006      	b.n	509a <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    508c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    508e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    5090:	602c      	str	r4, [r5, #0]
	prev->next = node;
    5092:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    5094:	6065      	str	r5, [r4, #4]
}
    5096:	e017      	b.n	50c8 <z_impl_k_yield+0x78>
    5098:	2400      	movs	r4, #0
    509a:	b16c      	cbz	r4, 50b8 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    509c:	4621      	mov	r1, r4
    509e:	4628      	mov	r0, r5
    50a0:	f003 fa5d 	bl	855e <z_sched_prio_cmp>
    50a4:	2800      	cmp	r0, #0
    50a6:	dcf1      	bgt.n	508c <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    50a8:	2c00      	cmp	r4, #0
    50aa:	d0f6      	beq.n	509a <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    50ac:	4b0a      	ldr	r3, [pc, #40]	; (50d8 <z_impl_k_yield+0x88>)
    50ae:	6a1b      	ldr	r3, [r3, #32]
    50b0:	429c      	cmp	r4, r3
    50b2:	d0f1      	beq.n	5098 <z_impl_k_yield+0x48>
    50b4:	6824      	ldr	r4, [r4, #0]
    50b6:	e7f0      	b.n	509a <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    50b8:	4b07      	ldr	r3, [pc, #28]	; (50d8 <z_impl_k_yield+0x88>)
    50ba:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
    50bc:	f103 011c 	add.w	r1, r3, #28
    50c0:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    50c2:	606a      	str	r2, [r5, #4]
	tail->next = node;
    50c4:	6015      	str	r5, [r2, #0]
	list->tail = node;
    50c6:	621d      	str	r5, [r3, #32]
	update_cache(1);
    50c8:	2001      	movs	r0, #1
    50ca:	f7ff fd95 	bl	4bf8 <update_cache>
    50ce:	4630      	mov	r0, r6
    50d0:	f7fc fadc 	bl	168c <arch_swap>
}
    50d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50d6:	bf00      	nop
    50d8:	200017b0 	.word	0x200017b0

000050dc <z_tick_sleep>:
{
    50dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    50e0:	ea50 0301 	orrs.w	r3, r0, r1
    50e4:	d038      	beq.n	5158 <z_tick_sleep+0x7c>
    50e6:	4604      	mov	r4, r0
    50e8:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    50ea:	f06f 0301 	mvn.w	r3, #1
    50ee:	1a1b      	subs	r3, r3, r0
    50f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    50f4:	eb62 0201 	sbc.w	r2, r2, r1
    50f8:	2b01      	cmp	r3, #1
    50fa:	f172 0200 	sbcs.w	r2, r2, #0
    50fe:	db2f      	blt.n	5160 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    5100:	f06f 0501 	mvn.w	r5, #1
    5104:	1a2d      	subs	r5, r5, r0
    5106:	f04f 0320 	mov.w	r3, #32
    510a:	f3ef 8811 	mrs	r8, BASEPRI
    510e:	f383 8812 	msr	BASEPRI_MAX, r3
    5112:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    5116:	4f14      	ldr	r7, [pc, #80]	; (5168 <z_tick_sleep+0x8c>)
    5118:	68b8      	ldr	r0, [r7, #8]
    511a:	4b14      	ldr	r3, [pc, #80]	; (516c <z_tick_sleep+0x90>)
    511c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    511e:	f7ff fe6d 	bl	4dfc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5122:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5124:	4622      	mov	r2, r4
    5126:	4633      	mov	r3, r6
    5128:	4911      	ldr	r1, [pc, #68]	; (5170 <z_tick_sleep+0x94>)
    512a:	3018      	adds	r0, #24
    512c:	f000 f8c6 	bl	52bc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5130:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5132:	7b53      	ldrb	r3, [r2, #13]
    5134:	f043 0310 	orr.w	r3, r3, #16
    5138:	7353      	strb	r3, [r2, #13]
    513a:	4640      	mov	r0, r8
    513c:	f7fc faa6 	bl	168c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5140:	f003 fbdb 	bl	88fa <sys_clock_tick_get_32>
    5144:	1a28      	subs	r0, r5, r0
    5146:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    514a:	2801      	cmp	r0, #1
    514c:	f173 0300 	sbcs.w	r3, r3, #0
    5150:	da00      	bge.n	5154 <z_tick_sleep+0x78>
	return 0;
    5152:	2000      	movs	r0, #0
}
    5154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    5158:	f7ff ff7a 	bl	5050 <z_impl_k_yield>
		return 0;
    515c:	2000      	movs	r0, #0
    515e:	e7f9      	b.n	5154 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5160:	f003 fbcb 	bl	88fa <sys_clock_tick_get_32>
    5164:	1905      	adds	r5, r0, r4
    5166:	e7ce      	b.n	5106 <z_tick_sleep+0x2a>
    5168:	200017b0 	.word	0x200017b0
    516c:	200017d8 	.word	0x200017d8
    5170:	000086dd 	.word	0x000086dd

00005174 <z_impl_k_sleep>:
{
    5174:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5176:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    517a:	bf08      	it	eq
    517c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    5180:	d018      	beq.n	51b4 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    5182:	f7ff ffab 	bl	50dc <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    5186:	17c2      	asrs	r2, r0, #31
    5188:	0151      	lsls	r1, r2, #5
    518a:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    518e:	0143      	lsls	r3, r0, #5
    5190:	1a1b      	subs	r3, r3, r0
    5192:	eb61 0102 	sbc.w	r1, r1, r2
    5196:	0089      	lsls	r1, r1, #2
    5198:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    519c:	009b      	lsls	r3, r3, #2
    519e:	181b      	adds	r3, r3, r0
    51a0:	eb42 0201 	adc.w	r2, r2, r1
    51a4:	00d2      	lsls	r2, r2, #3
    51a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    51aa:	f3c3 3310 	ubfx	r3, r3, #12, #17
    51ae:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    51b2:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    51b4:	4b03      	ldr	r3, [pc, #12]	; (51c4 <z_impl_k_sleep+0x50>)
    51b6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    51b8:	f7ff feb6 	bl	4f28 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    51bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    51c0:	e7f7      	b.n	51b2 <z_impl_k_sleep+0x3e>
    51c2:	bf00      	nop
    51c4:	200017b0 	.word	0x200017b0

000051c8 <z_impl_z_current_get>:
}
    51c8:	4b01      	ldr	r3, [pc, #4]	; (51d0 <z_impl_z_current_get+0x8>)
    51ca:	6898      	ldr	r0, [r3, #8]
    51cc:	4770      	bx	lr
    51ce:	bf00      	nop
    51d0:	200017b0 	.word	0x200017b0

000051d4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    51d4:	b570      	push	{r4, r5, r6, lr}
    51d6:	f04f 0320 	mov.w	r3, #32
    51da:	f3ef 8511 	mrs	r5, BASEPRI
    51de:	f383 8812 	msr	BASEPRI_MAX, r3
    51e2:	f3bf 8f6f 	isb	sy
    51e6:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    51e8:	7b03      	ldrb	r3, [r0, #12]
    51ea:	f013 0f01 	tst.w	r3, #1
    51ee:	d109      	bne.n	5204 <z_thread_abort+0x30>
    51f0:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    51f2:	7b43      	ldrb	r3, [r0, #13]
    51f4:	f013 0f08 	tst.w	r3, #8
    51f8:	d00f      	beq.n	521a <z_thread_abort+0x46>
	__asm__ volatile(
    51fa:	f385 8811 	msr	BASEPRI, r5
    51fe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    5202:	e009      	b.n	5218 <z_thread_abort+0x44>
    5204:	f385 8811 	msr	BASEPRI, r5
    5208:	f3bf 8f6f 	isb	sy
		k_panic();
    520c:	4040      	eors	r0, r0
    520e:	f380 8811 	msr	BASEPRI, r0
    5212:	f04f 0004 	mov.w	r0, #4
    5216:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5218:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    521a:	f7ff fedf 	bl	4fdc <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    521e:	4b08      	ldr	r3, [pc, #32]	; (5240 <z_thread_abort+0x6c>)
    5220:	689b      	ldr	r3, [r3, #8]
    5222:	42a3      	cmp	r3, r4
    5224:	d004      	beq.n	5230 <z_thread_abort+0x5c>
    5226:	f386 8811 	msr	BASEPRI, r6
    522a:	f3bf 8f6f 	isb	sy
    522e:	e7f3      	b.n	5218 <z_thread_abort+0x44>
    5230:	f3ef 8305 	mrs	r3, IPSR
    5234:	2b00      	cmp	r3, #0
    5236:	d1f6      	bne.n	5226 <z_thread_abort+0x52>
    5238:	4628      	mov	r0, r5
    523a:	f7fc fa27 	bl	168c <arch_swap>
	return ret;
    523e:	e7f2      	b.n	5226 <z_thread_abort+0x52>
    5240:	200017b0 	.word	0x200017b0

00005244 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    5244:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    5246:	4806      	ldr	r0, [pc, #24]	; (5260 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    5248:	4a06      	ldr	r2, [pc, #24]	; (5264 <z_data_copy+0x20>)
    524a:	1a12      	subs	r2, r2, r0
    524c:	4906      	ldr	r1, [pc, #24]	; (5268 <z_data_copy+0x24>)
    524e:	f003 f8a0 	bl	8392 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5252:	4a06      	ldr	r2, [pc, #24]	; (526c <z_data_copy+0x28>)
    5254:	4906      	ldr	r1, [pc, #24]	; (5270 <z_data_copy+0x2c>)
    5256:	4807      	ldr	r0, [pc, #28]	; (5274 <z_data_copy+0x30>)
    5258:	f003 f89b 	bl	8392 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    525c:	bd08      	pop	{r3, pc}
    525e:	bf00      	nop
    5260:	20000000 	.word	0x20000000
    5264:	20000b14 	.word	0x20000b14
    5268:	00009774 	.word	0x00009774
    526c:	00000000 	.word	0x00000000
    5270:	00009774 	.word	0x00009774
    5274:	20000000 	.word	0x20000000

00005278 <first>:
	return list->head == list;
    5278:	4b03      	ldr	r3, [pc, #12]	; (5288 <first+0x10>)
    527a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    527c:	4298      	cmp	r0, r3
    527e:	d000      	beq.n	5282 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    5280:	4770      	bx	lr
    5282:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    5284:	e7fc      	b.n	5280 <first+0x8>
    5286:	bf00      	nop
    5288:	20000a68 	.word	0x20000a68

0000528c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    528c:	b130      	cbz	r0, 529c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    528e:	4a04      	ldr	r2, [pc, #16]	; (52a0 <next+0x14>)
    5290:	6852      	ldr	r2, [r2, #4]
    5292:	4290      	cmp	r0, r2
    5294:	d001      	beq.n	529a <next+0xe>
    5296:	6800      	ldr	r0, [r0, #0]
    5298:	4770      	bx	lr
    529a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    529c:	4770      	bx	lr
    529e:	bf00      	nop
    52a0:	20000a68 	.word	0x20000a68

000052a4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    52a4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    52a6:	4b04      	ldr	r3, [pc, #16]	; (52b8 <elapsed+0x14>)
    52a8:	681b      	ldr	r3, [r3, #0]
    52aa:	b10b      	cbz	r3, 52b0 <elapsed+0xc>
    52ac:	2000      	movs	r0, #0
}
    52ae:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    52b0:	f7fe f9bc 	bl	362c <sys_clock_elapsed>
    52b4:	e7fb      	b.n	52ae <elapsed+0xa>
    52b6:	bf00      	nop
    52b8:	200017e8 	.word	0x200017e8

000052bc <z_add_timeout>:
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    52bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    52c0:	bf08      	it	eq
    52c2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    52c6:	d074      	beq.n	53b2 <z_add_timeout+0xf6>
{
    52c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52cc:	4604      	mov	r4, r0
    52ce:	4692      	mov	sl, r2
    52d0:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    52d2:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    52d4:	2300      	movs	r3, #0
	__asm__ volatile(
    52d6:	f04f 0220 	mov.w	r2, #32
    52da:	f3ef 8711 	mrs	r7, BASEPRI
    52de:	f382 8812 	msr	BASEPRI_MAX, r2
    52e2:	f3bf 8f6f 	isb	sy
    52e6:	e026      	b.n	5336 <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    52e8:	f11a 0801 	adds.w	r8, sl, #1
    52ec:	f145 0900 	adc.w	r9, r5, #0
    52f0:	f7ff ffd8 	bl	52a4 <elapsed>
    52f4:	eb18 0300 	adds.w	r3, r8, r0
    52f8:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    52fc:	6123      	str	r3, [r4, #16]
    52fe:	6160      	str	r0, [r4, #20]
    5300:	e03b      	b.n	537a <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    5302:	1a52      	subs	r2, r2, r1
    5304:	eb66 0303 	sbc.w	r3, r6, r3
    5308:	6102      	str	r2, [r0, #16]
    530a:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    530c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    530e:	6063      	str	r3, [r4, #4]
	node->next = successor;
    5310:	6020      	str	r0, [r4, #0]
	prev->next = node;
    5312:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5314:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    5316:	e005      	b.n	5324 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    5318:	4b26      	ldr	r3, [pc, #152]	; (53b4 <z_add_timeout+0xf8>)
    531a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    531c:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    531e:	6062      	str	r2, [r4, #4]
	tail->next = node;
    5320:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5322:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5324:	f7ff ffa8 	bl	5278 <first>
    5328:	4284      	cmp	r4, r0
    532a:	d03a      	beq.n	53a2 <z_add_timeout+0xe6>
	__asm__ volatile(
    532c:	f387 8811 	msr	BASEPRI, r7
    5330:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    5334:	2301      	movs	r3, #1
    5336:	2b00      	cmp	r3, #0
    5338:	d139      	bne.n	53ae <z_add_timeout+0xf2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    533a:	4653      	mov	r3, sl
    533c:	f06f 0101 	mvn.w	r1, #1
    5340:	ebb1 010a 	subs.w	r1, r1, sl
    5344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5348:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    534c:	2a00      	cmp	r2, #0
    534e:	dbcb      	blt.n	52e8 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5350:	4a19      	ldr	r2, [pc, #100]	; (53b8 <z_add_timeout+0xfc>)
    5352:	6811      	ldr	r1, [r2, #0]
    5354:	6852      	ldr	r2, [r2, #4]
    5356:	185b      	adds	r3, r3, r1
    5358:	eb42 0205 	adc.w	r2, r2, r5
    535c:	f06f 0101 	mvn.w	r1, #1
    5360:	1ac9      	subs	r1, r1, r3
    5362:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    5366:	4608      	mov	r0, r1
    5368:	461a      	mov	r2, r3
    536a:	2901      	cmp	r1, #1
    536c:	f173 0300 	sbcs.w	r3, r3, #0
    5370:	da01      	bge.n	5376 <z_add_timeout+0xba>
    5372:	2001      	movs	r0, #1
    5374:	2200      	movs	r2, #0
    5376:	6120      	str	r0, [r4, #16]
    5378:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    537a:	f7ff ff7d 	bl	5278 <first>
    537e:	2800      	cmp	r0, #0
    5380:	d0ca      	beq.n	5318 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    5382:	6902      	ldr	r2, [r0, #16]
    5384:	6946      	ldr	r6, [r0, #20]
    5386:	6921      	ldr	r1, [r4, #16]
    5388:	6963      	ldr	r3, [r4, #20]
    538a:	4291      	cmp	r1, r2
    538c:	eb73 0e06 	sbcs.w	lr, r3, r6
    5390:	dbb7      	blt.n	5302 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    5392:	1a89      	subs	r1, r1, r2
    5394:	eb63 0306 	sbc.w	r3, r3, r6
    5398:	6121      	str	r1, [r4, #16]
    539a:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    539c:	f7ff ff76 	bl	528c <next>
    53a0:	e7ed      	b.n	537e <z_add_timeout+0xc2>
			sys_clock_set_timeout(next_timeout(), false);
    53a2:	f003 fa58 	bl	8856 <next_timeout>
    53a6:	2100      	movs	r1, #0
    53a8:	f7fe f904 	bl	35b4 <sys_clock_set_timeout>
    53ac:	e7be      	b.n	532c <z_add_timeout+0x70>
		}
	}
}
    53ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53b2:	4770      	bx	lr
    53b4:	20000a68 	.word	0x20000a68
    53b8:	20000cb0 	.word	0x20000cb0

000053bc <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    53bc:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    53be:	f04f 0320 	mov.w	r3, #32
    53c2:	f3ef 8611 	mrs	r6, BASEPRI
    53c6:	f383 8812 	msr	BASEPRI_MAX, r3
    53ca:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    53ce:	4b2b      	ldr	r3, [pc, #172]	; (547c <sys_clock_announce+0xc0>)
    53d0:	6018      	str	r0, [r3, #0]

	struct _timeout *t = first();
    53d2:	f7ff ff51 	bl	5278 <first>
    53d6:	4604      	mov	r4, r0

	for (t = first();
    53d8:	e024      	b.n	5424 <sys_clock_announce+0x68>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    53da:	4a29      	ldr	r2, [pc, #164]	; (5480 <sys_clock_announce+0xc4>)
    53dc:	6813      	ldr	r3, [r2, #0]
    53de:	6851      	ldr	r1, [r2, #4]
    53e0:	195b      	adds	r3, r3, r5
    53e2:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    53e6:	6013      	str	r3, [r2, #0]
    53e8:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    53ea:	2200      	movs	r2, #0
    53ec:	2300      	movs	r3, #0
    53ee:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    53f2:	4620      	mov	r0, r4
    53f4:	f003 fa18 	bl	8828 <remove_timeout>
	__asm__ volatile(
    53f8:	f386 8811 	msr	BASEPRI, r6
    53fc:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    5400:	68a3      	ldr	r3, [r4, #8]
    5402:	4620      	mov	r0, r4
    5404:	4798      	blx	r3
	__asm__ volatile(
    5406:	f04f 0320 	mov.w	r3, #32
    540a:	f3ef 8611 	mrs	r6, BASEPRI
    540e:	f383 8812 	msr	BASEPRI_MAX, r3
    5412:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    5416:	4a19      	ldr	r2, [pc, #100]	; (547c <sys_clock_announce+0xc0>)
    5418:	6813      	ldr	r3, [r2, #0]
    541a:	1b5b      	subs	r3, r3, r5
    541c:	6013      	str	r3, [r2, #0]
	     t = first()) {
    541e:	f7ff ff2b 	bl	5278 <first>
    5422:	4604      	mov	r4, r0
	     (t != NULL) && (t->dticks <= announce_remaining);
    5424:	b13c      	cbz	r4, 5436 <sys_clock_announce+0x7a>
    5426:	6925      	ldr	r5, [r4, #16]
    5428:	6961      	ldr	r1, [r4, #20]
    542a:	4b14      	ldr	r3, [pc, #80]	; (547c <sys_clock_announce+0xc0>)
    542c:	681a      	ldr	r2, [r3, #0]
    542e:	17d3      	asrs	r3, r2, #31
    5430:	42aa      	cmp	r2, r5
    5432:	418b      	sbcs	r3, r1
    5434:	dad1      	bge.n	53da <sys_clock_announce+0x1e>
	}

	if (t != NULL) {
    5436:	b144      	cbz	r4, 544a <sys_clock_announce+0x8e>
		t->dticks -= announce_remaining;
    5438:	6923      	ldr	r3, [r4, #16]
    543a:	6962      	ldr	r2, [r4, #20]
    543c:	490f      	ldr	r1, [pc, #60]	; (547c <sys_clock_announce+0xc0>)
    543e:	6809      	ldr	r1, [r1, #0]
    5440:	1a5b      	subs	r3, r3, r1
    5442:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    5446:	6123      	str	r3, [r4, #16]
    5448:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    544a:	4a0d      	ldr	r2, [pc, #52]	; (5480 <sys_clock_announce+0xc4>)
    544c:	4d0b      	ldr	r5, [pc, #44]	; (547c <sys_clock_announce+0xc0>)
    544e:	6828      	ldr	r0, [r5, #0]
    5450:	6813      	ldr	r3, [r2, #0]
    5452:	6851      	ldr	r1, [r2, #4]
    5454:	181b      	adds	r3, r3, r0
    5456:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    545a:	6013      	str	r3, [r2, #0]
    545c:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    545e:	2400      	movs	r4, #0
    5460:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5462:	f003 f9f8 	bl	8856 <next_timeout>
    5466:	4621      	mov	r1, r4
    5468:	f7fe f8a4 	bl	35b4 <sys_clock_set_timeout>
	__asm__ volatile(
    546c:	f386 8811 	msr	BASEPRI, r6
    5470:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
    5474:	f7ff fc2e 	bl	4cd4 <z_time_slice>
#endif
}
    5478:	bd70      	pop	{r4, r5, r6, pc}
    547a:	bf00      	nop
    547c:	200017e8 	.word	0x200017e8
    5480:	20000cb0 	.word	0x20000cb0

00005484 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5484:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    5486:	2200      	movs	r2, #0
	__asm__ volatile(
    5488:	f04f 0320 	mov.w	r3, #32
    548c:	f3ef 8411 	mrs	r4, BASEPRI
    5490:	f383 8812 	msr	BASEPRI_MAX, r3
    5494:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    5498:	4613      	mov	r3, r2
    549a:	4611      	mov	r1, r2
    549c:	e00c      	b.n	54b8 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    549e:	f7ff ff01 	bl	52a4 <elapsed>
    54a2:	4a07      	ldr	r2, [pc, #28]	; (54c0 <sys_clock_tick_get+0x3c>)
    54a4:	6813      	ldr	r3, [r2, #0]
    54a6:	6851      	ldr	r1, [r2, #4]
    54a8:	18c3      	adds	r3, r0, r3
    54aa:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    54ae:	f384 8811 	msr	BASEPRI, r4
    54b2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    54b6:	2201      	movs	r2, #1
    54b8:	2a00      	cmp	r2, #0
    54ba:	d0f0      	beq.n	549e <sys_clock_tick_get+0x1a>
	}
	return t;
}
    54bc:	4618      	mov	r0, r3
    54be:	bd10      	pop	{r4, pc}
    54c0:	20000cb0 	.word	0x20000cb0

000054c4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    54c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    54c6:	f04f 0220 	mov.w	r2, #32
    54ca:	f3ef 8311 	mrs	r3, BASEPRI
    54ce:	f382 8812 	msr	BASEPRI_MAX, r2
    54d2:	f3bf 8f6f 	isb	sy
    54d6:	461a      	mov	r2, r3
    54d8:	461d      	mov	r5, r3
	return node->next != NULL;
    54da:	6803      	ldr	r3, [r0, #0]
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    54dc:	b123      	cbz	r3, 54e8 <z_timer_expiration_handler+0x24>
	__asm__ volatile(
    54de:	f382 8811 	msr	BASEPRI, r2
    54e2:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    54e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54e8:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    54ea:	6a82      	ldr	r2, [r0, #40]	; 0x28
    54ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    54ee:	ea52 0103 	orrs.w	r1, r2, r3
    54f2:	d005      	beq.n	5500 <z_timer_expiration_handler+0x3c>
    54f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    54f8:	bf08      	it	eq
    54fa:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    54fe:	d129      	bne.n	5554 <z_timer_expiration_handler+0x90>
	timer->status += 1U;
    5500:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5502:	3301      	adds	r3, #1
    5504:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    5506:	6a23      	ldr	r3, [r4, #32]
    5508:	b17b      	cbz	r3, 552a <z_timer_expiration_handler+0x66>
    550a:	f385 8811 	msr	BASEPRI, r5
    550e:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    5512:	6a23      	ldr	r3, [r4, #32]
    5514:	4620      	mov	r0, r4
    5516:	4798      	blx	r3
	__asm__ volatile(
    5518:	f04f 0220 	mov.w	r2, #32
    551c:	f3ef 8311 	mrs	r3, BASEPRI
    5520:	f382 8812 	msr	BASEPRI_MAX, r2
    5524:	f3bf 8f6f 	isb	sy
    5528:	461d      	mov	r5, r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    552a:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    552e:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5530:	42a3      	cmp	r3, r4
    5532:	d03f      	beq.n	55b4 <z_timer_expiration_handler+0xf0>
	if (thread == NULL) {
    5534:	2c00      	cmp	r4, #0
    5536:	d03d      	beq.n	55b4 <z_timer_expiration_handler+0xf0>
	z_unpend_thread_no_timeout(thread);
    5538:	4620      	mov	r0, r4
    553a:	f003 f81a 	bl	8572 <z_unpend_thread_no_timeout>
    553e:	2300      	movs	r3, #0
    5540:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    5544:	f385 8811 	msr	BASEPRI, r5
    5548:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    554c:	4620      	mov	r0, r4
    554e:	f003 f87f 	bl	8650 <z_ready_thread>
    5552:	e7c8      	b.n	54e6 <z_timer_expiration_handler+0x22>
		next.ticks = MAX(next.ticks - 1, 0);
    5554:	4616      	mov	r6, r2
    5556:	461f      	mov	r7, r3
    5558:	2a01      	cmp	r2, #1
    555a:	f173 0300 	sbcs.w	r3, r3, #0
    555e:	da01      	bge.n	5564 <z_timer_expiration_handler+0xa0>
    5560:	2601      	movs	r6, #1
    5562:	2700      	movs	r7, #0
    5564:	3e01      	subs	r6, #1
    5566:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
    556a:	f003 f9ca 	bl	8902 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    556e:	3001      	adds	r0, #1
    5570:	f141 0100 	adc.w	r1, r1, #0
    5574:	1980      	adds	r0, r0, r6
    5576:	eb47 0101 	adc.w	r1, r7, r1
    557a:	2801      	cmp	r0, #1
    557c:	f171 0100 	sbcs.w	r1, r1, #0
    5580:	da08      	bge.n	5594 <z_timer_expiration_handler+0xd0>
    5582:	f06f 0201 	mvn.w	r2, #1
    5586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    558a:	490d      	ldr	r1, [pc, #52]	; (55c0 <z_timer_expiration_handler+0xfc>)
    558c:	4620      	mov	r0, r4
    558e:	f7ff fe95 	bl	52bc <z_add_timeout>
    5592:	e7b5      	b.n	5500 <z_timer_expiration_handler+0x3c>
    5594:	f003 f9b5 	bl	8902 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    5598:	3001      	adds	r0, #1
    559a:	f141 0100 	adc.w	r1, r1, #0
    559e:	1980      	adds	r0, r0, r6
    55a0:	eb47 0301 	adc.w	r3, r7, r1
    55a4:	f06f 0201 	mvn.w	r2, #1
    55a8:	1a12      	subs	r2, r2, r0
    55aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    55ae:	eb61 0303 	sbc.w	r3, r1, r3
    55b2:	e7ea      	b.n	558a <z_timer_expiration_handler+0xc6>
    55b4:	f385 8811 	msr	BASEPRI, r5
    55b8:	f3bf 8f6f 	isb	sy
		return;
    55bc:	e793      	b.n	54e6 <z_timer_expiration_handler+0x22>
    55be:	bf00      	nop
    55c0:	000054c5 	.word	0x000054c5

000055c4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    55c4:	b570      	push	{r4, r5, r6, lr}
    55c6:	461d      	mov	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    55c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    55cc:	bf08      	it	eq
    55ce:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    55d2:	d01a      	beq.n	560a <z_impl_k_timer_start+0x46>
    55d4:	4606      	mov	r6, r0
    55d6:	4614      	mov	r4, r2
    55d8:	4619      	mov	r1, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    55da:	f06f 0201 	mvn.w	r2, #1
    55de:	1b12      	subs	r2, r2, r4
    55e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    55e4:	eb62 0203 	sbc.w	r2, r2, r3
    55e8:	2a00      	cmp	r2, #0
    55ea:	db0f      	blt.n	560c <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    55ec:	4630      	mov	r0, r6
    55ee:	f003 f94f 	bl	8890 <z_abort_timeout>
	timer->period = period;
    55f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    55f6:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	timer->status = 0U;
    55fa:	2300      	movs	r3, #0
    55fc:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    55fe:	4622      	mov	r2, r4
    5600:	462b      	mov	r3, r5
    5602:	4907      	ldr	r1, [pc, #28]	; (5620 <z_impl_k_timer_start+0x5c>)
    5604:	4630      	mov	r0, r6
    5606:	f7ff fe59 	bl	52bc <z_add_timeout>
		     duration);
}
    560a:	bd70      	pop	{r4, r5, r6, pc}
		duration.ticks = MAX(duration.ticks - 1, 0);
    560c:	2c01      	cmp	r4, #1
    560e:	f171 0100 	sbcs.w	r1, r1, #0
    5612:	da01      	bge.n	5618 <z_impl_k_timer_start+0x54>
    5614:	2401      	movs	r4, #1
    5616:	2500      	movs	r5, #0
    5618:	3c01      	subs	r4, #1
    561a:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
    561e:	e7e5      	b.n	55ec <z_impl_k_timer_start+0x28>
    5620:	000054c5 	.word	0x000054c5

00005624 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    5624:	b538      	push	{r3, r4, r5, lr}
    5626:	4604      	mov	r4, r0
    5628:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    562a:	f002 fec9 	bl	83c0 <k_is_in_isr>
    562e:	b948      	cbnz	r0, 5644 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    5630:	4b05      	ldr	r3, [pc, #20]	; (5648 <z_thread_aligned_alloc+0x24>)
    5632:	689b      	ldr	r3, [r3, #8]
    5634:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
	}

	if (heap != NULL) {
    5638:	b118      	cbz	r0, 5642 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
    563a:	462a      	mov	r2, r5
    563c:	4621      	mov	r1, r4
    563e:	f003 f9b6 	bl	89ae <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    5642:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
    5644:	2000      	movs	r0, #0
	return ret;
    5646:	e7fc      	b.n	5642 <z_thread_aligned_alloc+0x1e>
    5648:	200017b0 	.word	0x200017b0

0000564c <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    564c:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    564e:	4802      	ldr	r0, [pc, #8]	; (5658 <boot_banner+0xc>)
    5650:	f000 fd78 	bl	6144 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    5654:	bd08      	pop	{r3, pc}
    5656:	bf00      	nop
    5658:	000095c4 	.word	0x000095c4

0000565c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    565c:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    565e:	4c06      	ldr	r4, [pc, #24]	; (5678 <statics_init+0x1c>)
    5660:	e005      	b.n	566e <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    5662:	68a2      	ldr	r2, [r4, #8]
    5664:	6861      	ldr	r1, [r4, #4]
    5666:	4620      	mov	r0, r4
    5668:	f003 f9c3 	bl	89f2 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    566c:	3414      	adds	r4, #20
    566e:	4b03      	ldr	r3, [pc, #12]	; (567c <statics_init+0x20>)
    5670:	429c      	cmp	r4, r3
    5672:	d3f6      	bcc.n	5662 <statics_init+0x6>
		}
	}
	return 0;
}
    5674:	2000      	movs	r0, #0
    5676:	bd10      	pop	{r4, pc}
    5678:	20000ade 	.word	0x20000ade
    567c:	20000ade 	.word	0x20000ade

00005680 <_free_r>:
    5680:	b538      	push	{r3, r4, r5, lr}
    5682:	4605      	mov	r5, r0
    5684:	2900      	cmp	r1, #0
    5686:	d041      	beq.n	570c <_free_r+0x8c>
    5688:	f851 3c04 	ldr.w	r3, [r1, #-4]
    568c:	1f0c      	subs	r4, r1, #4
    568e:	2b00      	cmp	r3, #0
    5690:	bfb8      	it	lt
    5692:	18e4      	addlt	r4, r4, r3
    5694:	f000 f96c 	bl	5970 <__malloc_lock>
    5698:	4a1d      	ldr	r2, [pc, #116]	; (5710 <_free_r+0x90>)
    569a:	6813      	ldr	r3, [r2, #0]
    569c:	b933      	cbnz	r3, 56ac <_free_r+0x2c>
    569e:	6063      	str	r3, [r4, #4]
    56a0:	6014      	str	r4, [r2, #0]
    56a2:	4628      	mov	r0, r5
    56a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    56a8:	f000 b968 	b.w	597c <__malloc_unlock>
    56ac:	42a3      	cmp	r3, r4
    56ae:	d908      	bls.n	56c2 <_free_r+0x42>
    56b0:	6820      	ldr	r0, [r4, #0]
    56b2:	1821      	adds	r1, r4, r0
    56b4:	428b      	cmp	r3, r1
    56b6:	bf01      	itttt	eq
    56b8:	6819      	ldreq	r1, [r3, #0]
    56ba:	685b      	ldreq	r3, [r3, #4]
    56bc:	1809      	addeq	r1, r1, r0
    56be:	6021      	streq	r1, [r4, #0]
    56c0:	e7ed      	b.n	569e <_free_r+0x1e>
    56c2:	461a      	mov	r2, r3
    56c4:	685b      	ldr	r3, [r3, #4]
    56c6:	b10b      	cbz	r3, 56cc <_free_r+0x4c>
    56c8:	42a3      	cmp	r3, r4
    56ca:	d9fa      	bls.n	56c2 <_free_r+0x42>
    56cc:	6811      	ldr	r1, [r2, #0]
    56ce:	1850      	adds	r0, r2, r1
    56d0:	42a0      	cmp	r0, r4
    56d2:	d10b      	bne.n	56ec <_free_r+0x6c>
    56d4:	6820      	ldr	r0, [r4, #0]
    56d6:	4401      	add	r1, r0
    56d8:	1850      	adds	r0, r2, r1
    56da:	4283      	cmp	r3, r0
    56dc:	6011      	str	r1, [r2, #0]
    56de:	d1e0      	bne.n	56a2 <_free_r+0x22>
    56e0:	6818      	ldr	r0, [r3, #0]
    56e2:	685b      	ldr	r3, [r3, #4]
    56e4:	6053      	str	r3, [r2, #4]
    56e6:	4408      	add	r0, r1
    56e8:	6010      	str	r0, [r2, #0]
    56ea:	e7da      	b.n	56a2 <_free_r+0x22>
    56ec:	d902      	bls.n	56f4 <_free_r+0x74>
    56ee:	230c      	movs	r3, #12
    56f0:	602b      	str	r3, [r5, #0]
    56f2:	e7d6      	b.n	56a2 <_free_r+0x22>
    56f4:	6820      	ldr	r0, [r4, #0]
    56f6:	1821      	adds	r1, r4, r0
    56f8:	428b      	cmp	r3, r1
    56fa:	bf04      	itt	eq
    56fc:	6819      	ldreq	r1, [r3, #0]
    56fe:	685b      	ldreq	r3, [r3, #4]
    5700:	6063      	str	r3, [r4, #4]
    5702:	bf04      	itt	eq
    5704:	1809      	addeq	r1, r1, r0
    5706:	6021      	streq	r1, [r4, #0]
    5708:	6054      	str	r4, [r2, #4]
    570a:	e7ca      	b.n	56a2 <_free_r+0x22>
    570c:	bd38      	pop	{r3, r4, r5, pc}
    570e:	bf00      	nop
    5710:	200017f0 	.word	0x200017f0

00005714 <_malloc_r>:
    5714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5716:	1ccd      	adds	r5, r1, #3
    5718:	f025 0503 	bic.w	r5, r5, #3
    571c:	3508      	adds	r5, #8
    571e:	2d0c      	cmp	r5, #12
    5720:	bf38      	it	cc
    5722:	250c      	movcc	r5, #12
    5724:	2d00      	cmp	r5, #0
    5726:	4606      	mov	r6, r0
    5728:	db01      	blt.n	572e <_malloc_r+0x1a>
    572a:	42a9      	cmp	r1, r5
    572c:	d903      	bls.n	5736 <_malloc_r+0x22>
    572e:	230c      	movs	r3, #12
    5730:	6033      	str	r3, [r6, #0]
    5732:	2000      	movs	r0, #0
    5734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5736:	f000 f91b 	bl	5970 <__malloc_lock>
    573a:	4921      	ldr	r1, [pc, #132]	; (57c0 <_malloc_r+0xac>)
    573c:	680a      	ldr	r2, [r1, #0]
    573e:	4614      	mov	r4, r2
    5740:	b99c      	cbnz	r4, 576a <_malloc_r+0x56>
    5742:	4f20      	ldr	r7, [pc, #128]	; (57c4 <_malloc_r+0xb0>)
    5744:	683b      	ldr	r3, [r7, #0]
    5746:	b923      	cbnz	r3, 5752 <_malloc_r+0x3e>
    5748:	4621      	mov	r1, r4
    574a:	4630      	mov	r0, r6
    574c:	f000 f83c 	bl	57c8 <_sbrk_r>
    5750:	6038      	str	r0, [r7, #0]
    5752:	4629      	mov	r1, r5
    5754:	4630      	mov	r0, r6
    5756:	f000 f837 	bl	57c8 <_sbrk_r>
    575a:	1c43      	adds	r3, r0, #1
    575c:	d123      	bne.n	57a6 <_malloc_r+0x92>
    575e:	230c      	movs	r3, #12
    5760:	6033      	str	r3, [r6, #0]
    5762:	4630      	mov	r0, r6
    5764:	f000 f90a 	bl	597c <__malloc_unlock>
    5768:	e7e3      	b.n	5732 <_malloc_r+0x1e>
    576a:	6823      	ldr	r3, [r4, #0]
    576c:	1b5b      	subs	r3, r3, r5
    576e:	d417      	bmi.n	57a0 <_malloc_r+0x8c>
    5770:	2b0b      	cmp	r3, #11
    5772:	d903      	bls.n	577c <_malloc_r+0x68>
    5774:	6023      	str	r3, [r4, #0]
    5776:	441c      	add	r4, r3
    5778:	6025      	str	r5, [r4, #0]
    577a:	e004      	b.n	5786 <_malloc_r+0x72>
    577c:	6863      	ldr	r3, [r4, #4]
    577e:	42a2      	cmp	r2, r4
    5780:	bf0c      	ite	eq
    5782:	600b      	streq	r3, [r1, #0]
    5784:	6053      	strne	r3, [r2, #4]
    5786:	4630      	mov	r0, r6
    5788:	f000 f8f8 	bl	597c <__malloc_unlock>
    578c:	f104 000b 	add.w	r0, r4, #11
    5790:	1d23      	adds	r3, r4, #4
    5792:	f020 0007 	bic.w	r0, r0, #7
    5796:	1ac2      	subs	r2, r0, r3
    5798:	bf1c      	itt	ne
    579a:	1a1b      	subne	r3, r3, r0
    579c:	50a3      	strne	r3, [r4, r2]
    579e:	e7c9      	b.n	5734 <_malloc_r+0x20>
    57a0:	4622      	mov	r2, r4
    57a2:	6864      	ldr	r4, [r4, #4]
    57a4:	e7cc      	b.n	5740 <_malloc_r+0x2c>
    57a6:	1cc4      	adds	r4, r0, #3
    57a8:	f024 0403 	bic.w	r4, r4, #3
    57ac:	42a0      	cmp	r0, r4
    57ae:	d0e3      	beq.n	5778 <_malloc_r+0x64>
    57b0:	1a21      	subs	r1, r4, r0
    57b2:	4630      	mov	r0, r6
    57b4:	f000 f808 	bl	57c8 <_sbrk_r>
    57b8:	3001      	adds	r0, #1
    57ba:	d1dd      	bne.n	5778 <_malloc_r+0x64>
    57bc:	e7cf      	b.n	575e <_malloc_r+0x4a>
    57be:	bf00      	nop
    57c0:	200017f0 	.word	0x200017f0
    57c4:	200017ec 	.word	0x200017ec

000057c8 <_sbrk_r>:
    57c8:	b538      	push	{r3, r4, r5, lr}
    57ca:	4d06      	ldr	r5, [pc, #24]	; (57e4 <_sbrk_r+0x1c>)
    57cc:	2300      	movs	r3, #0
    57ce:	4604      	mov	r4, r0
    57d0:	4608      	mov	r0, r1
    57d2:	602b      	str	r3, [r5, #0]
    57d4:	f7fc fb14 	bl	1e00 <_sbrk>
    57d8:	1c43      	adds	r3, r0, #1
    57da:	d102      	bne.n	57e2 <_sbrk_r+0x1a>
    57dc:	682b      	ldr	r3, [r5, #0]
    57de:	b103      	cbz	r3, 57e2 <_sbrk_r+0x1a>
    57e0:	6023      	str	r3, [r4, #0]
    57e2:	bd38      	pop	{r3, r4, r5, pc}
    57e4:	200017f4 	.word	0x200017f4

000057e8 <siscanf>:
    57e8:	b40e      	push	{r1, r2, r3}
    57ea:	b530      	push	{r4, r5, lr}
    57ec:	b09c      	sub	sp, #112	; 0x70
    57ee:	ac1f      	add	r4, sp, #124	; 0x7c
    57f0:	f44f 7201 	mov.w	r2, #516	; 0x204
    57f4:	f854 5b04 	ldr.w	r5, [r4], #4
    57f8:	f8ad 2014 	strh.w	r2, [sp, #20]
    57fc:	9002      	str	r0, [sp, #8]
    57fe:	9006      	str	r0, [sp, #24]
    5800:	f7fa fe32 	bl	468 <strlen>
    5804:	4b0b      	ldr	r3, [pc, #44]	; (5834 <siscanf+0x4c>)
    5806:	9003      	str	r0, [sp, #12]
    5808:	9007      	str	r0, [sp, #28]
    580a:	930b      	str	r3, [sp, #44]	; 0x2c
    580c:	480a      	ldr	r0, [pc, #40]	; (5838 <siscanf+0x50>)
    580e:	9401      	str	r4, [sp, #4]
    5810:	2300      	movs	r3, #0
    5812:	930f      	str	r3, [sp, #60]	; 0x3c
    5814:	9314      	str	r3, [sp, #80]	; 0x50
    5816:	f64f 73ff 	movw	r3, #65535	; 0xffff
    581a:	f8ad 3016 	strh.w	r3, [sp, #22]
    581e:	462a      	mov	r2, r5
    5820:	4623      	mov	r3, r4
    5822:	a902      	add	r1, sp, #8
    5824:	6800      	ldr	r0, [r0, #0]
    5826:	f000 f8af 	bl	5988 <__ssvfiscanf_r>
    582a:	b01c      	add	sp, #112	; 0x70
    582c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5830:	b003      	add	sp, #12
    5832:	4770      	bx	lr
    5834:	00008b1f 	.word	0x00008b1f
    5838:	20000a70 	.word	0x20000a70

0000583c <_strtol_l.constprop.0>:
    583c:	2b24      	cmp	r3, #36	; 0x24
    583e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5842:	4686      	mov	lr, r0
    5844:	4690      	mov	r8, r2
    5846:	d801      	bhi.n	584c <_strtol_l.constprop.0+0x10>
    5848:	2b01      	cmp	r3, #1
    584a:	d106      	bne.n	585a <_strtol_l.constprop.0+0x1e>
    584c:	f001 fada 	bl	6e04 <__errno>
    5850:	2316      	movs	r3, #22
    5852:	6003      	str	r3, [r0, #0]
    5854:	2000      	movs	r0, #0
    5856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    585a:	4836      	ldr	r0, [pc, #216]	; (5934 <_strtol_l.constprop.0+0xf8>)
    585c:	460d      	mov	r5, r1
    585e:	462a      	mov	r2, r5
    5860:	f815 4b01 	ldrb.w	r4, [r5], #1
    5864:	5d06      	ldrb	r6, [r0, r4]
    5866:	f016 0608 	ands.w	r6, r6, #8
    586a:	d1f8      	bne.n	585e <_strtol_l.constprop.0+0x22>
    586c:	2c2d      	cmp	r4, #45	; 0x2d
    586e:	d124      	bne.n	58ba <_strtol_l.constprop.0+0x7e>
    5870:	782c      	ldrb	r4, [r5, #0]
    5872:	2601      	movs	r6, #1
    5874:	1c95      	adds	r5, r2, #2
    5876:	bb2b      	cbnz	r3, 58c4 <_strtol_l.constprop.0+0x88>
    5878:	2c30      	cmp	r4, #48	; 0x30
    587a:	d030      	beq.n	58de <_strtol_l.constprop.0+0xa2>
    587c:	230a      	movs	r3, #10
    587e:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
    5882:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    5886:	2200      	movs	r2, #0
    5888:	fbbc f9f3 	udiv	r9, ip, r3
    588c:	4610      	mov	r0, r2
    588e:	fb03 ca19 	mls	sl, r3, r9, ip
    5892:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
    5896:	2f09      	cmp	r7, #9
    5898:	d828      	bhi.n	58ec <_strtol_l.constprop.0+0xb0>
    589a:	463c      	mov	r4, r7
    589c:	42a3      	cmp	r3, r4
    589e:	dd34      	ble.n	590a <_strtol_l.constprop.0+0xce>
    58a0:	1c57      	adds	r7, r2, #1
    58a2:	d007      	beq.n	58b4 <_strtol_l.constprop.0+0x78>
    58a4:	4581      	cmp	r9, r0
    58a6:	d32d      	bcc.n	5904 <_strtol_l.constprop.0+0xc8>
    58a8:	d101      	bne.n	58ae <_strtol_l.constprop.0+0x72>
    58aa:	45a2      	cmp	sl, r4
    58ac:	db2a      	blt.n	5904 <_strtol_l.constprop.0+0xc8>
    58ae:	fb00 4003 	mla	r0, r0, r3, r4
    58b2:	2201      	movs	r2, #1
    58b4:	f815 4b01 	ldrb.w	r4, [r5], #1
    58b8:	e7eb      	b.n	5892 <_strtol_l.constprop.0+0x56>
    58ba:	2c2b      	cmp	r4, #43	; 0x2b
    58bc:	bf04      	itt	eq
    58be:	782c      	ldrbeq	r4, [r5, #0]
    58c0:	1c95      	addeq	r5, r2, #2
    58c2:	e7d8      	b.n	5876 <_strtol_l.constprop.0+0x3a>
    58c4:	2b10      	cmp	r3, #16
    58c6:	d1da      	bne.n	587e <_strtol_l.constprop.0+0x42>
    58c8:	2c30      	cmp	r4, #48	; 0x30
    58ca:	d1d8      	bne.n	587e <_strtol_l.constprop.0+0x42>
    58cc:	782a      	ldrb	r2, [r5, #0]
    58ce:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    58d2:	2a58      	cmp	r2, #88	; 0x58
    58d4:	d1d3      	bne.n	587e <_strtol_l.constprop.0+0x42>
    58d6:	786c      	ldrb	r4, [r5, #1]
    58d8:	2310      	movs	r3, #16
    58da:	3502      	adds	r5, #2
    58dc:	e7cf      	b.n	587e <_strtol_l.constprop.0+0x42>
    58de:	782b      	ldrb	r3, [r5, #0]
    58e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    58e4:	2b58      	cmp	r3, #88	; 0x58
    58e6:	d0f6      	beq.n	58d6 <_strtol_l.constprop.0+0x9a>
    58e8:	2308      	movs	r3, #8
    58ea:	e7c8      	b.n	587e <_strtol_l.constprop.0+0x42>
    58ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
    58f0:	2f19      	cmp	r7, #25
    58f2:	d801      	bhi.n	58f8 <_strtol_l.constprop.0+0xbc>
    58f4:	3c37      	subs	r4, #55	; 0x37
    58f6:	e7d1      	b.n	589c <_strtol_l.constprop.0+0x60>
    58f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
    58fc:	2f19      	cmp	r7, #25
    58fe:	d804      	bhi.n	590a <_strtol_l.constprop.0+0xce>
    5900:	3c57      	subs	r4, #87	; 0x57
    5902:	e7cb      	b.n	589c <_strtol_l.constprop.0+0x60>
    5904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5908:	e7d4      	b.n	58b4 <_strtol_l.constprop.0+0x78>
    590a:	1c53      	adds	r3, r2, #1
    590c:	d108      	bne.n	5920 <_strtol_l.constprop.0+0xe4>
    590e:	2322      	movs	r3, #34	; 0x22
    5910:	f8ce 3000 	str.w	r3, [lr]
    5914:	4660      	mov	r0, ip
    5916:	f1b8 0f00 	cmp.w	r8, #0
    591a:	d09c      	beq.n	5856 <_strtol_l.constprop.0+0x1a>
    591c:	1e69      	subs	r1, r5, #1
    591e:	e006      	b.n	592e <_strtol_l.constprop.0+0xf2>
    5920:	b106      	cbz	r6, 5924 <_strtol_l.constprop.0+0xe8>
    5922:	4240      	negs	r0, r0
    5924:	f1b8 0f00 	cmp.w	r8, #0
    5928:	d095      	beq.n	5856 <_strtol_l.constprop.0+0x1a>
    592a:	2a00      	cmp	r2, #0
    592c:	d1f6      	bne.n	591c <_strtol_l.constprop.0+0xe0>
    592e:	f8c8 1000 	str.w	r1, [r8]
    5932:	e790      	b.n	5856 <_strtol_l.constprop.0+0x1a>
    5934:	00009655 	.word	0x00009655

00005938 <strtol>:
    5938:	4613      	mov	r3, r2
    593a:	460a      	mov	r2, r1
    593c:	4601      	mov	r1, r0
    593e:	4802      	ldr	r0, [pc, #8]	; (5948 <strtol+0x10>)
    5940:	6800      	ldr	r0, [r0, #0]
    5942:	f7ff bf7b 	b.w	583c <_strtol_l.constprop.0>
    5946:	bf00      	nop
    5948:	20000a70 	.word	0x20000a70

0000594c <strupr>:
    594c:	b510      	push	{r4, lr}
    594e:	4c07      	ldr	r4, [pc, #28]	; (596c <strupr+0x20>)
    5950:	1e42      	subs	r2, r0, #1
    5952:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    5956:	b903      	cbnz	r3, 595a <strupr+0xe>
    5958:	bd10      	pop	{r4, pc}
    595a:	5ce1      	ldrb	r1, [r4, r3]
    595c:	f001 0103 	and.w	r1, r1, #3
    5960:	2902      	cmp	r1, #2
    5962:	bf08      	it	eq
    5964:	3b20      	subeq	r3, #32
    5966:	7013      	strb	r3, [r2, #0]
    5968:	e7f3      	b.n	5952 <strupr+0x6>
    596a:	bf00      	nop
    596c:	00009655 	.word	0x00009655

00005970 <__malloc_lock>:
    5970:	4801      	ldr	r0, [pc, #4]	; (5978 <__malloc_lock+0x8>)
    5972:	f001 ba3b 	b.w	6dec <__retarget_lock_acquire_recursive>
    5976:	bf00      	nop
    5978:	20000ae0 	.word	0x20000ae0

0000597c <__malloc_unlock>:
    597c:	4801      	ldr	r0, [pc, #4]	; (5984 <__malloc_unlock+0x8>)
    597e:	f001 ba3d 	b.w	6dfc <__retarget_lock_release_recursive>
    5982:	bf00      	nop
    5984:	20000ae0 	.word	0x20000ae0

00005988 <__ssvfiscanf_r>:
    5988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    598c:	460c      	mov	r4, r1
    598e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
    5992:	2100      	movs	r1, #0
    5994:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
    5998:	49a6      	ldr	r1, [pc, #664]	; (5c34 <__ssvfiscanf_r+0x2ac>)
    599a:	91a0      	str	r1, [sp, #640]	; 0x280
    599c:	f10d 0804 	add.w	r8, sp, #4
    59a0:	49a5      	ldr	r1, [pc, #660]	; (5c38 <__ssvfiscanf_r+0x2b0>)
    59a2:	4fa6      	ldr	r7, [pc, #664]	; (5c3c <__ssvfiscanf_r+0x2b4>)
    59a4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
    59a8:	4606      	mov	r6, r0
    59aa:	91a1      	str	r1, [sp, #644]	; 0x284
    59ac:	9300      	str	r3, [sp, #0]
    59ae:	7813      	ldrb	r3, [r2, #0]
    59b0:	2b00      	cmp	r3, #0
    59b2:	f000 815a 	beq.w	5c6a <__ssvfiscanf_r+0x2e2>
    59b6:	5cf9      	ldrb	r1, [r7, r3]
    59b8:	f011 0108 	ands.w	r1, r1, #8
    59bc:	f102 0501 	add.w	r5, r2, #1
    59c0:	d019      	beq.n	59f6 <__ssvfiscanf_r+0x6e>
    59c2:	6863      	ldr	r3, [r4, #4]
    59c4:	2b00      	cmp	r3, #0
    59c6:	dd0f      	ble.n	59e8 <__ssvfiscanf_r+0x60>
    59c8:	6823      	ldr	r3, [r4, #0]
    59ca:	781a      	ldrb	r2, [r3, #0]
    59cc:	5cba      	ldrb	r2, [r7, r2]
    59ce:	0712      	lsls	r2, r2, #28
    59d0:	d401      	bmi.n	59d6 <__ssvfiscanf_r+0x4e>
    59d2:	462a      	mov	r2, r5
    59d4:	e7eb      	b.n	59ae <__ssvfiscanf_r+0x26>
    59d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
    59d8:	3201      	adds	r2, #1
    59da:	9245      	str	r2, [sp, #276]	; 0x114
    59dc:	6862      	ldr	r2, [r4, #4]
    59de:	3301      	adds	r3, #1
    59e0:	3a01      	subs	r2, #1
    59e2:	6062      	str	r2, [r4, #4]
    59e4:	6023      	str	r3, [r4, #0]
    59e6:	e7ec      	b.n	59c2 <__ssvfiscanf_r+0x3a>
    59e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    59ea:	4621      	mov	r1, r4
    59ec:	4630      	mov	r0, r6
    59ee:	4798      	blx	r3
    59f0:	2800      	cmp	r0, #0
    59f2:	d0e9      	beq.n	59c8 <__ssvfiscanf_r+0x40>
    59f4:	e7ed      	b.n	59d2 <__ssvfiscanf_r+0x4a>
    59f6:	2b25      	cmp	r3, #37	; 0x25
    59f8:	d012      	beq.n	5a20 <__ssvfiscanf_r+0x98>
    59fa:	4699      	mov	r9, r3
    59fc:	6863      	ldr	r3, [r4, #4]
    59fe:	2b00      	cmp	r3, #0
    5a00:	f340 8093 	ble.w	5b2a <__ssvfiscanf_r+0x1a2>
    5a04:	6822      	ldr	r2, [r4, #0]
    5a06:	7813      	ldrb	r3, [r2, #0]
    5a08:	454b      	cmp	r3, r9
    5a0a:	f040 812e 	bne.w	5c6a <__ssvfiscanf_r+0x2e2>
    5a0e:	6863      	ldr	r3, [r4, #4]
    5a10:	3b01      	subs	r3, #1
    5a12:	6063      	str	r3, [r4, #4]
    5a14:	9b45      	ldr	r3, [sp, #276]	; 0x114
    5a16:	3201      	adds	r2, #1
    5a18:	3301      	adds	r3, #1
    5a1a:	6022      	str	r2, [r4, #0]
    5a1c:	9345      	str	r3, [sp, #276]	; 0x114
    5a1e:	e7d8      	b.n	59d2 <__ssvfiscanf_r+0x4a>
    5a20:	9141      	str	r1, [sp, #260]	; 0x104
    5a22:	9143      	str	r1, [sp, #268]	; 0x10c
    5a24:	7853      	ldrb	r3, [r2, #1]
    5a26:	2b2a      	cmp	r3, #42	; 0x2a
    5a28:	bf02      	ittt	eq
    5a2a:	2310      	moveq	r3, #16
    5a2c:	1c95      	addeq	r5, r2, #2
    5a2e:	9341      	streq	r3, [sp, #260]	; 0x104
    5a30:	220a      	movs	r2, #10
    5a32:	46a9      	mov	r9, r5
    5a34:	f819 1b01 	ldrb.w	r1, [r9], #1
    5a38:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    5a3c:	2b09      	cmp	r3, #9
    5a3e:	d91e      	bls.n	5a7e <__ssvfiscanf_r+0xf6>
    5a40:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 5c40 <__ssvfiscanf_r+0x2b8>
    5a44:	2203      	movs	r2, #3
    5a46:	4650      	mov	r0, sl
    5a48:	f7fa fb4a 	bl	e0 <memchr>
    5a4c:	b138      	cbz	r0, 5a5e <__ssvfiscanf_r+0xd6>
    5a4e:	9a41      	ldr	r2, [sp, #260]	; 0x104
    5a50:	eba0 000a 	sub.w	r0, r0, sl
    5a54:	2301      	movs	r3, #1
    5a56:	4083      	lsls	r3, r0
    5a58:	4313      	orrs	r3, r2
    5a5a:	9341      	str	r3, [sp, #260]	; 0x104
    5a5c:	464d      	mov	r5, r9
    5a5e:	f815 3b01 	ldrb.w	r3, [r5], #1
    5a62:	2b78      	cmp	r3, #120	; 0x78
    5a64:	d806      	bhi.n	5a74 <__ssvfiscanf_r+0xec>
    5a66:	2b57      	cmp	r3, #87	; 0x57
    5a68:	d810      	bhi.n	5a8c <__ssvfiscanf_r+0x104>
    5a6a:	2b25      	cmp	r3, #37	; 0x25
    5a6c:	d0c5      	beq.n	59fa <__ssvfiscanf_r+0x72>
    5a6e:	d857      	bhi.n	5b20 <__ssvfiscanf_r+0x198>
    5a70:	2b00      	cmp	r3, #0
    5a72:	d065      	beq.n	5b40 <__ssvfiscanf_r+0x1b8>
    5a74:	2303      	movs	r3, #3
    5a76:	9347      	str	r3, [sp, #284]	; 0x11c
    5a78:	230a      	movs	r3, #10
    5a7a:	9342      	str	r3, [sp, #264]	; 0x108
    5a7c:	e06b      	b.n	5b56 <__ssvfiscanf_r+0x1ce>
    5a7e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    5a80:	fb02 1103 	mla	r1, r2, r3, r1
    5a84:	3930      	subs	r1, #48	; 0x30
    5a86:	9143      	str	r1, [sp, #268]	; 0x10c
    5a88:	464d      	mov	r5, r9
    5a8a:	e7d2      	b.n	5a32 <__ssvfiscanf_r+0xaa>
    5a8c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
    5a90:	2a20      	cmp	r2, #32
    5a92:	d8ef      	bhi.n	5a74 <__ssvfiscanf_r+0xec>
    5a94:	a101      	add	r1, pc, #4	; (adr r1, 5a9c <__ssvfiscanf_r+0x114>)
    5a96:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    5a9a:	bf00      	nop
    5a9c:	00005b8b 	.word	0x00005b8b
    5aa0:	00005a75 	.word	0x00005a75
    5aa4:	00005a75 	.word	0x00005a75
    5aa8:	00005bad 	.word	0x00005bad
    5aac:	00005a75 	.word	0x00005a75
    5ab0:	00005a75 	.word	0x00005a75
    5ab4:	00005a75 	.word	0x00005a75
    5ab8:	00005a75 	.word	0x00005a75
    5abc:	00005a75 	.word	0x00005a75
    5ac0:	00005a75 	.word	0x00005a75
    5ac4:	00005a75 	.word	0x00005a75
    5ac8:	00005bc3 	.word	0x00005bc3
    5acc:	00005ba9 	.word	0x00005ba9
    5ad0:	00005b27 	.word	0x00005b27
    5ad4:	00005b27 	.word	0x00005b27
    5ad8:	00005b27 	.word	0x00005b27
    5adc:	00005a75 	.word	0x00005a75
    5ae0:	00005b9d 	.word	0x00005b9d
    5ae4:	00005a75 	.word	0x00005a75
    5ae8:	00005a75 	.word	0x00005a75
    5aec:	00005a75 	.word	0x00005a75
    5af0:	00005a75 	.word	0x00005a75
    5af4:	00005bd3 	.word	0x00005bd3
    5af8:	00005ba5 	.word	0x00005ba5
    5afc:	00005b47 	.word	0x00005b47
    5b00:	00005a75 	.word	0x00005a75
    5b04:	00005a75 	.word	0x00005a75
    5b08:	00005bcf 	.word	0x00005bcf
    5b0c:	00005a75 	.word	0x00005a75
    5b10:	00005ba9 	.word	0x00005ba9
    5b14:	00005a75 	.word	0x00005a75
    5b18:	00005a75 	.word	0x00005a75
    5b1c:	00005b8b 	.word	0x00005b8b
    5b20:	3b45      	subs	r3, #69	; 0x45
    5b22:	2b02      	cmp	r3, #2
    5b24:	d8a6      	bhi.n	5a74 <__ssvfiscanf_r+0xec>
    5b26:	2305      	movs	r3, #5
    5b28:	e014      	b.n	5b54 <__ssvfiscanf_r+0x1cc>
    5b2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    5b2c:	4621      	mov	r1, r4
    5b2e:	4630      	mov	r0, r6
    5b30:	4798      	blx	r3
    5b32:	2800      	cmp	r0, #0
    5b34:	f43f af66 	beq.w	5a04 <__ssvfiscanf_r+0x7c>
    5b38:	9844      	ldr	r0, [sp, #272]	; 0x110
    5b3a:	2800      	cmp	r0, #0
    5b3c:	f040 808d 	bne.w	5c5a <__ssvfiscanf_r+0x2d2>
    5b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5b44:	e08d      	b.n	5c62 <__ssvfiscanf_r+0x2da>
    5b46:	9b41      	ldr	r3, [sp, #260]	; 0x104
    5b48:	f443 7308 	orr.w	r3, r3, #544	; 0x220
    5b4c:	9341      	str	r3, [sp, #260]	; 0x104
    5b4e:	2310      	movs	r3, #16
    5b50:	9342      	str	r3, [sp, #264]	; 0x108
    5b52:	2304      	movs	r3, #4
    5b54:	9347      	str	r3, [sp, #284]	; 0x11c
    5b56:	6863      	ldr	r3, [r4, #4]
    5b58:	2b00      	cmp	r3, #0
    5b5a:	dd49      	ble.n	5bf0 <__ssvfiscanf_r+0x268>
    5b5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
    5b5e:	0659      	lsls	r1, r3, #25
    5b60:	d404      	bmi.n	5b6c <__ssvfiscanf_r+0x1e4>
    5b62:	6823      	ldr	r3, [r4, #0]
    5b64:	781a      	ldrb	r2, [r3, #0]
    5b66:	5cba      	ldrb	r2, [r7, r2]
    5b68:	0712      	lsls	r2, r2, #28
    5b6a:	d448      	bmi.n	5bfe <__ssvfiscanf_r+0x276>
    5b6c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    5b6e:	2b02      	cmp	r3, #2
    5b70:	dc57      	bgt.n	5c22 <__ssvfiscanf_r+0x29a>
    5b72:	466b      	mov	r3, sp
    5b74:	4622      	mov	r2, r4
    5b76:	a941      	add	r1, sp, #260	; 0x104
    5b78:	4630      	mov	r0, r6
    5b7a:	f000 f87b 	bl	5c74 <_scanf_chars>
    5b7e:	2801      	cmp	r0, #1
    5b80:	d073      	beq.n	5c6a <__ssvfiscanf_r+0x2e2>
    5b82:	2802      	cmp	r0, #2
    5b84:	f47f af25 	bne.w	59d2 <__ssvfiscanf_r+0x4a>
    5b88:	e7d6      	b.n	5b38 <__ssvfiscanf_r+0x1b0>
    5b8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
    5b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    5b90:	9241      	str	r2, [sp, #260]	; 0x104
    5b92:	2210      	movs	r2, #16
    5b94:	2b6e      	cmp	r3, #110	; 0x6e
    5b96:	9242      	str	r2, [sp, #264]	; 0x108
    5b98:	d902      	bls.n	5ba0 <__ssvfiscanf_r+0x218>
    5b9a:	e7da      	b.n	5b52 <__ssvfiscanf_r+0x1ca>
    5b9c:	2300      	movs	r3, #0
    5b9e:	9342      	str	r3, [sp, #264]	; 0x108
    5ba0:	2303      	movs	r3, #3
    5ba2:	e7d7      	b.n	5b54 <__ssvfiscanf_r+0x1cc>
    5ba4:	2308      	movs	r3, #8
    5ba6:	e7d3      	b.n	5b50 <__ssvfiscanf_r+0x1c8>
    5ba8:	220a      	movs	r2, #10
    5baa:	e7f3      	b.n	5b94 <__ssvfiscanf_r+0x20c>
    5bac:	4629      	mov	r1, r5
    5bae:	4640      	mov	r0, r8
    5bb0:	f003 f830 	bl	8c14 <__sccl>
    5bb4:	9b41      	ldr	r3, [sp, #260]	; 0x104
    5bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5bba:	9341      	str	r3, [sp, #260]	; 0x104
    5bbc:	4605      	mov	r5, r0
    5bbe:	2301      	movs	r3, #1
    5bc0:	e7c8      	b.n	5b54 <__ssvfiscanf_r+0x1cc>
    5bc2:	9b41      	ldr	r3, [sp, #260]	; 0x104
    5bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5bc8:	9341      	str	r3, [sp, #260]	; 0x104
    5bca:	2300      	movs	r3, #0
    5bcc:	e7c2      	b.n	5b54 <__ssvfiscanf_r+0x1cc>
    5bce:	2302      	movs	r3, #2
    5bd0:	e7c0      	b.n	5b54 <__ssvfiscanf_r+0x1cc>
    5bd2:	9841      	ldr	r0, [sp, #260]	; 0x104
    5bd4:	06c3      	lsls	r3, r0, #27
    5bd6:	f53f aefc 	bmi.w	59d2 <__ssvfiscanf_r+0x4a>
    5bda:	9b00      	ldr	r3, [sp, #0]
    5bdc:	9a45      	ldr	r2, [sp, #276]	; 0x114
    5bde:	1d19      	adds	r1, r3, #4
    5be0:	9100      	str	r1, [sp, #0]
    5be2:	681b      	ldr	r3, [r3, #0]
    5be4:	f010 0f01 	tst.w	r0, #1
    5be8:	bf14      	ite	ne
    5bea:	801a      	strhne	r2, [r3, #0]
    5bec:	601a      	streq	r2, [r3, #0]
    5bee:	e6f0      	b.n	59d2 <__ssvfiscanf_r+0x4a>
    5bf0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    5bf2:	4621      	mov	r1, r4
    5bf4:	4630      	mov	r0, r6
    5bf6:	4798      	blx	r3
    5bf8:	2800      	cmp	r0, #0
    5bfa:	d0af      	beq.n	5b5c <__ssvfiscanf_r+0x1d4>
    5bfc:	e79c      	b.n	5b38 <__ssvfiscanf_r+0x1b0>
    5bfe:	9a45      	ldr	r2, [sp, #276]	; 0x114
    5c00:	3201      	adds	r2, #1
    5c02:	9245      	str	r2, [sp, #276]	; 0x114
    5c04:	6862      	ldr	r2, [r4, #4]
    5c06:	3a01      	subs	r2, #1
    5c08:	2a00      	cmp	r2, #0
    5c0a:	6062      	str	r2, [r4, #4]
    5c0c:	dd02      	ble.n	5c14 <__ssvfiscanf_r+0x28c>
    5c0e:	3301      	adds	r3, #1
    5c10:	6023      	str	r3, [r4, #0]
    5c12:	e7a6      	b.n	5b62 <__ssvfiscanf_r+0x1da>
    5c14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    5c16:	4621      	mov	r1, r4
    5c18:	4630      	mov	r0, r6
    5c1a:	4798      	blx	r3
    5c1c:	2800      	cmp	r0, #0
    5c1e:	d0a0      	beq.n	5b62 <__ssvfiscanf_r+0x1da>
    5c20:	e78a      	b.n	5b38 <__ssvfiscanf_r+0x1b0>
    5c22:	2b04      	cmp	r3, #4
    5c24:	dc0e      	bgt.n	5c44 <__ssvfiscanf_r+0x2bc>
    5c26:	466b      	mov	r3, sp
    5c28:	4622      	mov	r2, r4
    5c2a:	a941      	add	r1, sp, #260	; 0x104
    5c2c:	4630      	mov	r0, r6
    5c2e:	f000 f87b 	bl	5d28 <_scanf_i>
    5c32:	e7a4      	b.n	5b7e <__ssvfiscanf_r+0x1f6>
    5c34:	00008b65 	.word	0x00008b65
    5c38:	00008bdb 	.word	0x00008bdb
    5c3c:	00009655 	.word	0x00009655
    5c40:	00009755 	.word	0x00009755
    5c44:	4b0a      	ldr	r3, [pc, #40]	; (5c70 <__ssvfiscanf_r+0x2e8>)
    5c46:	2b00      	cmp	r3, #0
    5c48:	f43f aec3 	beq.w	59d2 <__ssvfiscanf_r+0x4a>
    5c4c:	466b      	mov	r3, sp
    5c4e:	4622      	mov	r2, r4
    5c50:	a941      	add	r1, sp, #260	; 0x104
    5c52:	4630      	mov	r0, r6
    5c54:	f3af 8000 	nop.w
    5c58:	e791      	b.n	5b7e <__ssvfiscanf_r+0x1f6>
    5c5a:	89a3      	ldrh	r3, [r4, #12]
    5c5c:	065b      	lsls	r3, r3, #25
    5c5e:	f53f af6f 	bmi.w	5b40 <__ssvfiscanf_r+0x1b8>
    5c62:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
    5c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c6a:	9844      	ldr	r0, [sp, #272]	; 0x110
    5c6c:	e7f9      	b.n	5c62 <__ssvfiscanf_r+0x2da>
    5c6e:	bf00      	nop
    5c70:	00000000 	.word	0x00000000

00005c74 <_scanf_chars>:
    5c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5c78:	4615      	mov	r5, r2
    5c7a:	688a      	ldr	r2, [r1, #8]
    5c7c:	4680      	mov	r8, r0
    5c7e:	460c      	mov	r4, r1
    5c80:	b932      	cbnz	r2, 5c90 <_scanf_chars+0x1c>
    5c82:	698a      	ldr	r2, [r1, #24]
    5c84:	2a00      	cmp	r2, #0
    5c86:	bf14      	ite	ne
    5c88:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    5c8c:	2201      	moveq	r2, #1
    5c8e:	608a      	str	r2, [r1, #8]
    5c90:	6822      	ldr	r2, [r4, #0]
    5c92:	f8df 9090 	ldr.w	r9, [pc, #144]	; 5d24 <_scanf_chars+0xb0>
    5c96:	06d1      	lsls	r1, r2, #27
    5c98:	bf5f      	itttt	pl
    5c9a:	681a      	ldrpl	r2, [r3, #0]
    5c9c:	1d11      	addpl	r1, r2, #4
    5c9e:	6019      	strpl	r1, [r3, #0]
    5ca0:	6816      	ldrpl	r6, [r2, #0]
    5ca2:	2700      	movs	r7, #0
    5ca4:	69a0      	ldr	r0, [r4, #24]
    5ca6:	b188      	cbz	r0, 5ccc <_scanf_chars+0x58>
    5ca8:	2801      	cmp	r0, #1
    5caa:	d107      	bne.n	5cbc <_scanf_chars+0x48>
    5cac:	682b      	ldr	r3, [r5, #0]
    5cae:	781a      	ldrb	r2, [r3, #0]
    5cb0:	6963      	ldr	r3, [r4, #20]
    5cb2:	5c9b      	ldrb	r3, [r3, r2]
    5cb4:	b953      	cbnz	r3, 5ccc <_scanf_chars+0x58>
    5cb6:	2f00      	cmp	r7, #0
    5cb8:	d031      	beq.n	5d1e <_scanf_chars+0xaa>
    5cba:	e022      	b.n	5d02 <_scanf_chars+0x8e>
    5cbc:	2802      	cmp	r0, #2
    5cbe:	d120      	bne.n	5d02 <_scanf_chars+0x8e>
    5cc0:	682b      	ldr	r3, [r5, #0]
    5cc2:	781b      	ldrb	r3, [r3, #0]
    5cc4:	f819 3003 	ldrb.w	r3, [r9, r3]
    5cc8:	071b      	lsls	r3, r3, #28
    5cca:	d41a      	bmi.n	5d02 <_scanf_chars+0x8e>
    5ccc:	6823      	ldr	r3, [r4, #0]
    5cce:	06da      	lsls	r2, r3, #27
    5cd0:	bf5e      	ittt	pl
    5cd2:	682b      	ldrpl	r3, [r5, #0]
    5cd4:	781b      	ldrbpl	r3, [r3, #0]
    5cd6:	f806 3b01 	strbpl.w	r3, [r6], #1
    5cda:	682a      	ldr	r2, [r5, #0]
    5cdc:	686b      	ldr	r3, [r5, #4]
    5cde:	3201      	adds	r2, #1
    5ce0:	602a      	str	r2, [r5, #0]
    5ce2:	68a2      	ldr	r2, [r4, #8]
    5ce4:	3b01      	subs	r3, #1
    5ce6:	3a01      	subs	r2, #1
    5ce8:	606b      	str	r3, [r5, #4]
    5cea:	3701      	adds	r7, #1
    5cec:	60a2      	str	r2, [r4, #8]
    5cee:	b142      	cbz	r2, 5d02 <_scanf_chars+0x8e>
    5cf0:	2b00      	cmp	r3, #0
    5cf2:	dcd7      	bgt.n	5ca4 <_scanf_chars+0x30>
    5cf4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    5cf8:	4629      	mov	r1, r5
    5cfa:	4640      	mov	r0, r8
    5cfc:	4798      	blx	r3
    5cfe:	2800      	cmp	r0, #0
    5d00:	d0d0      	beq.n	5ca4 <_scanf_chars+0x30>
    5d02:	6823      	ldr	r3, [r4, #0]
    5d04:	f013 0310 	ands.w	r3, r3, #16
    5d08:	d105      	bne.n	5d16 <_scanf_chars+0xa2>
    5d0a:	68e2      	ldr	r2, [r4, #12]
    5d0c:	3201      	adds	r2, #1
    5d0e:	60e2      	str	r2, [r4, #12]
    5d10:	69a2      	ldr	r2, [r4, #24]
    5d12:	b102      	cbz	r2, 5d16 <_scanf_chars+0xa2>
    5d14:	7033      	strb	r3, [r6, #0]
    5d16:	6923      	ldr	r3, [r4, #16]
    5d18:	443b      	add	r3, r7
    5d1a:	6123      	str	r3, [r4, #16]
    5d1c:	2000      	movs	r0, #0
    5d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d22:	bf00      	nop
    5d24:	00009655 	.word	0x00009655

00005d28 <_scanf_i>:
    5d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d2c:	4698      	mov	r8, r3
    5d2e:	4b7a      	ldr	r3, [pc, #488]	; (5f18 <_scanf_i+0x1f0>)
    5d30:	460c      	mov	r4, r1
    5d32:	4682      	mov	sl, r0
    5d34:	4616      	mov	r6, r2
    5d36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5d3a:	b087      	sub	sp, #28
    5d3c:	ab03      	add	r3, sp, #12
    5d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    5d42:	4b76      	ldr	r3, [pc, #472]	; (5f1c <_scanf_i+0x1f4>)
    5d44:	69a1      	ldr	r1, [r4, #24]
    5d46:	4a76      	ldr	r2, [pc, #472]	; (5f20 <_scanf_i+0x1f8>)
    5d48:	2903      	cmp	r1, #3
    5d4a:	bf08      	it	eq
    5d4c:	461a      	moveq	r2, r3
    5d4e:	68a3      	ldr	r3, [r4, #8]
    5d50:	9201      	str	r2, [sp, #4]
    5d52:	1e5a      	subs	r2, r3, #1
    5d54:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
    5d58:	bf88      	it	hi
    5d5a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    5d5e:	4627      	mov	r7, r4
    5d60:	bf82      	ittt	hi
    5d62:	eb03 0905 	addhi.w	r9, r3, r5
    5d66:	f240 135d 	movwhi	r3, #349	; 0x15d
    5d6a:	60a3      	strhi	r3, [r4, #8]
    5d6c:	f857 3b1c 	ldr.w	r3, [r7], #28
    5d70:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    5d74:	bf98      	it	ls
    5d76:	f04f 0900 	movls.w	r9, #0
    5d7a:	6023      	str	r3, [r4, #0]
    5d7c:	463d      	mov	r5, r7
    5d7e:	f04f 0b00 	mov.w	fp, #0
    5d82:	6831      	ldr	r1, [r6, #0]
    5d84:	ab03      	add	r3, sp, #12
    5d86:	7809      	ldrb	r1, [r1, #0]
    5d88:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
    5d8c:	2202      	movs	r2, #2
    5d8e:	f7fa f9a7 	bl	e0 <memchr>
    5d92:	2800      	cmp	r0, #0
    5d94:	d040      	beq.n	5e18 <_scanf_i+0xf0>
    5d96:	f1bb 0f01 	cmp.w	fp, #1
    5d9a:	d112      	bne.n	5dc2 <_scanf_i+0x9a>
    5d9c:	6862      	ldr	r2, [r4, #4]
    5d9e:	b92a      	cbnz	r2, 5dac <_scanf_i+0x84>
    5da0:	6822      	ldr	r2, [r4, #0]
    5da2:	2108      	movs	r1, #8
    5da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    5da8:	6061      	str	r1, [r4, #4]
    5daa:	6022      	str	r2, [r4, #0]
    5dac:	6822      	ldr	r2, [r4, #0]
    5dae:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    5db2:	6022      	str	r2, [r4, #0]
    5db4:	68a2      	ldr	r2, [r4, #8]
    5db6:	1e51      	subs	r1, r2, #1
    5db8:	60a1      	str	r1, [r4, #8]
    5dba:	b9da      	cbnz	r2, 5df4 <_scanf_i+0xcc>
    5dbc:	f04f 0b02 	mov.w	fp, #2
    5dc0:	e7df      	b.n	5d82 <_scanf_i+0x5a>
    5dc2:	f1bb 0f02 	cmp.w	fp, #2
    5dc6:	d006      	beq.n	5dd6 <_scanf_i+0xae>
    5dc8:	68a2      	ldr	r2, [r4, #8]
    5dca:	1e51      	subs	r1, r2, #1
    5dcc:	60a1      	str	r1, [r4, #8]
    5dce:	b98a      	cbnz	r2, 5df4 <_scanf_i+0xcc>
    5dd0:	f04f 0b01 	mov.w	fp, #1
    5dd4:	e7d5      	b.n	5d82 <_scanf_i+0x5a>
    5dd6:	6822      	ldr	r2, [r4, #0]
    5dd8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    5ddc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    5de0:	d11f      	bne.n	5e22 <_scanf_i+0xfa>
    5de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5de6:	6022      	str	r2, [r4, #0]
    5de8:	68a2      	ldr	r2, [r4, #8]
    5dea:	2110      	movs	r1, #16
    5dec:	6061      	str	r1, [r4, #4]
    5dee:	1e51      	subs	r1, r2, #1
    5df0:	60a1      	str	r1, [r4, #8]
    5df2:	b1b2      	cbz	r2, 5e22 <_scanf_i+0xfa>
    5df4:	6832      	ldr	r2, [r6, #0]
    5df6:	1c51      	adds	r1, r2, #1
    5df8:	6031      	str	r1, [r6, #0]
    5dfa:	7812      	ldrb	r2, [r2, #0]
    5dfc:	f805 2b01 	strb.w	r2, [r5], #1
    5e00:	6872      	ldr	r2, [r6, #4]
    5e02:	3a01      	subs	r2, #1
    5e04:	2a00      	cmp	r2, #0
    5e06:	6072      	str	r2, [r6, #4]
    5e08:	dc06      	bgt.n	5e18 <_scanf_i+0xf0>
    5e0a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
    5e0e:	4631      	mov	r1, r6
    5e10:	4650      	mov	r0, sl
    5e12:	4790      	blx	r2
    5e14:	2800      	cmp	r0, #0
    5e16:	d174      	bne.n	5f02 <_scanf_i+0x1da>
    5e18:	f10b 0b01 	add.w	fp, fp, #1
    5e1c:	f1bb 0f03 	cmp.w	fp, #3
    5e20:	d1af      	bne.n	5d82 <_scanf_i+0x5a>
    5e22:	6863      	ldr	r3, [r4, #4]
    5e24:	b90b      	cbnz	r3, 5e2a <_scanf_i+0x102>
    5e26:	230a      	movs	r3, #10
    5e28:	6063      	str	r3, [r4, #4]
    5e2a:	6863      	ldr	r3, [r4, #4]
    5e2c:	493d      	ldr	r1, [pc, #244]	; (5f24 <_scanf_i+0x1fc>)
    5e2e:	6960      	ldr	r0, [r4, #20]
    5e30:	1ac9      	subs	r1, r1, r3
    5e32:	f002 feef 	bl	8c14 <__sccl>
    5e36:	f04f 0b00 	mov.w	fp, #0
    5e3a:	68a3      	ldr	r3, [r4, #8]
    5e3c:	6822      	ldr	r2, [r4, #0]
    5e3e:	b373      	cbz	r3, 5e9e <_scanf_i+0x176>
    5e40:	6831      	ldr	r1, [r6, #0]
    5e42:	6960      	ldr	r0, [r4, #20]
    5e44:	f891 c000 	ldrb.w	ip, [r1]
    5e48:	f810 000c 	ldrb.w	r0, [r0, ip]
    5e4c:	b338      	cbz	r0, 5e9e <_scanf_i+0x176>
    5e4e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
    5e52:	d116      	bne.n	5e82 <_scanf_i+0x15a>
    5e54:	0510      	lsls	r0, r2, #20
    5e56:	d514      	bpl.n	5e82 <_scanf_i+0x15a>
    5e58:	f10b 0b01 	add.w	fp, fp, #1
    5e5c:	f1b9 0f00 	cmp.w	r9, #0
    5e60:	d003      	beq.n	5e6a <_scanf_i+0x142>
    5e62:	3301      	adds	r3, #1
    5e64:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    5e68:	60a3      	str	r3, [r4, #8]
    5e6a:	6873      	ldr	r3, [r6, #4]
    5e6c:	3b01      	subs	r3, #1
    5e6e:	2b00      	cmp	r3, #0
    5e70:	6073      	str	r3, [r6, #4]
    5e72:	dd0d      	ble.n	5e90 <_scanf_i+0x168>
    5e74:	6833      	ldr	r3, [r6, #0]
    5e76:	3301      	adds	r3, #1
    5e78:	6033      	str	r3, [r6, #0]
    5e7a:	68a3      	ldr	r3, [r4, #8]
    5e7c:	3b01      	subs	r3, #1
    5e7e:	60a3      	str	r3, [r4, #8]
    5e80:	e7db      	b.n	5e3a <_scanf_i+0x112>
    5e82:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    5e86:	6022      	str	r2, [r4, #0]
    5e88:	780b      	ldrb	r3, [r1, #0]
    5e8a:	f805 3b01 	strb.w	r3, [r5], #1
    5e8e:	e7ec      	b.n	5e6a <_scanf_i+0x142>
    5e90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    5e94:	4631      	mov	r1, r6
    5e96:	4650      	mov	r0, sl
    5e98:	4798      	blx	r3
    5e9a:	2800      	cmp	r0, #0
    5e9c:	d0ed      	beq.n	5e7a <_scanf_i+0x152>
    5e9e:	6823      	ldr	r3, [r4, #0]
    5ea0:	05d9      	lsls	r1, r3, #23
    5ea2:	d50d      	bpl.n	5ec0 <_scanf_i+0x198>
    5ea4:	42bd      	cmp	r5, r7
    5ea6:	d909      	bls.n	5ebc <_scanf_i+0x194>
    5ea8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    5eac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    5eb0:	4632      	mov	r2, r6
    5eb2:	4650      	mov	r0, sl
    5eb4:	4798      	blx	r3
    5eb6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
    5eba:	464d      	mov	r5, r9
    5ebc:	42bd      	cmp	r5, r7
    5ebe:	d028      	beq.n	5f12 <_scanf_i+0x1ea>
    5ec0:	6822      	ldr	r2, [r4, #0]
    5ec2:	f012 0210 	ands.w	r2, r2, #16
    5ec6:	d113      	bne.n	5ef0 <_scanf_i+0x1c8>
    5ec8:	702a      	strb	r2, [r5, #0]
    5eca:	6863      	ldr	r3, [r4, #4]
    5ecc:	9e01      	ldr	r6, [sp, #4]
    5ece:	4639      	mov	r1, r7
    5ed0:	4650      	mov	r0, sl
    5ed2:	47b0      	blx	r6
    5ed4:	f8d8 3000 	ldr.w	r3, [r8]
    5ed8:	6821      	ldr	r1, [r4, #0]
    5eda:	1d1a      	adds	r2, r3, #4
    5edc:	f8c8 2000 	str.w	r2, [r8]
    5ee0:	f011 0f20 	tst.w	r1, #32
    5ee4:	681b      	ldr	r3, [r3, #0]
    5ee6:	d00f      	beq.n	5f08 <_scanf_i+0x1e0>
    5ee8:	6018      	str	r0, [r3, #0]
    5eea:	68e3      	ldr	r3, [r4, #12]
    5eec:	3301      	adds	r3, #1
    5eee:	60e3      	str	r3, [r4, #12]
    5ef0:	6923      	ldr	r3, [r4, #16]
    5ef2:	1bed      	subs	r5, r5, r7
    5ef4:	445d      	add	r5, fp
    5ef6:	442b      	add	r3, r5
    5ef8:	6123      	str	r3, [r4, #16]
    5efa:	2000      	movs	r0, #0
    5efc:	b007      	add	sp, #28
    5efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f02:	f04f 0b00 	mov.w	fp, #0
    5f06:	e7ca      	b.n	5e9e <_scanf_i+0x176>
    5f08:	07ca      	lsls	r2, r1, #31
    5f0a:	bf4c      	ite	mi
    5f0c:	8018      	strhmi	r0, [r3, #0]
    5f0e:	6018      	strpl	r0, [r3, #0]
    5f10:	e7eb      	b.n	5eea <_scanf_i+0x1c2>
    5f12:	2001      	movs	r0, #1
    5f14:	e7f2      	b.n	5efc <_scanf_i+0x1d4>
    5f16:	bf00      	nop
    5f18:	00009040 	.word	0x00009040
    5f1c:	00008b61 	.word	0x00008b61
    5f20:	00008c87 	.word	0x00008c87
    5f24:	00009769 	.word	0x00009769

00005f28 <_strtoul_l.constprop.0>:
    5f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5f2c:	4e36      	ldr	r6, [pc, #216]	; (6008 <_strtoul_l.constprop.0+0xe0>)
    5f2e:	4686      	mov	lr, r0
    5f30:	460d      	mov	r5, r1
    5f32:	4628      	mov	r0, r5
    5f34:	f815 4b01 	ldrb.w	r4, [r5], #1
    5f38:	5d37      	ldrb	r7, [r6, r4]
    5f3a:	f017 0708 	ands.w	r7, r7, #8
    5f3e:	d1f8      	bne.n	5f32 <_strtoul_l.constprop.0+0xa>
    5f40:	2c2d      	cmp	r4, #45	; 0x2d
    5f42:	d126      	bne.n	5f92 <_strtoul_l.constprop.0+0x6a>
    5f44:	782c      	ldrb	r4, [r5, #0]
    5f46:	2701      	movs	r7, #1
    5f48:	1c85      	adds	r5, r0, #2
    5f4a:	bb3b      	cbnz	r3, 5f9c <_strtoul_l.constprop.0+0x74>
    5f4c:	2c30      	cmp	r4, #48	; 0x30
    5f4e:	d032      	beq.n	5fb6 <_strtoul_l.constprop.0+0x8e>
    5f50:	230a      	movs	r3, #10
    5f52:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    5f56:	2600      	movs	r6, #0
    5f58:	fbb8 f8f3 	udiv	r8, r8, r3
    5f5c:	fb03 f908 	mul.w	r9, r3, r8
    5f60:	ea6f 0909 	mvn.w	r9, r9
    5f64:	4630      	mov	r0, r6
    5f66:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
    5f6a:	f1bc 0f09 	cmp.w	ip, #9
    5f6e:	d829      	bhi.n	5fc4 <_strtoul_l.constprop.0+0x9c>
    5f70:	4664      	mov	r4, ip
    5f72:	42a3      	cmp	r3, r4
    5f74:	dd37      	ble.n	5fe6 <_strtoul_l.constprop.0+0xbe>
    5f76:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    5f7a:	d007      	beq.n	5f8c <_strtoul_l.constprop.0+0x64>
    5f7c:	4580      	cmp	r8, r0
    5f7e:	d32f      	bcc.n	5fe0 <_strtoul_l.constprop.0+0xb8>
    5f80:	d101      	bne.n	5f86 <_strtoul_l.constprop.0+0x5e>
    5f82:	45a1      	cmp	r9, r4
    5f84:	db2c      	blt.n	5fe0 <_strtoul_l.constprop.0+0xb8>
    5f86:	fb00 4003 	mla	r0, r0, r3, r4
    5f8a:	2601      	movs	r6, #1
    5f8c:	f815 4b01 	ldrb.w	r4, [r5], #1
    5f90:	e7e9      	b.n	5f66 <_strtoul_l.constprop.0+0x3e>
    5f92:	2c2b      	cmp	r4, #43	; 0x2b
    5f94:	bf04      	itt	eq
    5f96:	782c      	ldrbeq	r4, [r5, #0]
    5f98:	1c85      	addeq	r5, r0, #2
    5f9a:	e7d6      	b.n	5f4a <_strtoul_l.constprop.0+0x22>
    5f9c:	2b10      	cmp	r3, #16
    5f9e:	d1d8      	bne.n	5f52 <_strtoul_l.constprop.0+0x2a>
    5fa0:	2c30      	cmp	r4, #48	; 0x30
    5fa2:	d1d6      	bne.n	5f52 <_strtoul_l.constprop.0+0x2a>
    5fa4:	7828      	ldrb	r0, [r5, #0]
    5fa6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    5faa:	2858      	cmp	r0, #88	; 0x58
    5fac:	d1d1      	bne.n	5f52 <_strtoul_l.constprop.0+0x2a>
    5fae:	786c      	ldrb	r4, [r5, #1]
    5fb0:	2310      	movs	r3, #16
    5fb2:	3502      	adds	r5, #2
    5fb4:	e7cd      	b.n	5f52 <_strtoul_l.constprop.0+0x2a>
    5fb6:	782b      	ldrb	r3, [r5, #0]
    5fb8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    5fbc:	2b58      	cmp	r3, #88	; 0x58
    5fbe:	d0f6      	beq.n	5fae <_strtoul_l.constprop.0+0x86>
    5fc0:	2308      	movs	r3, #8
    5fc2:	e7c6      	b.n	5f52 <_strtoul_l.constprop.0+0x2a>
    5fc4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
    5fc8:	f1bc 0f19 	cmp.w	ip, #25
    5fcc:	d801      	bhi.n	5fd2 <_strtoul_l.constprop.0+0xaa>
    5fce:	3c37      	subs	r4, #55	; 0x37
    5fd0:	e7cf      	b.n	5f72 <_strtoul_l.constprop.0+0x4a>
    5fd2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
    5fd6:	f1bc 0f19 	cmp.w	ip, #25
    5fda:	d804      	bhi.n	5fe6 <_strtoul_l.constprop.0+0xbe>
    5fdc:	3c57      	subs	r4, #87	; 0x57
    5fde:	e7c8      	b.n	5f72 <_strtoul_l.constprop.0+0x4a>
    5fe0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    5fe4:	e7d2      	b.n	5f8c <_strtoul_l.constprop.0+0x64>
    5fe6:	1c73      	adds	r3, r6, #1
    5fe8:	d106      	bne.n	5ff8 <_strtoul_l.constprop.0+0xd0>
    5fea:	2322      	movs	r3, #34	; 0x22
    5fec:	f8ce 3000 	str.w	r3, [lr]
    5ff0:	4630      	mov	r0, r6
    5ff2:	b932      	cbnz	r2, 6002 <_strtoul_l.constprop.0+0xda>
    5ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5ff8:	b107      	cbz	r7, 5ffc <_strtoul_l.constprop.0+0xd4>
    5ffa:	4240      	negs	r0, r0
    5ffc:	2a00      	cmp	r2, #0
    5ffe:	d0f9      	beq.n	5ff4 <_strtoul_l.constprop.0+0xcc>
    6000:	b106      	cbz	r6, 6004 <_strtoul_l.constprop.0+0xdc>
    6002:	1e69      	subs	r1, r5, #1
    6004:	6011      	str	r1, [r2, #0]
    6006:	e7f5      	b.n	5ff4 <_strtoul_l.constprop.0+0xcc>
    6008:	00009655 	.word	0x00009655

0000600c <z_impl_gpio_pin_interrupt_configure>:
{
    600c:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
    600e:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
    6010:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    6012:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    6016:	d006      	beq.n	6026 <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    6018:	6825      	ldr	r5, [r4, #0]
    601a:	2401      	movs	r4, #1
    601c:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    601e:	4225      	tst	r5, r4
    6020:	d001      	beq.n	6026 <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    6022:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    6026:	699c      	ldr	r4, [r3, #24]
    6028:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    602c:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
    6030:	47a0      	blx	r4
}
    6032:	bd38      	pop	{r3, r4, r5, pc}

00006034 <z_impl_gpio_pin_configure>:
{
    6034:	b538      	push	{r3, r4, r5, lr}
    6036:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    6038:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    603a:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    603c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    6040:	d007      	beq.n	6052 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    6042:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    6046:	d004      	beq.n	6052 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    6048:	f012 0f01 	tst.w	r2, #1
    604c:	d001      	beq.n	6052 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    604e:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    6052:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    6056:	f013 0f01 	tst.w	r3, #1
    605a:	d00a      	beq.n	6072 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    605c:	6823      	ldr	r3, [r4, #0]
    605e:	f04f 0c01 	mov.w	ip, #1
    6062:	fa0c fc01 	lsl.w	ip, ip, r1
    6066:	ea43 030c 	orr.w	r3, r3, ip
    606a:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    606c:	682b      	ldr	r3, [r5, #0]
    606e:	4798      	blx	r3
}
    6070:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    6072:	6823      	ldr	r3, [r4, #0]
    6074:	f04f 0c01 	mov.w	ip, #1
    6078:	fa0c fc01 	lsl.w	ip, ip, r1
    607c:	ea23 030c 	bic.w	r3, r3, ip
    6080:	6023      	str	r3, [r4, #0]
    6082:	e7f3      	b.n	606c <z_impl_gpio_pin_configure+0x38>

00006084 <gpio_pin_configure_dt>:
{
    6084:	b508      	push	{r3, lr}
    6086:	4603      	mov	r3, r0
    6088:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
    608a:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    608c:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    608e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    6090:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    6094:	f7ff ffce 	bl	6034 <z_impl_gpio_pin_configure>
}
    6098:	bd08      	pop	{r3, pc}

0000609a <gpio_pin_toggle_dt>:
{
    609a:	b508      	push	{r3, lr}
    609c:	4603      	mov	r3, r0
	return gpio_pin_toggle(spec->port, spec->pin);
    609e:	6800      	ldr	r0, [r0, #0]
    60a0:	791b      	ldrb	r3, [r3, #4]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    60a2:	2101      	movs	r1, #1
    60a4:	4099      	lsls	r1, r3
	const struct gpio_driver_api *api =
    60a6:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
    60a8:	695b      	ldr	r3, [r3, #20]
    60aa:	4798      	blx	r3
}
    60ac:	bd08      	pop	{r3, pc}

000060ae <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
    60ae:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
    60b0:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    60b2:	69db      	ldr	r3, [r3, #28]
    60b4:	b113      	cbz	r3, 60bc <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    60b6:	2201      	movs	r2, #1
    60b8:	4798      	blx	r3
}
    60ba:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
    60bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    60c0:	e7fb      	b.n	60ba <gpio_add_callback+0xc>

000060c2 <pwm_set_cycles>:

extern int z_impl_pwm_set_cycles(const struct device * dev, uint32_t channel, uint32_t period, uint32_t pulse, pwm_flags_t flags);

__pinned_func
static inline int pwm_set_cycles(const struct device * dev, uint32_t channel, uint32_t period, uint32_t pulse, pwm_flags_t flags)
{
    60c2:	b530      	push	{r4, r5, lr}
    60c4:	b083      	sub	sp, #12
	const struct pwm_driver_api *api =
    60c6:	6884      	ldr	r4, [r0, #8]
	if (pulse > period) {
    60c8:	429a      	cmp	r2, r3
    60ca:	d306      	bcc.n	60da <pwm_set_cycles+0x18>
	return api->set_cycles(dev, channel, period, pulse, flags);
    60cc:	6824      	ldr	r4, [r4, #0]
    60ce:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    60d2:	9500      	str	r5, [sp, #0]
    60d4:	47a0      	blx	r4
		return (int) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, K_SYSCALL_PWM_SET_CYCLES);
	}
#endif
	compiler_barrier();
	return z_impl_pwm_set_cycles(dev, channel, period, pulse, flags);
}
    60d6:	b003      	add	sp, #12
    60d8:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    60da:	f06f 0015 	mvn.w	r0, #21
	return z_impl_pwm_set_cycles(dev, channel, period, pulse, flags);
    60de:	e7fa      	b.n	60d6 <pwm_set_cycles+0x14>

000060e0 <pwm_set_dt>:
 *
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
			     uint32_t pulse)
{
    60e0:	b500      	push	{lr}
    60e2:	b083      	sub	sp, #12
    60e4:	4613      	mov	r3, r2
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
    60e6:	8982      	ldrh	r2, [r0, #12]
    60e8:	9200      	str	r2, [sp, #0]
    60ea:	460a      	mov	r2, r1
    60ec:	6841      	ldr	r1, [r0, #4]
    60ee:	6800      	ldr	r0, [r0, #0]
    60f0:	f7fa f9c2 	bl	478 <pwm_set>
}
    60f4:	b003      	add	sp, #12
    60f6:	f85d fb04 	ldr.w	pc, [sp], #4

000060fa <adc_channel_setup_dt>:
{
    60fa:	b508      	push	{r3, lr}
	if (!spec->channel_cfg_dt_node_exists) {
    60fc:	7943      	ldrb	r3, [r0, #5]
    60fe:	b133      	cbz	r3, 610e <adc_channel_setup_dt+0x14>
    6100:	4601      	mov	r1, r0
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    6102:	f851 0b06 	ldr.w	r0, [r1], #6
	const struct adc_driver_api *api =
    6106:	6883      	ldr	r3, [r0, #8]
	return api->channel_setup(dev, channel_cfg);
    6108:	681b      	ldr	r3, [r3, #0]
    610a:	4798      	blx	r3
}
    610c:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
    610e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6112:	e7fb      	b.n	610c <adc_channel_setup_dt+0x12>

00006114 <k_msleep>:
{
    6114:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    6116:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    611a:	17c1      	asrs	r1, r0, #31
    611c:	03c9      	lsls	r1, r1, #15
    611e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    6122:	03c0      	lsls	r0, r0, #15
    6124:	f240 33e7 	movw	r3, #999	; 0x3e7
    6128:	18c0      	adds	r0, r0, r3
    612a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    612e:	f04f 0300 	mov.w	r3, #0
    6132:	f141 0100 	adc.w	r1, r1, #0
    6136:	f7fa f823 	bl	180 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    613a:	f7ff f81b 	bl	5174 <z_impl_k_sleep>
}
    613e:	bd08      	pop	{r3, pc}

00006140 <arch_printk_char_out>:
}
    6140:	2000      	movs	r0, #0
    6142:	4770      	bx	lr

00006144 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    6144:	b40f      	push	{r0, r1, r2, r3}
    6146:	b500      	push	{lr}
    6148:	b083      	sub	sp, #12
    614a:	a904      	add	r1, sp, #16
    614c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6150:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    6152:	f7fa fc61 	bl	a18 <vprintk>

	va_end(ap);
}
    6156:	b003      	add	sp, #12
    6158:	f85d eb04 	ldr.w	lr, [sp], #4
    615c:	b004      	add	sp, #16
    615e:	4770      	bx	lr

00006160 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6160:	b508      	push	{r3, lr}
    6162:	4604      	mov	r4, r0
    6164:	4608      	mov	r0, r1
    6166:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6168:	461a      	mov	r2, r3
    616a:	47a0      	blx	r4
	return z_impl_z_current_get();
    616c:	f7ff f82c 	bl	51c8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6170:	f7fb fd96 	bl	1ca0 <z_impl_k_thread_abort>

00006174 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    6174:	00c9      	lsls	r1, r1, #3
    6176:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
    6178:	4408      	add	r0, r1
    617a:	4770      	bx	lr

0000617c <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    617c:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    6180:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    6184:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
    6186:	4299      	cmp	r1, r3
    6188:	d00c      	beq.n	61a4 <free_list_remove_bidx+0x28>
    618a:	4484      	add	ip, r0
    618c:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
    6190:	3204      	adds	r2, #4
    6192:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    6196:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    6198:	3206      	adds	r2, #6
    619a:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
    619c:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    619e:	3304      	adds	r3, #4
    61a0:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    61a2:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
    61a4:	68c3      	ldr	r3, [r0, #12]
    61a6:	2101      	movs	r1, #1
    61a8:	4091      	lsls	r1, r2
    61aa:	ea23 0301 	bic.w	r3, r3, r1
    61ae:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    61b0:	3204      	adds	r2, #4
    61b2:	2300      	movs	r3, #0
    61b4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    61b8:	4770      	bx	lr

000061ba <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    61ba:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    61bc:	1d13      	adds	r3, r2, #4
    61be:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    61c2:	b974      	cbnz	r4, 61e2 <free_list_add_bidx+0x28>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
    61c4:	68c3      	ldr	r3, [r0, #12]
    61c6:	2401      	movs	r4, #1
    61c8:	4094      	lsls	r4, r2
    61ca:	4323      	orrs	r3, r4
    61cc:	60c3      	str	r3, [r0, #12]
		b->next = c;
    61ce:	3204      	adds	r2, #4
    61d0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    61d4:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    61d6:	1d1a      	adds	r2, r3, #4
    61d8:	b289      	uxth	r1, r1
    61da:	5281      	strh	r1, [r0, r2]
    61dc:	3306      	adds	r3, #6
    61de:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    61e0:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    61e2:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    61e4:	3204      	adds	r2, #4
    61e6:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    61e8:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    61ec:	f10c 0e04 	add.w	lr, ip, #4
    61f0:	f820 300e 	strh.w	r3, [r0, lr]
    61f4:	f10c 0c06 	add.w	ip, ip, #6
    61f8:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    61fc:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    61fe:	3306      	adds	r3, #6
    6200:	b289      	uxth	r1, r1
    6202:	52c1      	strh	r1, [r0, r3]
    6204:	5281      	strh	r1, [r0, r2]
    6206:	e7eb      	b.n	61e0 <free_list_add_bidx+0x26>

00006208 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    6208:	b500      	push	{lr}
	void *cmem = &buf[c];
    620a:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
    620c:	3302      	adds	r3, #2
    620e:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
    6212:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
    6216:	1a89      	subs	r1, r1, r2
    6218:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    621c:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
    6220:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    6224:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
    6228:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
    622a:	3302      	adds	r3, #2
    622c:	f820 e003 	strh.w	lr, [r0, r3]
    6230:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
    6234:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    6236:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
    623a:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
    623e:	f85d fb04 	ldr.w	pc, [sp], #4

00006242 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    6242:	b500      	push	{lr}
	void *cmem = &buf[c];
    6244:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
    6246:	3102      	adds	r1, #2
    6248:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
    624c:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
    6250:	f10c 0c02 	add.w	ip, ip, #2
    6254:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    6258:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    625a:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    625e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
    6262:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
    6266:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
    626a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
    626e:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
    6272:	f85d fb04 	ldr.w	pc, [sp], #4

00006276 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    6276:	3904      	subs	r1, #4
    6278:	1a08      	subs	r0, r1, r0
}
    627a:	08c0      	lsrs	r0, r0, #3
    627c:	4770      	bx	lr

0000627e <free_list_remove>:
{
    627e:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    6280:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    6284:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    6286:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    6288:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
    628c:	f1c2 021f 	rsb	r2, r2, #31
    6290:	f7ff ff74 	bl	617c <free_list_remove_bidx>
}
    6294:	bd08      	pop	{r3, pc}

00006296 <free_list_add>:
{
    6296:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    6298:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    629c:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    629e:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    62a0:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    62a4:	f1c2 021f 	rsb	r2, r2, #31
    62a8:	f7ff ff87 	bl	61ba <free_list_add_bidx>
}
    62ac:	bd08      	pop	{r3, pc}

000062ae <free_chunk>:
{
    62ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62b0:	4604      	mov	r4, r0
    62b2:	460d      	mov	r5, r1
	void *cmem = &buf[c];
    62b4:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
    62b6:	1cb7      	adds	r7, r6, #2
    62b8:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
    62ba:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
    62be:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    62c2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    62c4:	f013 0f01 	tst.w	r3, #1
    62c8:	d00c      	beq.n	62e4 <free_chunk+0x36>
    62ca:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    62cc:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
    62ce:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
    62d2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    62d4:	f013 0f01 	tst.w	r3, #1
    62d8:	d00e      	beq.n	62f8 <free_chunk+0x4a>
	free_list_add(h, c);
    62da:	4629      	mov	r1, r5
    62dc:	4620      	mov	r0, r4
    62de:	f7ff ffda 	bl	6296 <free_list_add>
}
    62e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
    62e4:	f7ff ffcb 	bl	627e <free_list_remove>
    62e8:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
    62ea:	eb05 0252 	add.w	r2, r5, r2, lsr #1
    62ee:	4629      	mov	r1, r5
    62f0:	4620      	mov	r0, r4
    62f2:	f7ff ffa6 	bl	6242 <merge_chunks>
    62f6:	e7e8      	b.n	62ca <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
    62f8:	4620      	mov	r0, r4
    62fa:	f7ff ffc0 	bl	627e <free_list_remove>
    62fe:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
    6300:	462a      	mov	r2, r5
    6302:	1a69      	subs	r1, r5, r1
    6304:	4620      	mov	r0, r4
    6306:	f7ff ff9c 	bl	6242 <merge_chunks>
    630a:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    630c:	1aed      	subs	r5, r5, r3
    630e:	e7e4      	b.n	62da <free_chunk+0x2c>

00006310 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    6310:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
    6312:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    6316:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
    631a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
    631e:	b1cd      	cbz	r5, 6354 <alloc_chunk+0x44>
    6320:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
    6324:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
    6328:	1d14      	adds	r4, r2, #4
    632a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
    632e:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
    6332:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
    6336:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
    6338:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
    633c:	d914      	bls.n	6368 <alloc_chunk+0x58>
    633e:	4484      	add	ip, r0
    6340:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
    6344:	1d16      	adds	r6, r2, #4
    6346:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
    634a:	f1be 0e01 	subs.w	lr, lr, #1
    634e:	d001      	beq.n	6354 <alloc_chunk+0x44>
    6350:	42a5      	cmp	r5, r4
    6352:	d1e9      	bne.n	6328 <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    6354:	68c4      	ldr	r4, [r0, #12]
    6356:	f1c3 0220 	rsb	r2, r3, #32
    635a:	2301      	movs	r3, #1
    635c:	4093      	lsls	r3, r2
    635e:	425b      	negs	r3, r3

	if (bmask != 0U) {
    6360:	401c      	ands	r4, r3
    6362:	d105      	bne.n	6370 <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    6364:	4620      	mov	r0, r4
    6366:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
    6368:	4621      	mov	r1, r4
    636a:	f7ff ff07 	bl	617c <free_list_remove_bidx>
				return c;
    636e:	e7f9      	b.n	6364 <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
    6370:	fa94 f2a4 	rbit	r2, r4
    6374:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    6378:	1d13      	adds	r3, r2, #4
    637a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    637e:	4621      	mov	r1, r4
    6380:	f7ff fefc 	bl	617c <free_list_remove_bidx>
		return c;
    6384:	e7ee      	b.n	6364 <alloc_chunk+0x54>

00006386 <sys_heap_free>:
	if (mem == NULL) {
    6386:	b179      	cbz	r1, 63a8 <sys_heap_free+0x22>
{
    6388:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
    638a:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
    638c:	4620      	mov	r0, r4
    638e:	f7ff ff72 	bl	6276 <mem_to_chunkid>
    6392:	4601      	mov	r1, r0
	void *cmem = &buf[c];
    6394:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    6398:	8853      	ldrh	r3, [r2, #2]
    639a:	f023 0301 	bic.w	r3, r3, #1
    639e:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
    63a0:	4620      	mov	r0, r4
    63a2:	f7ff ff84 	bl	62ae <free_chunk>
}
    63a6:	bd10      	pop	{r4, pc}
    63a8:	4770      	bx	lr

000063aa <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    63aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
    63ac:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    63ae:	b341      	cbz	r1, 6402 <sys_heap_alloc+0x58>
    63b0:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    63b2:	68aa      	ldr	r2, [r5, #8]
    63b4:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    63b8:	d925      	bls.n	6406 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    63ba:	330b      	adds	r3, #11
    63bc:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
    63be:	4621      	mov	r1, r4
    63c0:	4628      	mov	r0, r5
    63c2:	f7ff ffa5 	bl	6310 <alloc_chunk>
	if (c == 0U) {
    63c6:	4607      	mov	r7, r0
    63c8:	b1f8      	cbz	r0, 640a <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
    63ca:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
    63cc:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
    63d0:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
    63d2:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    63d6:	d309      	bcc.n	63ec <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
    63d8:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    63da:	885a      	ldrh	r2, [r3, #2]
    63dc:	f042 0201 	orr.w	r2, r2, #1
    63e0:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
    63e2:	4639      	mov	r1, r7
    63e4:	4628      	mov	r0, r5
    63e6:	f7ff fec5 	bl	6174 <chunk_mem>
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    63ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
    63ec:	4404      	add	r4, r0
    63ee:	4622      	mov	r2, r4
    63f0:	4601      	mov	r1, r0
    63f2:	4628      	mov	r0, r5
    63f4:	f7ff ff08 	bl	6208 <split_chunks>
		free_list_add(h, c + chunk_sz);
    63f8:	4621      	mov	r1, r4
    63fa:	4628      	mov	r0, r5
    63fc:	f7ff ff4b 	bl	6296 <free_list_add>
    6400:	e7ea      	b.n	63d8 <sys_heap_alloc+0x2e>
		return NULL;
    6402:	2000      	movs	r0, #0
    6404:	e7f1      	b.n	63ea <sys_heap_alloc+0x40>
    6406:	2000      	movs	r0, #0
    6408:	e7ef      	b.n	63ea <sys_heap_alloc+0x40>
		return NULL;
    640a:	2000      	movs	r0, #0
    640c:	e7ed      	b.n	63ea <sys_heap_alloc+0x40>

0000640e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    640e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6412:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
    6414:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    6416:	424b      	negs	r3, r1
    6418:	400b      	ands	r3, r1
	if (align != rew) {
    641a:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
    641e:	ea19 0901 	ands.w	r9, r9, r1
    6422:	d004      	beq.n	642e <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    6424:	2b03      	cmp	r3, #3
    6426:	d847      	bhi.n	64b8 <sys_heap_aligned_alloc+0xaa>
		align -= rew;
    6428:	464c      	mov	r4, r9
	rew = align & -align;
    642a:	4699      	mov	r9, r3
    642c:	e003      	b.n	6436 <sys_heap_aligned_alloc+0x28>
    642e:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
    6430:	2904      	cmp	r1, #4
    6432:	d93c      	bls.n	64ae <sys_heap_aligned_alloc+0xa0>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
    6434:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    6436:	2d00      	cmp	r5, #0
    6438:	d056      	beq.n	64e8 <sys_heap_aligned_alloc+0xda>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    643a:	68b2      	ldr	r2, [r6, #8]
    643c:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
    6440:	d955      	bls.n	64ee <sys_heap_aligned_alloc+0xe0>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
    6442:	1961      	adds	r1, r4, r5
    6444:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    6446:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    6448:	08c9      	lsrs	r1, r1, #3
    644a:	4630      	mov	r0, r6
    644c:	f7ff ff60 	bl	6310 <alloc_chunk>

	if (c0 == 0) {
    6450:	4607      	mov	r7, r0
    6452:	2800      	cmp	r0, #0
    6454:	d04e      	beq.n	64f4 <sys_heap_aligned_alloc+0xe6>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
    6456:	4601      	mov	r1, r0
    6458:	4630      	mov	r0, r6
    645a:	f7ff fe8b 	bl	6174 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    645e:	eb00 0809 	add.w	r8, r0, r9
    6462:	44a0      	add	r8, r4
    6464:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    6468:	4264      	negs	r4, r4
    646a:	ea08 0804 	and.w	r8, r8, r4
    646e:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    6472:	eb08 0405 	add.w	r4, r8, r5
    6476:	3407      	adds	r4, #7
    6478:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
    647c:	4641      	mov	r1, r8
    647e:	4630      	mov	r0, r6
    6480:	f7ff fef9 	bl	6276 <mem_to_chunkid>
    6484:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
    6486:	1ba4      	subs	r4, r4, r6
    6488:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
    648a:	4287      	cmp	r7, r0
    648c:	d318      	bcc.n	64c0 <sys_heap_aligned_alloc+0xb2>
	void *cmem = &buf[c];
    648e:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
    6490:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
    6494:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
    6496:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
    649a:	429c      	cmp	r4, r3
    649c:	d31a      	bcc.n	64d4 <sys_heap_aligned_alloc+0xc6>
	void *cmem = &buf[c];
    649e:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    64a0:	8873      	ldrh	r3, [r6, #2]
    64a2:	f043 0301 	orr.w	r3, r3, #1
    64a6:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    64a8:	4640      	mov	r0, r8
    64aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
    64ae:	4611      	mov	r1, r2
    64b0:	f7ff ff7b 	bl	63aa <sys_heap_alloc>
    64b4:	4680      	mov	r8, r0
    64b6:	e7f7      	b.n	64a8 <sys_heap_aligned_alloc+0x9a>
		align -= rew;
    64b8:	464c      	mov	r4, r9
	rew = align & -align;
    64ba:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
    64bc:	2304      	movs	r3, #4
    64be:	e7ba      	b.n	6436 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
    64c0:	4602      	mov	r2, r0
    64c2:	4639      	mov	r1, r7
    64c4:	4630      	mov	r0, r6
    64c6:	f7ff fe9f 	bl	6208 <split_chunks>
		free_list_add(h, c0);
    64ca:	4639      	mov	r1, r7
    64cc:	4630      	mov	r0, r6
    64ce:	f7ff fee2 	bl	6296 <free_list_add>
    64d2:	e7dc      	b.n	648e <sys_heap_aligned_alloc+0x80>
		split_chunks(h, c, c_end);
    64d4:	4622      	mov	r2, r4
    64d6:	4629      	mov	r1, r5
    64d8:	4630      	mov	r0, r6
    64da:	f7ff fe95 	bl	6208 <split_chunks>
		free_list_add(h, c_end);
    64de:	4621      	mov	r1, r4
    64e0:	4630      	mov	r0, r6
    64e2:	f7ff fed8 	bl	6296 <free_list_add>
    64e6:	e7da      	b.n	649e <sys_heap_aligned_alloc+0x90>
		return NULL;
    64e8:	f04f 0800 	mov.w	r8, #0
    64ec:	e7dc      	b.n	64a8 <sys_heap_aligned_alloc+0x9a>
    64ee:	f04f 0800 	mov.w	r8, #0
    64f2:	e7d9      	b.n	64a8 <sys_heap_aligned_alloc+0x9a>
		return NULL;
    64f4:	f04f 0800 	mov.w	r8, #0
    64f8:	e7d6      	b.n	64a8 <sys_heap_aligned_alloc+0x9a>

000064fa <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    64fa:	b570      	push	{r4, r5, r6, lr}
    64fc:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    64fe:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    6500:	1dc8      	adds	r0, r1, #7
    6502:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    6506:	440a      	add	r2, r1
    6508:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    650c:	1a12      	subs	r2, r2, r0
    650e:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    6510:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
    6512:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
    6514:	2300      	movs	r3, #0
    6516:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
    6518:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    651c:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    6520:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    6524:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    6526:	1dce      	adds	r6, r1, #7
    6528:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    652a:	e005      	b.n	6538 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
    652c:	f103 0c04 	add.w	ip, r3, #4
    6530:	2400      	movs	r4, #0
    6532:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    6536:	3301      	adds	r3, #1
    6538:	4573      	cmp	r3, lr
    653a:	dbf7      	blt.n	652c <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    653c:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
    653e:	b2a4      	uxth	r4, r4
    6540:	8044      	strh	r4, [r0, #2]
    6542:	f04f 0c00 	mov.w	ip, #0
    6546:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    654a:	f044 0401 	orr.w	r4, r4, #1
    654e:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    6550:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    6552:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
    6556:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
    655a:	1ca5      	adds	r5, r4, #2
    655c:	f820 e005 	strh.w	lr, [r0, r5]
    6560:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
    6562:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
    6566:	1c95      	adds	r5, r2, #2
    6568:	f820 c005 	strh.w	ip, [r0, r5]
    656c:	4402      	add	r2, r0
    656e:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    6570:	8853      	ldrh	r3, [r2, #2]
    6572:	f043 0301 	orr.w	r3, r3, #1
    6576:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    6578:	f7ff fe8d 	bl	6296 <free_list_add>
}
    657c:	bd70      	pop	{r4, r5, r6, pc}

0000657e <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    657e:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6582:	8b03      	ldrh	r3, [r0, #24]
    6584:	f023 0307 	bic.w	r3, r3, #7
    6588:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    658a:	8303      	strh	r3, [r0, #24]
}
    658c:	4770      	bx	lr

0000658e <notify_monitors>:
{
    658e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6592:	4606      	mov	r6, r0
    6594:	460f      	mov	r7, r1
    6596:	4690      	mov	r8, r2
	return list->head;
    6598:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    659a:	b121      	cbz	r1, 65a6 <notify_monitors+0x18>
	return node->next;
    659c:	680c      	ldr	r4, [r1, #0]
    659e:	b13c      	cbz	r4, 65b0 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    65a0:	b931      	cbnz	r1, 65b0 <notify_monitors+0x22>
    65a2:	460c      	mov	r4, r1
    65a4:	e004      	b.n	65b0 <notify_monitors+0x22>
    65a6:	460c      	mov	r4, r1
    65a8:	e002      	b.n	65b0 <notify_monitors+0x22>
    65aa:	4623      	mov	r3, r4
    65ac:	4621      	mov	r1, r4
    65ae:	461c      	mov	r4, r3
    65b0:	b169      	cbz	r1, 65ce <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    65b2:	684d      	ldr	r5, [r1, #4]
    65b4:	4643      	mov	r3, r8
    65b6:	463a      	mov	r2, r7
    65b8:	4630      	mov	r0, r6
    65ba:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    65bc:	2c00      	cmp	r4, #0
    65be:	d0f4      	beq.n	65aa <notify_monitors+0x1c>
	return node->next;
    65c0:	6823      	ldr	r3, [r4, #0]
    65c2:	2b00      	cmp	r3, #0
    65c4:	d0f2      	beq.n	65ac <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    65c6:	2c00      	cmp	r4, #0
    65c8:	d1f0      	bne.n	65ac <notify_monitors+0x1e>
    65ca:	4623      	mov	r3, r4
    65cc:	e7ee      	b.n	65ac <notify_monitors+0x1e>
}
    65ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000065d2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    65d2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    65d4:	f013 0307 	ands.w	r3, r3, #7
    65d8:	d103      	bne.n	65e2 <process_recheck+0x10>
	return list->head;
    65da:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    65dc:	b10a      	cbz	r2, 65e2 <process_recheck+0x10>
		evt = EVT_START;
    65de:	2003      	movs	r0, #3
    65e0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    65e2:	2b02      	cmp	r3, #2
    65e4:	d003      	beq.n	65ee <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    65e6:	2b01      	cmp	r3, #1
    65e8:	d006      	beq.n	65f8 <process_recheck+0x26>
	int evt = EVT_NOP;
    65ea:	2000      	movs	r0, #0
    65ec:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    65ee:	8b42      	ldrh	r2, [r0, #26]
    65f0:	2a00      	cmp	r2, #0
    65f2:	d1f8      	bne.n	65e6 <process_recheck+0x14>
		evt = EVT_STOP;
    65f4:	2004      	movs	r0, #4
    65f6:	4770      	bx	lr
    65f8:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    65fa:	b10b      	cbz	r3, 6600 <process_recheck+0x2e>
		evt = EVT_RESET;
    65fc:	2005      	movs	r0, #5
}
    65fe:	4770      	bx	lr
	int evt = EVT_NOP;
    6600:	2000      	movs	r0, #0
    6602:	4770      	bx	lr

00006604 <process_complete>:
{
    6604:	b510      	push	{r4, lr}
    6606:	4604      	mov	r4, r0
    6608:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    660a:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    660c:	2a00      	cmp	r2, #0
    660e:	db07      	blt.n	6620 <process_complete+0x1c>
    6610:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    6614:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    6616:	2a01      	cmp	r2, #1
    6618:	d90e      	bls.n	6638 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    661a:	2b04      	cmp	r3, #4
    661c:	d036      	beq.n	668c <process_complete+0x88>
}
    661e:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    6620:	e9d0 0100 	ldrd	r0, r1, [r0]
    6624:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    6628:	2300      	movs	r3, #0
    662a:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    662c:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    662e:	2101      	movs	r1, #1
    6630:	4620      	mov	r0, r4
    6632:	f7ff ffa4 	bl	657e <set_state>
    6636:	e7f2      	b.n	661e <process_complete+0x1a>
		*clients = mgr->clients;
    6638:	e9d0 0100 	ldrd	r0, r1, [r0]
    663c:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    6640:	2200      	movs	r2, #0
    6642:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    6644:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    6646:	2b06      	cmp	r3, #6
    6648:	d11b      	bne.n	6682 <process_complete+0x7e>
	return list->head;
    664a:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    664e:	b153      	cbz	r3, 6666 <process_complete+0x62>
				mgr->refs += 1U;
    6650:	8b62      	ldrh	r2, [r4, #26]
    6652:	3201      	adds	r2, #1
    6654:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    6656:	461a      	mov	r2, r3
	return node->next;
    6658:	681b      	ldr	r3, [r3, #0]
    665a:	2b00      	cmp	r3, #0
    665c:	d0f7      	beq.n	664e <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    665e:	2a00      	cmp	r2, #0
    6660:	d1f5      	bne.n	664e <process_complete+0x4a>
    6662:	4613      	mov	r3, r2
    6664:	e7f3      	b.n	664e <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    6666:	2102      	movs	r1, #2
    6668:	4620      	mov	r0, r4
    666a:	f7ff ff88 	bl	657e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    666e:	4620      	mov	r0, r4
    6670:	f7ff ffaf 	bl	65d2 <process_recheck>
    6674:	2800      	cmp	r0, #0
    6676:	d0d2      	beq.n	661e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    6678:	8b23      	ldrh	r3, [r4, #24]
    667a:	f043 0320 	orr.w	r3, r3, #32
    667e:	8323      	strh	r3, [r4, #24]
    6680:	e7cd      	b.n	661e <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    6682:	2100      	movs	r1, #0
    6684:	4620      	mov	r0, r4
    6686:	f7ff ff7a 	bl	657e <set_state>
    668a:	e7f0      	b.n	666e <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    668c:	2100      	movs	r1, #0
    668e:	f7ff ff76 	bl	657e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    6692:	4620      	mov	r0, r4
    6694:	f7ff ff9d 	bl	65d2 <process_recheck>
    6698:	2800      	cmp	r0, #0
    669a:	d0c0      	beq.n	661e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    669c:	8b23      	ldrh	r3, [r4, #24]
    669e:	f043 0320 	orr.w	r3, r3, #32
    66a2:	8323      	strh	r3, [r4, #24]
}
    66a4:	e7bb      	b.n	661e <process_complete+0x1a>

000066a6 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    66a6:	b150      	cbz	r0, 66be <validate_args+0x18>
{
    66a8:	b510      	push	{r4, lr}
    66aa:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    66ac:	b151      	cbz	r1, 66c4 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    66ae:	1d08      	adds	r0, r1, #4
    66b0:	f000 f8c4 	bl	683c <sys_notify_validate>
	if ((rv == 0)
    66b4:	b910      	cbnz	r0, 66bc <validate_args+0x16>
	    && ((cli->notify.flags
    66b6:	68a3      	ldr	r3, [r4, #8]
    66b8:	2b03      	cmp	r3, #3
    66ba:	d806      	bhi.n	66ca <validate_args+0x24>
}
    66bc:	bd10      	pop	{r4, pc}
		return -EINVAL;
    66be:	f06f 0015 	mvn.w	r0, #21
}
    66c2:	4770      	bx	lr
		return -EINVAL;
    66c4:	f06f 0015 	mvn.w	r0, #21
    66c8:	e7f8      	b.n	66bc <validate_args+0x16>
		rv = -EINVAL;
    66ca:	f06f 0015 	mvn.w	r0, #21
    66ce:	e7f5      	b.n	66bc <validate_args+0x16>

000066d0 <notify_one>:
{
    66d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66d4:	4607      	mov	r7, r0
    66d6:	460c      	mov	r4, r1
    66d8:	4616      	mov	r6, r2
    66da:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    66dc:	4619      	mov	r1, r3
    66de:	1d20      	adds	r0, r4, #4
    66e0:	f000 f8c3 	bl	686a <sys_notify_finalize>
	if (cb) {
    66e4:	b128      	cbz	r0, 66f2 <notify_one+0x22>
    66e6:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    66e8:	462b      	mov	r3, r5
    66ea:	4632      	mov	r2, r6
    66ec:	4621      	mov	r1, r4
    66ee:	4638      	mov	r0, r7
    66f0:	47c0      	blx	r8
}
    66f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000066f6 <notify_all>:
{
    66f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66fa:	4680      	mov	r8, r0
    66fc:	460c      	mov	r4, r1
    66fe:	4617      	mov	r7, r2
    6700:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    6702:	e004      	b.n	670e <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    6704:	4633      	mov	r3, r6
    6706:	463a      	mov	r2, r7
    6708:	4640      	mov	r0, r8
    670a:	f7ff ffe1 	bl	66d0 <notify_one>
	return list->head;
    670e:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    6710:	b131      	cbz	r1, 6720 <notify_all+0x2a>
	return node->next;
    6712:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    6714:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6716:	6863      	ldr	r3, [r4, #4]
    6718:	428b      	cmp	r3, r1
    671a:	d1f3      	bne.n	6704 <notify_all+0xe>
	list->tail = node;
    671c:	6065      	str	r5, [r4, #4]
}
    671e:	e7f1      	b.n	6704 <notify_all+0xe>
}
    6720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006724 <transition_complete>:
{
    6724:	b508      	push	{r3, lr}
	__asm__ volatile(
    6726:	f04f 0c20 	mov.w	ip, #32
    672a:	f3ef 8211 	mrs	r2, BASEPRI
    672e:	f38c 8812 	msr	BASEPRI_MAX, ip
    6732:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    6736:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    6738:	2101      	movs	r1, #1
    673a:	f7fa f97b 	bl	a34 <process_event>
}
    673e:	bd08      	pop	{r3, pc}

00006740 <onoff_manager_init>:
	if ((mgr == NULL)
    6740:	4603      	mov	r3, r0
    6742:	b170      	cbz	r0, 6762 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    6744:	b181      	cbz	r1, 6768 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    6746:	680a      	ldr	r2, [r1, #0]
    6748:	b18a      	cbz	r2, 676e <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    674a:	684a      	ldr	r2, [r1, #4]
    674c:	b192      	cbz	r2, 6774 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    674e:	2000      	movs	r0, #0
    6750:	6018      	str	r0, [r3, #0]
    6752:	6058      	str	r0, [r3, #4]
    6754:	6098      	str	r0, [r3, #8]
    6756:	60d8      	str	r0, [r3, #12]
    6758:	6118      	str	r0, [r3, #16]
    675a:	6158      	str	r0, [r3, #20]
    675c:	6198      	str	r0, [r3, #24]
    675e:	6119      	str	r1, [r3, #16]
	return 0;
    6760:	4770      	bx	lr
		return -EINVAL;
    6762:	f06f 0015 	mvn.w	r0, #21
    6766:	4770      	bx	lr
    6768:	f06f 0015 	mvn.w	r0, #21
    676c:	4770      	bx	lr
    676e:	f06f 0015 	mvn.w	r0, #21
    6772:	4770      	bx	lr
    6774:	f06f 0015 	mvn.w	r0, #21
}
    6778:	4770      	bx	lr

0000677a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    677a:	b570      	push	{r4, r5, r6, lr}
    677c:	4605      	mov	r5, r0
    677e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6780:	f7ff ff91 	bl	66a6 <validate_args>

	if (rv < 0) {
    6784:	1e04      	subs	r4, r0, #0
    6786:	db30      	blt.n	67ea <onoff_request+0x70>
    6788:	f04f 0320 	mov.w	r3, #32
    678c:	f3ef 8211 	mrs	r2, BASEPRI
    6790:	f383 8812 	msr	BASEPRI_MAX, r3
    6794:	f3bf 8f6f 	isb	sy
    6798:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    679a:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    679e:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    67a2:	8b6b      	ldrh	r3, [r5, #26]
    67a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    67a8:	428b      	cmp	r3, r1
    67aa:	d02c      	beq.n	6806 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    67ac:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    67ae:	f1bc 0f02 	cmp.w	ip, #2
    67b2:	d008      	beq.n	67c6 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    67b4:	f1bc 0f06 	cmp.w	ip, #6
    67b8:	d819      	bhi.n	67ee <onoff_request+0x74>
    67ba:	e8df f00c 	tbb	[pc, ip]
    67be:	181e      	.short	0x181e
    67c0:	2a1e1818 	.word	0x2a1e1818
    67c4:	1e          	.byte	0x1e
    67c5:	00          	.byte	0x00
		mgr->refs += 1U;
    67c6:	3301      	adds	r3, #1
    67c8:	836b      	strh	r3, [r5, #26]
		notify = true;
    67ca:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    67cc:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    67ce:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    67d0:	b128      	cbz	r0, 67de <onoff_request+0x64>
	parent->next = child;
    67d2:	2000      	movs	r0, #0
    67d4:	6030      	str	r0, [r6, #0]
	return list->tail;
    67d6:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    67d8:	b308      	cbz	r0, 681e <onoff_request+0xa4>
	parent->next = child;
    67da:	6006      	str	r6, [r0, #0]
	list->tail = node;
    67dc:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    67de:	bb09      	cbnz	r1, 6824 <onoff_request+0xaa>
	__asm__ volatile(
    67e0:	f38e 8811 	msr	BASEPRI, lr
    67e4:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    67e8:	bb0b      	cbnz	r3, 682e <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    67ea:	4620      	mov	r0, r4
    67ec:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    67ee:	f06f 0404 	mvn.w	r4, #4
    67f2:	2300      	movs	r3, #0
    67f4:	4619      	mov	r1, r3
    67f6:	4618      	mov	r0, r3
    67f8:	e7ea      	b.n	67d0 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    67fa:	fabc f18c 	clz	r1, ip
    67fe:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    6800:	2300      	movs	r3, #0
		add_client = true;
    6802:	2001      	movs	r0, #1
    6804:	e7e4      	b.n	67d0 <onoff_request+0x56>
		rv = -EAGAIN;
    6806:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    680a:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    680c:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    680e:	4618      	mov	r0, r3
    6810:	e7de      	b.n	67d0 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    6812:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6816:	2300      	movs	r3, #0
    6818:	4619      	mov	r1, r3
    681a:	4618      	mov	r0, r3
    681c:	e7d8      	b.n	67d0 <onoff_request+0x56>
    681e:	606e      	str	r6, [r5, #4]
	list->head = node;
    6820:	602e      	str	r6, [r5, #0]
}
    6822:	e7dc      	b.n	67de <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    6824:	2102      	movs	r1, #2
    6826:	4628      	mov	r0, r5
    6828:	f7fa f904 	bl	a34 <process_event>
    682c:	e7dd      	b.n	67ea <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    682e:	2300      	movs	r3, #0
    6830:	4662      	mov	r2, ip
    6832:	4631      	mov	r1, r6
    6834:	4628      	mov	r0, r5
    6836:	f7ff ff4b 	bl	66d0 <notify_one>
    683a:	e7d6      	b.n	67ea <onoff_request+0x70>

0000683c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    683c:	4602      	mov	r2, r0
    683e:	b158      	cbz	r0, 6858 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6840:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6842:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6846:	2b01      	cmp	r3, #1
    6848:	d003      	beq.n	6852 <sys_notify_validate+0x16>
    684a:	2b03      	cmp	r3, #3
    684c:	d107      	bne.n	685e <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    684e:	6803      	ldr	r3, [r0, #0]
    6850:	b143      	cbz	r3, 6864 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6852:	2000      	movs	r0, #0
    6854:	6090      	str	r0, [r2, #8]
    6856:	4770      	bx	lr
		return -EINVAL;
    6858:	f06f 0015 	mvn.w	r0, #21
    685c:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    685e:	f06f 0015 	mvn.w	r0, #21
    6862:	4770      	bx	lr
			rv = -EINVAL;
    6864:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6868:	4770      	bx	lr

0000686a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    686a:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    686c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    686e:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    6872:	6081      	str	r1, [r0, #8]
	switch (method) {
    6874:	2a03      	cmp	r2, #3
    6876:	d103      	bne.n	6880 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6878:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    687a:	2200      	movs	r2, #0
    687c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    687e:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    6880:	2000      	movs	r0, #0
    6882:	e7fa      	b.n	687a <sys_notify_finalize+0x10>

00006884 <extract_width>:
{
    6884:	b530      	push	{r4, r5, lr}
    6886:	b083      	sub	sp, #12
    6888:	4604      	mov	r4, r0
    688a:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    688c:	7803      	ldrb	r3, [r0, #0]
    688e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6892:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    6894:	460d      	mov	r5, r1
    6896:	780b      	ldrb	r3, [r1, #0]
    6898:	2b2a      	cmp	r3, #42	; 0x2a
    689a:	d018      	beq.n	68ce <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    689c:	a801      	add	r0, sp, #4
    689e:	f7fa f97f 	bl	ba0 <extract_decimal>
	if (sp != wp) {
    68a2:	9b01      	ldr	r3, [sp, #4]
    68a4:	429d      	cmp	r5, r3
    68a6:	d00f      	beq.n	68c8 <extract_width+0x44>
		conv->width_present = true;
    68a8:	7823      	ldrb	r3, [r4, #0]
    68aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    68ae:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    68b0:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    68b2:	b2db      	uxtb	r3, r3
    68b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    68b8:	2800      	cmp	r0, #0
    68ba:	db10      	blt.n	68de <extract_width+0x5a>
    68bc:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    68be:	4313      	orrs	r3, r2
    68c0:	7822      	ldrb	r2, [r4, #0]
    68c2:	f363 0241 	bfi	r2, r3, #1, #1
    68c6:	7022      	strb	r2, [r4, #0]
	return sp;
    68c8:	9801      	ldr	r0, [sp, #4]
}
    68ca:	b003      	add	sp, #12
    68cc:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    68ce:	7843      	ldrb	r3, [r0, #1]
    68d0:	f043 0301 	orr.w	r3, r3, #1
    68d4:	7043      	strb	r3, [r0, #1]
		return ++sp;
    68d6:	4608      	mov	r0, r1
    68d8:	3001      	adds	r0, #1
    68da:	9001      	str	r0, [sp, #4]
    68dc:	e7f5      	b.n	68ca <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    68de:	2201      	movs	r2, #1
    68e0:	e7ed      	b.n	68be <extract_width+0x3a>

000068e2 <extract_prec>:
{
    68e2:	b510      	push	{r4, lr}
    68e4:	b082      	sub	sp, #8
    68e6:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    68e8:	780b      	ldrb	r3, [r1, #0]
    68ea:	2b2e      	cmp	r3, #46	; 0x2e
    68ec:	bf14      	ite	ne
    68ee:	2300      	movne	r3, #0
    68f0:	2301      	moveq	r3, #1
    68f2:	7842      	ldrb	r2, [r0, #1]
    68f4:	f363 0241 	bfi	r2, r3, #1, #1
    68f8:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    68fa:	b1c3      	cbz	r3, 692e <extract_prec+0x4c>
    68fc:	4604      	mov	r4, r0
	++sp;
    68fe:	9b01      	ldr	r3, [sp, #4]
    6900:	1c5a      	adds	r2, r3, #1
    6902:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    6904:	785b      	ldrb	r3, [r3, #1]
    6906:	2b2a      	cmp	r3, #42	; 0x2a
    6908:	d013      	beq.n	6932 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    690a:	a801      	add	r0, sp, #4
    690c:	f7fa f948 	bl	ba0 <extract_decimal>
	conv->prec_value = prec;
    6910:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    6912:	7823      	ldrb	r3, [r4, #0]
    6914:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    6918:	2800      	cmp	r0, #0
    691a:	db12      	blt.n	6942 <extract_prec+0x60>
    691c:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    691e:	4313      	orrs	r3, r2
    6920:	7822      	ldrb	r2, [r4, #0]
    6922:	f363 0241 	bfi	r2, r3, #1, #1
    6926:	7022      	strb	r2, [r4, #0]
	return sp;
    6928:	9801      	ldr	r0, [sp, #4]
}
    692a:	b002      	add	sp, #8
    692c:	bd10      	pop	{r4, pc}
		return sp;
    692e:	4608      	mov	r0, r1
    6930:	e7fb      	b.n	692a <extract_prec+0x48>
		conv->prec_star = true;
    6932:	7843      	ldrb	r3, [r0, #1]
    6934:	f043 0304 	orr.w	r3, r3, #4
    6938:	7043      	strb	r3, [r0, #1]
		return ++sp;
    693a:	4610      	mov	r0, r2
    693c:	3001      	adds	r0, #1
    693e:	9001      	str	r0, [sp, #4]
    6940:	e7f3      	b.n	692a <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    6942:	2201      	movs	r2, #1
    6944:	e7eb      	b.n	691e <extract_prec+0x3c>

00006946 <extract_length>:
{
    6946:	4602      	mov	r2, r0
	switch (*sp) {
    6948:	780b      	ldrb	r3, [r1, #0]
    694a:	3b4c      	subs	r3, #76	; 0x4c
    694c:	2b2e      	cmp	r3, #46	; 0x2e
    694e:	d85b      	bhi.n	6a08 <extract_length+0xc2>
    6950:	e8df f003 	tbb	[pc, r3]
    6954:	5a5a5a4f 	.word	0x5a5a5a4f
    6958:	5a5a5a5a 	.word	0x5a5a5a5a
    695c:	5a5a5a5a 	.word	0x5a5a5a5a
    6960:	5a5a5a5a 	.word	0x5a5a5a5a
    6964:	5a5a5a5a 	.word	0x5a5a5a5a
    6968:	5a5a5a5a 	.word	0x5a5a5a5a
    696c:	5a5a5a5a 	.word	0x5a5a5a5a
    6970:	5a3a5a18 	.word	0x5a3a5a18
    6974:	5a5a5a29 	.word	0x5a5a5a29
    6978:	5a5a5a5a 	.word	0x5a5a5a5a
    697c:	5a5a5a48 	.word	0x5a5a5a48
    6980:	5a5a      	.short	0x5a5a
    6982:	41          	.byte	0x41
    6983:	00          	.byte	0x00
		if (*++sp == 'h') {
    6984:	1c48      	adds	r0, r1, #1
    6986:	784b      	ldrb	r3, [r1, #1]
    6988:	2b68      	cmp	r3, #104	; 0x68
    698a:	d005      	beq.n	6998 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    698c:	7853      	ldrb	r3, [r2, #1]
    698e:	2102      	movs	r1, #2
    6990:	f361 03c6 	bfi	r3, r1, #3, #4
    6994:	7053      	strb	r3, [r2, #1]
    6996:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    6998:	7853      	ldrb	r3, [r2, #1]
    699a:	2001      	movs	r0, #1
    699c:	f360 03c6 	bfi	r3, r0, #3, #4
    69a0:	7053      	strb	r3, [r2, #1]
			++sp;
    69a2:	1c88      	adds	r0, r1, #2
    69a4:	4770      	bx	lr
		if (*++sp == 'l') {
    69a6:	1c48      	adds	r0, r1, #1
    69a8:	784b      	ldrb	r3, [r1, #1]
    69aa:	2b6c      	cmp	r3, #108	; 0x6c
    69ac:	d005      	beq.n	69ba <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    69ae:	7853      	ldrb	r3, [r2, #1]
    69b0:	2103      	movs	r1, #3
    69b2:	f361 03c6 	bfi	r3, r1, #3, #4
    69b6:	7053      	strb	r3, [r2, #1]
    69b8:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    69ba:	7853      	ldrb	r3, [r2, #1]
    69bc:	2004      	movs	r0, #4
    69be:	f360 03c6 	bfi	r3, r0, #3, #4
    69c2:	7053      	strb	r3, [r2, #1]
			++sp;
    69c4:	1c88      	adds	r0, r1, #2
    69c6:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    69c8:	7853      	ldrb	r3, [r2, #1]
    69ca:	2005      	movs	r0, #5
    69cc:	f360 03c6 	bfi	r3, r0, #3, #4
    69d0:	7053      	strb	r3, [r2, #1]
		++sp;
    69d2:	1c48      	adds	r0, r1, #1
		break;
    69d4:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    69d6:	7853      	ldrb	r3, [r2, #1]
    69d8:	2006      	movs	r0, #6
    69da:	f360 03c6 	bfi	r3, r0, #3, #4
    69de:	7053      	strb	r3, [r2, #1]
		++sp;
    69e0:	1c48      	adds	r0, r1, #1
		break;
    69e2:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    69e4:	7853      	ldrb	r3, [r2, #1]
    69e6:	2007      	movs	r0, #7
    69e8:	f360 03c6 	bfi	r3, r0, #3, #4
    69ec:	7053      	strb	r3, [r2, #1]
		++sp;
    69ee:	1c48      	adds	r0, r1, #1
		break;
    69f0:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    69f2:	7853      	ldrb	r3, [r2, #1]
    69f4:	2008      	movs	r0, #8
    69f6:	f360 03c6 	bfi	r3, r0, #3, #4
    69fa:	7053      	strb	r3, [r2, #1]
		++sp;
    69fc:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    69fe:	7813      	ldrb	r3, [r2, #0]
    6a00:	f043 0302 	orr.w	r3, r3, #2
    6a04:	7013      	strb	r3, [r2, #0]
		break;
    6a06:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    6a08:	7853      	ldrb	r3, [r2, #1]
    6a0a:	f36f 03c6 	bfc	r3, #3, #4
    6a0e:	7053      	strb	r3, [r2, #1]
		break;
    6a10:	4608      	mov	r0, r1
}
    6a12:	4770      	bx	lr

00006a14 <extract_specifier>:
{
    6a14:	b500      	push	{lr}
    6a16:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    6a18:	4608      	mov	r0, r1
    6a1a:	f810 3b01 	ldrb.w	r3, [r0], #1
    6a1e:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    6a20:	2b78      	cmp	r3, #120	; 0x78
    6a22:	d817      	bhi.n	6a54 <extract_specifier+0x40>
    6a24:	2b6e      	cmp	r3, #110	; 0x6e
    6a26:	d229      	bcs.n	6a7c <extract_specifier+0x68>
    6a28:	2b69      	cmp	r3, #105	; 0x69
    6a2a:	d813      	bhi.n	6a54 <extract_specifier+0x40>
    6a2c:	2b58      	cmp	r3, #88	; 0x58
    6a2e:	d317      	bcc.n	6a60 <extract_specifier+0x4c>
    6a30:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    6a34:	fa5f fc8c 	uxtb.w	ip, ip
    6a38:	2101      	movs	r1, #1
    6a3a:	fa01 f10c 	lsl.w	r1, r1, ip
    6a3e:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    6a42:	d114      	bne.n	6a6e <extract_specifier+0x5a>
    6a44:	f640 0c01 	movw	ip, #2049	; 0x801
    6a48:	ea11 0f0c 	tst.w	r1, ip
    6a4c:	d155      	bne.n	6afa <extract_specifier+0xe6>
    6a4e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    6a52:	d13a      	bne.n	6aca <extract_specifier+0xb6>
		conv->invalid = true;
    6a54:	7813      	ldrb	r3, [r2, #0]
    6a56:	f043 0301 	orr.w	r3, r3, #1
    6a5a:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    6a5c:	2100      	movs	r1, #0
		break;
    6a5e:	e042      	b.n	6ae6 <extract_specifier+0xd2>
	switch (conv->specifier) {
    6a60:	2b41      	cmp	r3, #65	; 0x41
    6a62:	d004      	beq.n	6a6e <extract_specifier+0x5a>
    6a64:	d3f6      	bcc.n	6a54 <extract_specifier+0x40>
    6a66:	3b45      	subs	r3, #69	; 0x45
    6a68:	b2db      	uxtb	r3, r3
    6a6a:	2b02      	cmp	r3, #2
    6a6c:	d8f2      	bhi.n	6a54 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    6a6e:	7893      	ldrb	r3, [r2, #2]
    6a70:	2104      	movs	r1, #4
    6a72:	f361 0302 	bfi	r3, r1, #0, #3
    6a76:	7093      	strb	r3, [r2, #2]
			unsupported = true;
    6a78:	2101      	movs	r1, #1
			break;
    6a7a:	e034      	b.n	6ae6 <extract_specifier+0xd2>
	switch (conv->specifier) {
    6a7c:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    6a80:	b2c9      	uxtb	r1, r1
    6a82:	f04f 0c01 	mov.w	ip, #1
    6a86:	fa0c fc01 	lsl.w	ip, ip, r1
    6a8a:	f240 4182 	movw	r1, #1154	; 0x482
    6a8e:	ea1c 0f01 	tst.w	ip, r1
    6a92:	bf14      	ite	ne
    6a94:	f04f 0e01 	movne.w	lr, #1
    6a98:	f04f 0e00 	moveq.w	lr, #0
    6a9c:	d12d      	bne.n	6afa <extract_specifier+0xe6>
    6a9e:	f01c 0f24 	tst.w	ip, #36	; 0x24
    6aa2:	bf14      	ite	ne
    6aa4:	2101      	movne	r1, #1
    6aa6:	2100      	moveq	r1, #0
    6aa8:	d139      	bne.n	6b1e <extract_specifier+0x10a>
    6aaa:	f01c 0c01 	ands.w	ip, ip, #1
    6aae:	d0d1      	beq.n	6a54 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    6ab0:	7893      	ldrb	r3, [r2, #2]
    6ab2:	f04f 0e03 	mov.w	lr, #3
    6ab6:	f36e 0302 	bfi	r3, lr, #0, #3
    6aba:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    6abc:	7853      	ldrb	r3, [r2, #1]
    6abe:	f003 0378 	and.w	r3, r3, #120	; 0x78
    6ac2:	2b40      	cmp	r3, #64	; 0x40
    6ac4:	d10f      	bne.n	6ae6 <extract_specifier+0xd2>
			unsupported = true;
    6ac6:	4661      	mov	r1, ip
    6ac8:	e00d      	b.n	6ae6 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
    6aca:	7891      	ldrb	r1, [r2, #2]
    6acc:	f04f 0c01 	mov.w	ip, #1
    6ad0:	f36c 0102 	bfi	r1, ip, #0, #3
    6ad4:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    6ad6:	7851      	ldrb	r1, [r2, #1]
    6ad8:	f001 0178 	and.w	r1, r1, #120	; 0x78
    6adc:	2940      	cmp	r1, #64	; 0x40
    6ade:	d013      	beq.n	6b08 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
    6ae0:	2b63      	cmp	r3, #99	; 0x63
    6ae2:	d018      	beq.n	6b16 <extract_specifier+0x102>
	bool unsupported = false;
    6ae4:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    6ae6:	7813      	ldrb	r3, [r2, #0]
    6ae8:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    6aec:	ea41 010c 	orr.w	r1, r1, ip
    6af0:	f361 0341 	bfi	r3, r1, #1, #1
    6af4:	7013      	strb	r3, [r2, #0]
}
    6af6:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    6afa:	7891      	ldrb	r1, [r2, #2]
    6afc:	f04f 0c02 	mov.w	ip, #2
    6b00:	f36c 0102 	bfi	r1, ip, #0, #3
    6b04:	7091      	strb	r1, [r2, #2]
    6b06:	e7e6      	b.n	6ad6 <extract_specifier+0xc2>
			conv->invalid = true;
    6b08:	f892 c000 	ldrb.w	ip, [r2]
    6b0c:	f04c 0c01 	orr.w	ip, ip, #1
    6b10:	f882 c000 	strb.w	ip, [r2]
    6b14:	e7e4      	b.n	6ae0 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    6b16:	3900      	subs	r1, #0
    6b18:	bf18      	it	ne
    6b1a:	2101      	movne	r1, #1
    6b1c:	e7e3      	b.n	6ae6 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
    6b1e:	7893      	ldrb	r3, [r2, #2]
    6b20:	f04f 0c03 	mov.w	ip, #3
    6b24:	f36c 0302 	bfi	r3, ip, #0, #3
    6b28:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    6b2a:	7853      	ldrb	r3, [r2, #1]
    6b2c:	f013 0f78 	tst.w	r3, #120	; 0x78
    6b30:	d1d9      	bne.n	6ae6 <extract_specifier+0xd2>
	bool unsupported = false;
    6b32:	4671      	mov	r1, lr
    6b34:	e7d7      	b.n	6ae6 <extract_specifier+0xd2>

00006b36 <extract_conversion>:
{
    6b36:	b510      	push	{r4, lr}
    6b38:	4604      	mov	r4, r0
    6b3a:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    6b3c:	2300      	movs	r3, #0
    6b3e:	6023      	str	r3, [r4, #0]
    6b40:	6063      	str	r3, [r4, #4]
    6b42:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    6b44:	784b      	ldrb	r3, [r1, #1]
    6b46:	2b25      	cmp	r3, #37	; 0x25
    6b48:	d014      	beq.n	6b74 <extract_conversion+0x3e>
    6b4a:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    6b4c:	4620      	mov	r0, r4
    6b4e:	f7fa f83d 	bl	bcc <extract_flags>
    6b52:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    6b54:	4620      	mov	r0, r4
    6b56:	f7ff fe95 	bl	6884 <extract_width>
    6b5a:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    6b5c:	4620      	mov	r0, r4
    6b5e:	f7ff fec0 	bl	68e2 <extract_prec>
    6b62:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    6b64:	4620      	mov	r0, r4
    6b66:	f7ff feee 	bl	6946 <extract_length>
    6b6a:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    6b6c:	4620      	mov	r0, r4
    6b6e:	f7ff ff51 	bl	6a14 <extract_specifier>
}
    6b72:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    6b74:	3002      	adds	r0, #2
    6b76:	70e3      	strb	r3, [r4, #3]
		return sp;
    6b78:	e7fb      	b.n	6b72 <extract_conversion+0x3c>

00006b7a <conversion_radix>:
	switch (specifier) {
    6b7a:	286f      	cmp	r0, #111	; 0x6f
    6b7c:	d00c      	beq.n	6b98 <conversion_radix+0x1e>
    6b7e:	d905      	bls.n	6b8c <conversion_radix+0x12>
    6b80:	2870      	cmp	r0, #112	; 0x70
    6b82:	d00b      	beq.n	6b9c <conversion_radix+0x22>
    6b84:	2878      	cmp	r0, #120	; 0x78
    6b86:	d10b      	bne.n	6ba0 <conversion_radix+0x26>
		return 16;
    6b88:	2010      	movs	r0, #16
    6b8a:	4770      	bx	lr
	switch (specifier) {
    6b8c:	2858      	cmp	r0, #88	; 0x58
    6b8e:	d001      	beq.n	6b94 <conversion_radix+0x1a>
    6b90:	200a      	movs	r0, #10
    6b92:	4770      	bx	lr
		return 16;
    6b94:	2010      	movs	r0, #16
    6b96:	4770      	bx	lr
		return 8;
    6b98:	2008      	movs	r0, #8
    6b9a:	4770      	bx	lr
		return 16;
    6b9c:	2010      	movs	r0, #16
    6b9e:	4770      	bx	lr
	switch (specifier) {
    6ba0:	200a      	movs	r0, #10
}
    6ba2:	4770      	bx	lr

00006ba4 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    6ba4:	7843      	ldrb	r3, [r0, #1]
    6ba6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    6baa:	2b07      	cmp	r3, #7
    6bac:	d818      	bhi.n	6be0 <store_count+0x3c>
    6bae:	e8df f003 	tbb	[pc, r3]
    6bb2:	0604      	.short	0x0604
    6bb4:	100c0a08 	.word	0x100c0a08
    6bb8:	1614      	.short	0x1614
		*(int *)dp = count;
    6bba:	600a      	str	r2, [r1, #0]
		break;
    6bbc:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    6bbe:	700a      	strb	r2, [r1, #0]
		break;
    6bc0:	4770      	bx	lr
		*(short *)dp = (short)count;
    6bc2:	800a      	strh	r2, [r1, #0]
		break;
    6bc4:	4770      	bx	lr
		*(long *)dp = (long)count;
    6bc6:	600a      	str	r2, [r1, #0]
		break;
    6bc8:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    6bca:	17d3      	asrs	r3, r2, #31
    6bcc:	600a      	str	r2, [r1, #0]
    6bce:	604b      	str	r3, [r1, #4]
		break;
    6bd0:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    6bd2:	17d3      	asrs	r3, r2, #31
    6bd4:	600a      	str	r2, [r1, #0]
    6bd6:	604b      	str	r3, [r1, #4]
		break;
    6bd8:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    6bda:	600a      	str	r2, [r1, #0]
		break;
    6bdc:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    6bde:	600a      	str	r2, [r1, #0]
}
    6be0:	4770      	bx	lr

00006be2 <outs>:
{
    6be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6be6:	4607      	mov	r7, r0
    6be8:	460e      	mov	r6, r1
    6bea:	4614      	mov	r4, r2
    6bec:	4698      	mov	r8, r3
	size_t count = 0;
    6bee:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6bf0:	e006      	b.n	6c00 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    6bf2:	4631      	mov	r1, r6
    6bf4:	f814 0b01 	ldrb.w	r0, [r4], #1
    6bf8:	47b8      	blx	r7
		if (rc < 0) {
    6bfa:	2800      	cmp	r0, #0
    6bfc:	db09      	blt.n	6c12 <outs+0x30>
		++count;
    6bfe:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6c00:	4544      	cmp	r4, r8
    6c02:	d3f6      	bcc.n	6bf2 <outs+0x10>
    6c04:	f1b8 0f00 	cmp.w	r8, #0
    6c08:	d102      	bne.n	6c10 <outs+0x2e>
    6c0a:	7823      	ldrb	r3, [r4, #0]
    6c0c:	2b00      	cmp	r3, #0
    6c0e:	d1f0      	bne.n	6bf2 <outs+0x10>
	return (int)count;
    6c10:	4628      	mov	r0, r5
}
    6c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006c16 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6c16:	4770      	bx	lr

00006c18 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    6c18:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    6c1a:	f001 021f 	and.w	r2, r1, #31
    6c1e:	2301      	movs	r3, #1
    6c20:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6c22:	0949      	lsrs	r1, r1, #5
    6c24:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6c28:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6c2a:	f3bf 8f5b 	dmb	ish
    6c2e:	e850 2f00 	ldrex	r2, [r0]
    6c32:	ea02 0c01 	and.w	ip, r2, r1
    6c36:	e840 ce00 	strex	lr, ip, [r0]
    6c3a:	f1be 0f00 	cmp.w	lr, #0
    6c3e:	d1f6      	bne.n	6c2e <atomic_test_and_clear_bit+0x16>
    6c40:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    6c44:	4213      	tst	r3, r2
}
    6c46:	bf14      	ite	ne
    6c48:	2001      	movne	r0, #1
    6c4a:	2000      	moveq	r0, #0
    6c4c:	f85d fb04 	ldr.w	pc, [sp], #4

00006c50 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    6c50:	f001 021f 	and.w	r2, r1, #31
    6c54:	2301      	movs	r3, #1
    6c56:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6c58:	0949      	lsrs	r1, r1, #5
    6c5a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6c5e:	f3bf 8f5b 	dmb	ish
    6c62:	e850 2f00 	ldrex	r2, [r0]
    6c66:	431a      	orrs	r2, r3
    6c68:	e840 2100 	strex	r1, r2, [r0]
    6c6c:	2900      	cmp	r1, #0
    6c6e:	d1f8      	bne.n	6c62 <atomic_set_bit+0x12>
    6c70:	f3bf 8f5b 	dmb	ish
}
    6c74:	4770      	bx	lr

00006c76 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    6c76:	2000      	movs	r0, #0
    6c78:	4770      	bx	lr

00006c7a <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6c7a:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6c7c:	f001 fb6b 	bl	8356 <z_fatal_error>
}
    6c80:	bd08      	pop	{r3, pc}

00006c82 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    6c82:	b508      	push	{r3, lr}
    6c84:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6c86:	6800      	ldr	r0, [r0, #0]
    6c88:	f7ff fff7 	bl	6c7a <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    6c8c:	bd08      	pop	{r3, pc}

00006c8e <arch_irq_enable>:
{
    6c8e:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    6c90:	b240      	sxtb	r0, r0
    6c92:	f7fa fcab 	bl	15ec <__NVIC_EnableIRQ>
}
    6c96:	bd08      	pop	{r3, pc}

00006c98 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    6c98:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    6c9a:	3101      	adds	r1, #1
    6c9c:	b240      	sxtb	r0, r0
    6c9e:	f7fa fcb3 	bl	1608 <__NVIC_SetPriority>
}
    6ca2:	bd08      	pop	{r3, pc}

00006ca4 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    6ca4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6ca6:	2100      	movs	r1, #0
    6ca8:	2001      	movs	r0, #1
    6caa:	f7ff ffe6 	bl	6c7a <z_arm_fatal_error>
}
    6cae:	bd08      	pop	{r3, pc}

00006cb0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6cb0:	b508      	push	{r3, lr}
	handler();
    6cb2:	f7fa fccb 	bl	164c <z_SysNmiOnReset>
	z_arm_int_exit();
    6cb6:	f7fa fdbd 	bl	1834 <z_arm_exc_exit>
}
    6cba:	bd08      	pop	{r3, pc}

00006cbc <memory_fault_recoverable>:
}
    6cbc:	2000      	movs	r0, #0
    6cbe:	4770      	bx	lr

00006cc0 <debug_monitor>:
	*recoverable = false;
    6cc0:	2300      	movs	r3, #0
    6cc2:	700b      	strb	r3, [r1, #0]
}
    6cc4:	4770      	bx	lr

00006cc6 <fault_handle>:
{
    6cc6:	b508      	push	{r3, lr}
	*recoverable = false;
    6cc8:	2300      	movs	r3, #0
    6cca:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    6ccc:	1ecb      	subs	r3, r1, #3
    6cce:	2b09      	cmp	r3, #9
    6cd0:	d81a      	bhi.n	6d08 <fault_handle+0x42>
    6cd2:	e8df f003 	tbb	[pc, r3]
    6cd6:	0905      	.short	0x0905
    6cd8:	1919110d 	.word	0x1919110d
    6cdc:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    6ce0:	4611      	mov	r1, r2
    6ce2:	f7fa feb5 	bl	1a50 <hard_fault>
		break;
    6ce6:	e010      	b.n	6d0a <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    6ce8:	2100      	movs	r1, #0
    6cea:	f7fa fe47 	bl	197c <mem_manage_fault>
		break;
    6cee:	e00c      	b.n	6d0a <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    6cf0:	2100      	movs	r1, #0
    6cf2:	f7fa fdad 	bl	1850 <bus_fault>
		break;
    6cf6:	e008      	b.n	6d0a <fault_handle+0x44>
		reason = usage_fault(esf);
    6cf8:	f7fa fdf0 	bl	18dc <usage_fault>
		break;
    6cfc:	e005      	b.n	6d0a <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    6cfe:	4611      	mov	r1, r2
    6d00:	f7ff ffde 	bl	6cc0 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6d04:	2000      	movs	r0, #0
		break;
    6d06:	e000      	b.n	6d0a <fault_handle+0x44>
	switch (fault) {
    6d08:	2000      	movs	r0, #0
}
    6d0a:	bd08      	pop	{r3, pc}

00006d0c <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    6d0c:	6843      	ldr	r3, [r0, #4]
    6d0e:	1e5a      	subs	r2, r3, #1
		&&
    6d10:	4213      	tst	r3, r2
    6d12:	d106      	bne.n	6d22 <mpu_partition_is_valid+0x16>
		&&
    6d14:	2b1f      	cmp	r3, #31
    6d16:	d906      	bls.n	6d26 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    6d18:	6803      	ldr	r3, [r0, #0]
		&&
    6d1a:	421a      	tst	r2, r3
    6d1c:	d005      	beq.n	6d2a <mpu_partition_is_valid+0x1e>
    6d1e:	2000      	movs	r0, #0
    6d20:	4770      	bx	lr
    6d22:	2000      	movs	r0, #0
    6d24:	4770      	bx	lr
    6d26:	2000      	movs	r0, #0
    6d28:	4770      	bx	lr
    6d2a:	2001      	movs	r0, #1
}
    6d2c:	4770      	bx	lr

00006d2e <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    6d2e:	2807      	cmp	r0, #7
    6d30:	d805      	bhi.n	6d3e <region_allocate_and_init+0x10>
{
    6d32:	b510      	push	{r4, lr}
    6d34:	4604      	mov	r4, r0
	region_init(index, region_conf);
    6d36:	f7fa ffed 	bl	1d14 <region_init>
	return index;
    6d3a:	4620      	mov	r0, r4
}
    6d3c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    6d3e:	f06f 0015 	mvn.w	r0, #21
}
    6d42:	4770      	bx	lr

00006d44 <mpu_configure_region>:
{
    6d44:	b500      	push	{lr}
    6d46:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    6d48:	680b      	ldr	r3, [r1, #0]
    6d4a:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
    6d4c:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6d4e:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    6d50:	2b20      	cmp	r3, #32
    6d52:	d912      	bls.n	6d7a <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    6d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6d58:	d811      	bhi.n	6d7e <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    6d5a:	3b01      	subs	r3, #1
    6d5c:	fab3 f383 	clz	r3, r3
    6d60:	f1c3 031f 	rsb	r3, r3, #31
    6d64:	005b      	lsls	r3, r3, #1
    6d66:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6d6a:	4313      	orrs	r3, r2
    6d6c:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    6d6e:	a901      	add	r1, sp, #4
    6d70:	f7ff ffdd 	bl	6d2e <region_allocate_and_init>
}
    6d74:	b005      	add	sp, #20
    6d76:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    6d7a:	2308      	movs	r3, #8
    6d7c:	e7f5      	b.n	6d6a <mpu_configure_region+0x26>
		return REGION_4G;
    6d7e:	233e      	movs	r3, #62	; 0x3e
    6d80:	e7f3      	b.n	6d6a <mpu_configure_region+0x26>

00006d82 <mpu_configure_regions>:
{
    6d82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d86:	4680      	mov	r8, r0
    6d88:	460f      	mov	r7, r1
    6d8a:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    6d8c:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    6d8e:	2500      	movs	r5, #0
    6d90:	e009      	b.n	6da6 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6d92:	4621      	mov	r1, r4
    6d94:	b2f0      	uxtb	r0, r6
    6d96:	f7ff ffd5 	bl	6d44 <mpu_configure_region>
    6d9a:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    6d9c:	f110 0f16 	cmn.w	r0, #22
    6da0:	d014      	beq.n	6dcc <mpu_configure_regions+0x4a>
		reg_index++;
    6da2:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    6da4:	3501      	adds	r5, #1
    6da6:	42bd      	cmp	r5, r7
    6da8:	da10      	bge.n	6dcc <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    6daa:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    6dae:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    6db2:	6862      	ldr	r2, [r4, #4]
    6db4:	2a00      	cmp	r2, #0
    6db6:	d0f5      	beq.n	6da4 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    6db8:	f1b9 0f00 	cmp.w	r9, #0
    6dbc:	d0e9      	beq.n	6d92 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    6dbe:	4620      	mov	r0, r4
    6dc0:	f7ff ffa4 	bl	6d0c <mpu_partition_is_valid>
		if (do_sanity_check &&
    6dc4:	2800      	cmp	r0, #0
    6dc6:	d1e4      	bne.n	6d92 <mpu_configure_regions+0x10>
			return -EINVAL;
    6dc8:	f06f 0615 	mvn.w	r6, #21
}
    6dcc:	4630      	mov	r0, r6
    6dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006dd2 <arm_core_mpu_configure_static_mpu_regions>:
{
    6dd2:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    6dd4:	f7fa ffb2 	bl	1d3c <mpu_configure_static_mpu_regions>
}
    6dd8:	bd08      	pop	{r3, pc}

00006dda <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    6dda:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    6ddc:	f7fa ffb8 	bl	1d50 <mpu_configure_dynamic_mpu_regions>
}
    6de0:	bd08      	pop	{r3, pc}

00006de2 <malloc_prepare>:
}
    6de2:	2000      	movs	r0, #0
    6de4:	4770      	bx	lr

00006de6 <_stdout_hook_default>:
}
    6de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6dea:	4770      	bx	lr

00006dec <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    6dec:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    6dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6df6:	f7fd fd15 	bl	4824 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    6dfa:	bd08      	pop	{r3, pc}

00006dfc <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    6dfc:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
    6dfe:	f7fd fd95 	bl	492c <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
    6e02:	bd08      	pop	{r3, pc}

00006e04 <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
    6e04:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    6e06:	f7fd faeb 	bl	43e0 <z_impl_z_errno>
	return z_errno();
}
    6e0a:	bd08      	pop	{r3, pc}

00006e0c <sys_arch_reboot>:
{
    6e0c:	b508      	push	{r3, lr}
    *p_gpregret = val;
    6e0e:	b2c0      	uxtb	r0, r0
    6e10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6e14:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
    6e18:	f7fb f808 	bl	1e2c <__NVIC_SystemReset>

00006e1c <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6e1c:	2301      	movs	r3, #1
    6e1e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    6e22:	f3bf 8f4f 	dsb	sy
        __WFE();
    6e26:	bf20      	wfe
    while (true)
    6e28:	e7fd      	b.n	6e26 <nrf_power_system_off+0xa>

00006e2a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    6e2a:	2806      	cmp	r0, #6
    6e2c:	d000      	beq.n	6e30 <pm_state_set+0x6>
    6e2e:	4770      	bx	lr
{
    6e30:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
    6e32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    6e36:	f7ff fff1 	bl	6e1c <nrf_power_system_off>

00006e3a <pm_state_exit_post_ops>:
    6e3a:	2300      	movs	r3, #0
    6e3c:	f383 8811 	msr	BASEPRI, r3
    6e40:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6e44:	4770      	bx	lr

00006e46 <nrf_saadc_channel_init>:
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
    6e46:	7813      	ldrb	r3, [r2, #0]
    6e48:	f003 0303 	and.w	r3, r3, #3
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
    6e4c:	f892 c001 	ldrb.w	ip, [r2, #1]
    6e50:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    6e54:	f00c 0c30 	and.w	ip, ip, #48	; 0x30
    6e58:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    6e5c:	f892 c002 	ldrb.w	ip, [r2, #2]
    6e60:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    6e64:	f40c 6ce0 	and.w	ip, ip, #1792	; 0x700
    6e68:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
    6e6c:	f892 c003 	ldrb.w	ip, [r2, #3]
    6e70:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
    6e74:	f40c 5c80 	and.w	ip, ip, #4096	; 0x1000
    6e78:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
    6e7c:	f892 c004 	ldrb.w	ip, [r2, #4]
    6e80:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    6e84:	f40c 2ce0 	and.w	ip, ip, #458752	; 0x70000
    6e88:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    6e8c:	f892 c005 	ldrb.w	ip, [r2, #5]
    6e90:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
    6e94:	f40c 1c80 	and.w	ip, ip, #1048576	; 0x100000
    6e98:	ea43 030c 	orr.w	r3, r3, ip
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
    6e9c:	7992      	ldrb	r2, [r2, #6]
    6e9e:	0612      	lsls	r2, r2, #24
    6ea0:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
    6ea4:	4313      	orrs	r3, r2
    p_reg->CH[channel].CONFIG =
    6ea6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    6eaa:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518
}
    6eae:	4770      	bx	lr

00006eb0 <check_buffer_size>:
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    6eb0:	0049      	lsls	r1, r1, #1
	if (sequence->options) {
    6eb2:	6803      	ldr	r3, [r0, #0]
    6eb4:	b113      	cbz	r3, 6ebc <check_buffer_size+0xc>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    6eb6:	899b      	ldrh	r3, [r3, #12]
    6eb8:	fb03 1101 	mla	r1, r3, r1, r1
	if (sequence->buffer_size < needed_buffer_size) {
    6ebc:	68c3      	ldr	r3, [r0, #12]
    6ebe:	428b      	cmp	r3, r1
    6ec0:	d301      	bcc.n	6ec6 <check_buffer_size+0x16>
	return 0;
    6ec2:	2000      	movs	r0, #0
    6ec4:	4770      	bx	lr
		return -ENOMEM;
    6ec6:	f06f 000b 	mvn.w	r0, #11
}
    6eca:	4770      	bx	lr

00006ecc <adc_context_request_next_sampling>:
{
    6ecc:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6ece:	f3bf 8f5b 	dmb	ish
    6ed2:	e850 3f00 	ldrex	r3, [r0]
    6ed6:	1c5a      	adds	r2, r3, #1
    6ed8:	e840 2100 	strex	r1, r2, [r0]
    6edc:	2900      	cmp	r1, #0
    6ede:	d1f8      	bne.n	6ed2 <adc_context_request_next_sampling+0x6>
    6ee0:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    6ee4:	b11b      	cbz	r3, 6eee <adc_context_request_next_sampling+0x22>
		ctx->status = -EBUSY;
    6ee6:	f06f 030f 	mvn.w	r3, #15
    6eea:	6603      	str	r3, [r0, #96]	; 0x60
}
    6eec:	bd08      	pop	{r3, pc}
		adc_context_start_sampling(ctx);
    6eee:	f7fb f879 	bl	1fe4 <adc_context_start_sampling>
    6ef2:	e7fb      	b.n	6eec <adc_context_request_next_sampling+0x20>

00006ef4 <adc_context_on_timer_expired>:
{
	k_timer_stop(&ctx->timer);
}

static void adc_context_on_timer_expired(struct k_timer *timer_id)
{
    6ef4:	b508      	push	{r3, lr}
	struct adc_context *ctx =
		CONTAINER_OF(timer_id, struct adc_context, timer);

	adc_context_request_next_sampling(ctx);
    6ef6:	3808      	subs	r0, #8
    6ef8:	f7ff ffe8 	bl	6ecc <adc_context_request_next_sampling>
}
    6efc:	bd08      	pop	{r3, pc}

00006efe <adc_context_lock>:
#endif /* ADC_CONTEXT_USES_KERNEL_TIMER */

static inline void adc_context_lock(struct adc_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
    6efe:	b508      	push	{r3, lr}
	k_sem_take(&ctx->lock, K_FOREVER);
    6f00:	3040      	adds	r0, #64	; 0x40
	return z_impl_k_sem_take(sem, timeout);
    6f02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6f0a:	f7fd fdaf 	bl	4a6c <z_impl_k_sem_take>

#ifdef CONFIG_ADC_ASYNC
	ctx->asynchronous = asynchronous;
	ctx->signal = signal;
#endif /* CONFIG_ADC_ASYNC */
}
    6f0e:	bd08      	pop	{r3, pc}

00006f10 <adc_context_wait_for_completion>:
		k_sem_give(&ctx->lock);
	}
}

static inline int adc_context_wait_for_completion(struct adc_context *ctx)
{
    6f10:	b510      	push	{r4, lr}
    6f12:	4604      	mov	r4, r0
	if (ctx->asynchronous) {
		return 0;
	}
#endif /* CONFIG_ADC_ASYNC */

	k_sem_take(&ctx->sync, K_FOREVER);
    6f14:	3050      	adds	r0, #80	; 0x50
    6f16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6f1e:	f7fd fda5 	bl	4a6c <z_impl_k_sem_take>
	return ctx->status;
}
    6f22:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6f24:	bd10      	pop	{r4, pc}

00006f26 <adc_context_start_read>:
	k_sem_give(&ctx->sync);
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
    6f26:	b538      	push	{r3, r4, r5, lr}
    6f28:	4684      	mov	ip, r0
    6f2a:	460d      	mov	r5, r1
	ctx->sequence = *sequence;
    6f2c:	f100 0e64 	add.w	lr, r0, #100	; 0x64
    6f30:	460c      	mov	r4, r1
    6f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    6f34:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    6f38:	6823      	ldr	r3, [r4, #0]
    6f3a:	f8ce 3000 	str.w	r3, [lr]
	ctx->status = 0;
    6f3e:	2300      	movs	r3, #0
    6f40:	f8cc 3060 	str.w	r3, [ip, #96]	; 0x60

	if (sequence->options) {
    6f44:	682b      	ldr	r3, [r5, #0]
    6f46:	b153      	cbz	r3, 6f5e <adc_context_start_read+0x38>
		ctx->options = *sequence->options;
    6f48:	f10c 0478 	add.w	r4, ip, #120	; 0x78
    6f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    6f52:	f8cc 4064 	str.w	r4, [ip, #100]	; 0x64
		ctx->sampling_index = 0U;
    6f56:	2300      	movs	r3, #0
    6f58:	f8ac 3088 	strh.w	r3, [ip, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    6f5c:	b918      	cbnz	r0, 6f66 <adc_context_start_read+0x40>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    6f5e:	4660      	mov	r0, ip
    6f60:	f7fb f840 	bl	1fe4 <adc_context_start_sampling>
}
    6f64:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6f66:	2300      	movs	r3, #0
    6f68:	f3bf 8f5b 	dmb	ish
    6f6c:	e85c 2f00 	ldrex	r2, [ip]
    6f70:	e84c 3100 	strex	r1, r3, [ip]
    6f74:	2900      	cmp	r1, #0
    6f76:	d1f9      	bne.n	6f6c <adc_context_start_read+0x46>
    6f78:	f3bf 8f5b 	dmb	ish
			adc_context_enable_timer(ctx);
    6f7c:	4660      	mov	r0, ip
    6f7e:	f7fb f889 	bl	2094 <adc_context_enable_timer>
			return;
    6f82:	e7ef      	b.n	6f64 <adc_context_start_read+0x3e>

00006f84 <adc_context_unlock_unconditionally>:
{
    6f84:	b508      	push	{r3, lr}
	return sem->count;
    6f86:	6c83      	ldr	r3, [r0, #72]	; 0x48
	if (!k_sem_count_get(&ctx->lock)) {
    6f88:	b103      	cbz	r3, 6f8c <adc_context_unlock_unconditionally+0x8>
}
    6f8a:	bd08      	pop	{r3, pc}
		k_sem_give(&ctx->lock);
    6f8c:	3040      	adds	r0, #64	; 0x40
	z_impl_k_sem_give(sem);
    6f8e:	f7fd fd49 	bl	4a24 <z_impl_k_sem_give>
}
    6f92:	e7fa      	b.n	6f8a <adc_context_unlock_unconditionally+0x6>

00006f94 <adc_context_on_sampling_done>:
 * depending on the realized sequence) is done. It calls the defined callback
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
    6f94:	b510      	push	{r4, lr}
    6f96:	4604      	mov	r4, r0
	if (ctx->sequence.options) {
    6f98:	6e43      	ldr	r3, [r0, #100]	; 0x64
    6f9a:	b1fb      	cbz	r3, 6fdc <adc_context_on_sampling_done+0x48>
    6f9c:	4608      	mov	r0, r1
		adc_sequence_callback callback = ctx->options.callback;
    6f9e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    6fa0:	b143      	cbz	r3, 6fb4 <adc_context_on_sampling_done+0x20>
			action = callback(dev,
    6fa2:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
    6fa6:	f104 0164 	add.w	r1, r4, #100	; 0x64
    6faa:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    6fac:	2801      	cmp	r0, #1
    6fae:	d00d      	beq.n	6fcc <adc_context_on_sampling_done+0x38>
    6fb0:	2802      	cmp	r0, #2
    6fb2:	d00e      	beq.n	6fd2 <adc_context_on_sampling_done+0x3e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    6fb4:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
			    ctx->options.extra_samplings) {
    6fb8:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
			if (ctx->sampling_index <
    6fbc:	4293      	cmp	r3, r2
    6fbe:	d212      	bcs.n	6fe6 <adc_context_on_sampling_done+0x52>
				++ctx->sampling_index;
    6fc0:	3301      	adds	r3, #1
    6fc2:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
		bool repeat = false;
    6fc6:	2100      	movs	r1, #0
		bool finish = false;
    6fc8:	460b      	mov	r3, r1
    6fca:	e004      	b.n	6fd6 <adc_context_on_sampling_done+0x42>
		switch (action) {
    6fcc:	2101      	movs	r1, #1
    6fce:	2300      	movs	r3, #0
    6fd0:	e001      	b.n	6fd6 <adc_context_on_sampling_done+0x42>
		bool repeat = false;
    6fd2:	2100      	movs	r1, #0
			finish = true;
    6fd4:	2301      	movs	r3, #1
			} else {
				finish = true;
			}
		}

		if (!finish) {
    6fd6:	b14b      	cbz	r3, 6fec <adc_context_on_sampling_done+0x58>
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    6fd8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    6fda:	bb0b      	cbnz	r3, 7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
	k_sem_give(&ctx->sync);
    6fdc:	f104 0050 	add.w	r0, r4, #80	; 0x50
    6fe0:	f7fd fd20 	bl	4a24 <z_impl_k_sem_give>
			adc_context_disable_timer(ctx);
		}
	}

	adc_context_complete(ctx, 0);
}
    6fe4:	bd10      	pop	{r4, pc}
		bool repeat = false;
    6fe6:	2100      	movs	r1, #0
				finish = true;
    6fe8:	2301      	movs	r3, #1
    6fea:	e7f4      	b.n	6fd6 <adc_context_on_sampling_done+0x42>
			adc_context_update_buffer_pointer(ctx, repeat);
    6fec:	4620      	mov	r0, r4
    6fee:	f7fb f80b 	bl	2008 <adc_context_update_buffer_pointer>
			if (ctx->options.interval_us == 0U) {
    6ff2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    6ff4:	b91b      	cbnz	r3, 6ffe <adc_context_on_sampling_done+0x6a>
				adc_context_start_sampling(ctx);
    6ff6:	4620      	mov	r0, r4
    6ff8:	f7fa fff4 	bl	1fe4 <adc_context_start_sampling>
    6ffc:	e7f2      	b.n	6fe4 <adc_context_on_sampling_done+0x50>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    6ffe:	f3bf 8f5b 	dmb	ish
    7002:	e854 3f00 	ldrex	r3, [r4]
    7006:	1e5a      	subs	r2, r3, #1
    7008:	e844 2100 	strex	r1, r2, [r4]
    700c:	2900      	cmp	r1, #0
    700e:	d1f8      	bne.n	7002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    7010:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    7014:	2b01      	cmp	r3, #1
    7016:	dde5      	ble.n	6fe4 <adc_context_on_sampling_done+0x50>
				adc_context_start_sampling(ctx);
    7018:	4620      	mov	r0, r4
    701a:	f7fa ffe3 	bl	1fe4 <adc_context_start_sampling>
			return;
    701e:	e7e1      	b.n	6fe4 <adc_context_on_sampling_done+0x50>
	k_timer_stop(&ctx->timer);
    7020:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_timer_stop(timer);
    7024:	f001 fcb0 	bl	8988 <z_impl_k_timer_stop>
}
    7028:	e7d8      	b.n	6fdc <adc_context_on_sampling_done+0x48>

0000702a <nrf_clock_is_running>:
    switch (domain)
    702a:	b119      	cbz	r1, 7034 <nrf_clock_is_running+0xa>
    702c:	2901      	cmp	r1, #1
    702e:	d00e      	beq.n	704e <nrf_clock_is_running+0x24>
    7030:	2000      	movs	r0, #0
    7032:	4770      	bx	lr
            if (p_clk_src != NULL)
    7034:	b122      	cbz	r2, 7040 <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7036:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    703a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    703e:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7040:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    7044:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7048:	d10e      	bne.n	7068 <nrf_clock_is_running+0x3e>
    return false;
    704a:	2000      	movs	r0, #0
    704c:	4770      	bx	lr
            if (p_clk_src != NULL)
    704e:	b122      	cbz	r2, 705a <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7050:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    7054:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    7058:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    705a:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    705e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7062:	d103      	bne.n	706c <nrf_clock_is_running+0x42>
    return false;
    7064:	2000      	movs	r0, #0
    7066:	4770      	bx	lr
                return true;
    7068:	2001      	movs	r0, #1
    706a:	4770      	bx	lr
                return true;
    706c:	2001      	movs	r0, #1
}
    706e:	4770      	bx	lr

00007070 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    7070:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    7072:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    7076:	0089      	lsls	r1, r1, #2
    7078:	3138      	adds	r1, #56	; 0x38
}
    707a:	4408      	add	r0, r1
    707c:	4770      	bx	lr

0000707e <get_sub_config>:
	const struct nrf_clock_control_config *config =
    707e:	6840      	ldr	r0, [r0, #4]
}
    7080:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    7084:	4770      	bx	lr

00007086 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    7086:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    7088:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    708c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7090:	4770      	bx	lr

00007092 <get_status>:
{
    7092:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    7094:	b2c9      	uxtb	r1, r1
    7096:	f7ff ffeb 	bl	7070 <get_sub_data>
    709a:	6880      	ldr	r0, [r0, #8]
}
    709c:	f000 0007 	and.w	r0, r0, #7
    70a0:	bd08      	pop	{r3, pc}

000070a2 <set_off_state>:
	__asm__ volatile(
    70a2:	f04f 0320 	mov.w	r3, #32
    70a6:	f3ef 8211 	mrs	r2, BASEPRI
    70aa:	f383 8812 	msr	BASEPRI_MAX, r3
    70ae:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    70b2:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    70b4:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    70b8:	d001      	beq.n	70be <set_off_state+0x1c>
    70ba:	428b      	cmp	r3, r1
    70bc:	d107      	bne.n	70ce <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    70be:	2301      	movs	r3, #1
    70c0:	6003      	str	r3, [r0, #0]
	int err = 0;
    70c2:	2000      	movs	r0, #0
	__asm__ volatile(
    70c4:	f382 8811 	msr	BASEPRI, r2
    70c8:	f3bf 8f6f 	isb	sy
}
    70cc:	4770      	bx	lr
		err = -EPERM;
    70ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    70d2:	e7f7      	b.n	70c4 <set_off_state+0x22>

000070d4 <set_starting_state>:
	__asm__ volatile(
    70d4:	f04f 0320 	mov.w	r3, #32
    70d8:	f3ef 8211 	mrs	r2, BASEPRI
    70dc:	f383 8812 	msr	BASEPRI_MAX, r3
    70e0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    70e4:	6803      	ldr	r3, [r0, #0]
    70e6:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    70ea:	f003 0307 	and.w	r3, r3, #7
    70ee:	2b01      	cmp	r3, #1
    70f0:	d008      	beq.n	7104 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    70f2:	458c      	cmp	ip, r1
    70f4:	d009      	beq.n	710a <set_starting_state+0x36>
		err = -EPERM;
    70f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    70fa:	f382 8811 	msr	BASEPRI, r2
    70fe:	f3bf 8f6f 	isb	sy
}
    7102:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7104:	6001      	str	r1, [r0, #0]
	int err = 0;
    7106:	2000      	movs	r0, #0
    7108:	e7f7      	b.n	70fa <set_starting_state+0x26>
		err = -EALREADY;
    710a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    710e:	e7f4      	b.n	70fa <set_starting_state+0x26>

00007110 <set_on_state>:
	__asm__ volatile(
    7110:	f04f 0320 	mov.w	r3, #32
    7114:	f3ef 8211 	mrs	r2, BASEPRI
    7118:	f383 8812 	msr	BASEPRI_MAX, r3
    711c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7120:	6803      	ldr	r3, [r0, #0]
    7122:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7126:	f043 0302 	orr.w	r3, r3, #2
    712a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    712c:	f382 8811 	msr	BASEPRI, r2
    7130:	f3bf 8f6f 	isb	sy
}
    7134:	4770      	bx	lr

00007136 <clkstarted_handle>:
{
    7136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7138:	4606      	mov	r6, r0
    713a:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    713c:	f7ff ff98 	bl	7070 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    7140:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    7142:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    7144:	2300      	movs	r3, #0
    7146:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    714a:	f7ff ffe1 	bl	7110 <set_on_state>
	if (callback) {
    714e:	b11d      	cbz	r5, 7158 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    7150:	463a      	mov	r2, r7
    7152:	4621      	mov	r1, r4
    7154:	4630      	mov	r0, r6
    7156:	47a8      	blx	r5
}
    7158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000715a <stop>:
{
    715a:	b570      	push	{r4, r5, r6, lr}
    715c:	4606      	mov	r6, r0
    715e:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    7160:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    7162:	4621      	mov	r1, r4
    7164:	f7ff ff84 	bl	7070 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    7168:	4629      	mov	r1, r5
    716a:	3008      	adds	r0, #8
    716c:	f7ff ff99 	bl	70a2 <set_off_state>
	if (err < 0) {
    7170:	2800      	cmp	r0, #0
    7172:	db06      	blt.n	7182 <stop+0x28>
	get_sub_config(dev, type)->stop();
    7174:	4621      	mov	r1, r4
    7176:	4630      	mov	r0, r6
    7178:	f7ff ff81 	bl	707e <get_sub_config>
    717c:	6843      	ldr	r3, [r0, #4]
    717e:	4798      	blx	r3
	return 0;
    7180:	2000      	movs	r0, #0
}
    7182:	bd70      	pop	{r4, r5, r6, pc}

00007184 <api_stop>:
{
    7184:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    7186:	2280      	movs	r2, #128	; 0x80
    7188:	f7ff ffe7 	bl	715a <stop>
}
    718c:	bd08      	pop	{r3, pc}

0000718e <async_start>:
{
    718e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7192:	4606      	mov	r6, r0
    7194:	4690      	mov	r8, r2
    7196:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    7198:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    719a:	4629      	mov	r1, r5
    719c:	f7ff ff68 	bl	7070 <get_sub_data>
    71a0:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    71a2:	9906      	ldr	r1, [sp, #24]
    71a4:	3008      	adds	r0, #8
    71a6:	f7ff ff95 	bl	70d4 <set_starting_state>
	if (err < 0) {
    71aa:	2800      	cmp	r0, #0
    71ac:	db09      	blt.n	71c2 <async_start+0x34>
	subdata->cb = cb;
    71ae:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    71b2:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    71b4:	4629      	mov	r1, r5
    71b6:	4630      	mov	r0, r6
    71b8:	f7ff ff61 	bl	707e <get_sub_config>
    71bc:	6803      	ldr	r3, [r0, #0]
    71be:	4798      	blx	r3
	return 0;
    71c0:	2000      	movs	r0, #0
}
    71c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000071c6 <api_start>:
{
    71c6:	b510      	push	{r4, lr}
    71c8:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    71ca:	2480      	movs	r4, #128	; 0x80
    71cc:	9400      	str	r4, [sp, #0]
    71ce:	f7ff ffde 	bl	718e <async_start>
}
    71d2:	b002      	add	sp, #8
    71d4:	bd10      	pop	{r4, pc}

000071d6 <onoff_started_callback>:
{
    71d6:	b510      	push	{r4, lr}
    71d8:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    71da:	b2c9      	uxtb	r1, r1
    71dc:	f7ff ff53 	bl	7086 <get_onoff_manager>
	notify(mgr, 0);
    71e0:	2100      	movs	r1, #0
    71e2:	47a0      	blx	r4
}
    71e4:	bd10      	pop	{r4, pc}

000071e6 <hfclk_start>:
{
    71e6:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    71e8:	2001      	movs	r0, #1
    71ea:	f000 fe97 	bl	7f1c <nrfx_clock_start>
}
    71ee:	bd08      	pop	{r3, pc}

000071f0 <hfclk_stop>:
{
    71f0:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    71f2:	2001      	movs	r0, #1
    71f4:	f000 fee3 	bl	7fbe <nrfx_clock_stop>
}
    71f8:	bd08      	pop	{r3, pc}

000071fa <lfclk_stop>:
{
    71fa:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    71fc:	2000      	movs	r0, #0
    71fe:	f000 fede 	bl	7fbe <nrfx_clock_stop>
}
    7202:	bd08      	pop	{r3, pc}

00007204 <k_msleep>:
{
    7204:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    7206:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    720a:	17c1      	asrs	r1, r0, #31
    720c:	03c9      	lsls	r1, r1, #15
    720e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    7212:	03c0      	lsls	r0, r0, #15
    7214:	f240 33e7 	movw	r3, #999	; 0x3e7
    7218:	18c0      	adds	r0, r0, r3
    721a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    721e:	f04f 0300 	mov.w	r3, #0
    7222:	f141 0100 	adc.w	r1, r1, #0
    7226:	f7f8 ffab 	bl	180 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    722a:	f7fd ffa3 	bl	5174 <z_impl_k_sleep>
}
    722e:	bd08      	pop	{r3, pc}

00007230 <blocking_start_callback>:
{
    7230:	b508      	push	{r3, lr}
    7232:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    7234:	f7fd fbf6 	bl	4a24 <z_impl_k_sem_give>
}
    7238:	bd08      	pop	{r3, pc}

0000723a <lfclk_start>:
{
    723a:	b508      	push	{r3, lr}
		anomaly_132_workaround();
    723c:	f7fb f936 	bl	24ac <anomaly_132_workaround>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7240:	2000      	movs	r0, #0
    7242:	f000 fe6b 	bl	7f1c <nrfx_clock_start>
}
    7246:	bd08      	pop	{r3, pc}

00007248 <uart_fifo_read>:
{
    7248:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    724a:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read == NULL) {
    724c:	699b      	ldr	r3, [r3, #24]
    724e:	b10b      	cbz	r3, 7254 <uart_fifo_read+0xc>
	return api->fifo_read(dev, rx_data, size);
    7250:	4798      	blx	r3
}
    7252:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    7254:	f06f 0057 	mvn.w	r0, #87	; 0x57
    7258:	e7fb      	b.n	7252 <uart_fifo_read+0xa>

0000725a <uart_irq_callback_user_data_set>:
{
    725a:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    725c:	6883      	ldr	r3, [r0, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    725e:	b123      	cbz	r3, 726a <uart_irq_callback_user_data_set+0x10>
    7260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7262:	b12b      	cbz	r3, 7270 <uart_irq_callback_user_data_set+0x16>
		api->irq_callback_set(dev, cb, user_data);
    7264:	4798      	blx	r3
		return 0;
    7266:	2000      	movs	r0, #0
}
    7268:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    726a:	f06f 0057 	mvn.w	r0, #87	; 0x57
    726e:	e7fb      	b.n	7268 <uart_irq_callback_user_data_set+0xe>
    7270:	f06f 0057 	mvn.w	r0, #87	; 0x57
    7274:	e7f8      	b.n	7268 <uart_irq_callback_user_data_set+0xe>

00007276 <uart_irq_tx_disable>:

extern void z_impl_uart_irq_tx_disable(const struct device * dev);

__pinned_func
static inline void uart_irq_tx_disable(const struct device * dev)
{
    7276:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    7278:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable != NULL) {
    727a:	6a1b      	ldr	r3, [r3, #32]
    727c:	b103      	cbz	r3, 7280 <uart_irq_tx_disable+0xa>
		api->irq_tx_disable(dev);
    727e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
    7280:	bd08      	pop	{r3, pc}

00007282 <uart_irq_rx_enable>:

extern void z_impl_uart_irq_rx_enable(const struct device * dev);

__pinned_func
static inline void uart_irq_rx_enable(const struct device * dev)
{
    7282:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    7284:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
    7286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7288:	b103      	cbz	r3, 728c <uart_irq_rx_enable+0xa>
		api->irq_rx_enable(dev);
    728a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
}
    728c:	bd08      	pop	{r3, pc}

0000728e <uart_irq_rx_disable>:

extern void z_impl_uart_irq_rx_disable(const struct device * dev);

__pinned_func
static inline void uart_irq_rx_disable(const struct device * dev)
{
    728e:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    7290:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable != NULL) {
    7292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7294:	b103      	cbz	r3, 7298 <uart_irq_rx_disable+0xa>
		api->irq_rx_disable(dev);
    7296:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_disable(dev);
}
    7298:	bd08      	pop	{r3, pc}

0000729a <uart_irq_is_pending>:

extern int z_impl_uart_irq_is_pending(const struct device * dev);

__pinned_func
static inline int uart_irq_is_pending(const struct device * dev)
{
    729a:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    729c:	6883      	ldr	r3, [r0, #8]
	if (api->irq_is_pending == NULL) {
    729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    72a0:	b10b      	cbz	r3, 72a6 <uart_irq_is_pending+0xc>
	return api->irq_is_pending(dev);
    72a2:	4798      	blx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_IS_PENDING);
	}
#endif
	compiler_barrier();
	return z_impl_uart_irq_is_pending(dev);
}
    72a4:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    72a6:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_uart_irq_is_pending(dev);
    72aa:	e7fb      	b.n	72a4 <uart_irq_is_pending+0xa>

000072ac <uart_irq_update>:

extern int z_impl_uart_irq_update(const struct device * dev);

__pinned_func
static inline int uart_irq_update(const struct device * dev)
{
    72ac:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    72ae:	6883      	ldr	r3, [r0, #8]
	if (api->irq_update == NULL) {
    72b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    72b2:	b10b      	cbz	r3, 72b8 <uart_irq_update+0xc>
	return api->irq_update(dev);
    72b4:	4798      	blx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_UPDATE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_irq_update(dev);
}
    72b6:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    72b8:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_uart_irq_update(dev);
    72bc:	e7fb      	b.n	72b6 <uart_irq_update+0xa>

000072be <read_uart>:
{
    72be:	b510      	push	{r4, lr}
    72c0:	4604      	mov	r4, r0
	const struct uart_driver_api *api =
    72c2:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read == NULL) {
    72c4:	699b      	ldr	r3, [r3, #24]
    72c6:	b11b      	cbz	r3, 72d0 <read_uart+0x12>
	return api->fifo_read(dev, rx_data, size);
    72c8:	4798      	blx	r3
	if (rx < 0) {
    72ca:	2800      	cmp	r0, #0
    72cc:	db00      	blt.n	72d0 <read_uart+0x12>
}
    72ce:	bd10      	pop	{r4, pc}
		uart_irq_rx_disable(uart);
    72d0:	4620      	mov	r0, r4
    72d2:	f7ff ffdc 	bl	728e <uart_irq_rx_disable>
		return -EIO;
    72d6:	f06f 0004 	mvn.w	r0, #4
    72da:	e7f8      	b.n	72ce <read_uart+0x10>

000072dc <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    72dc:	460b      	mov	r3, r1
    72de:	b139      	cbz	r1, 72f0 <sys_slist_remove+0x14>
	return node->next;
    72e0:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    72e2:	6019      	str	r1, [r3, #0]
	return list->tail;
    72e4:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    72e6:	428a      	cmp	r2, r1
    72e8:	d009      	beq.n	72fe <sys_slist_remove+0x22>
	parent->next = child;
    72ea:	2300      	movs	r3, #0
    72ec:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    72ee:	4770      	bx	lr
	return node->next;
    72f0:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    72f2:	6003      	str	r3, [r0, #0]
	return list->tail;
    72f4:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    72f6:	428a      	cmp	r2, r1
    72f8:	d1f7      	bne.n	72ea <sys_slist_remove+0xe>
	list->tail = node;
    72fa:	6043      	str	r3, [r0, #4]
}
    72fc:	e7f5      	b.n	72ea <sys_slist_remove+0xe>
	list->tail = node;
    72fe:	6043      	str	r3, [r0, #4]
}
    7300:	e7f3      	b.n	72ea <sys_slist_remove+0xe>

00007302 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7302:	b508      	push	{r3, lr}
    7304:	460a      	mov	r2, r1
	return list->head;
    7306:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7308:	2100      	movs	r1, #0
    730a:	e001      	b.n	7310 <sys_slist_find_and_remove+0xe>
    730c:	4619      	mov	r1, r3
    730e:	681b      	ldr	r3, [r3, #0]
    7310:	b12b      	cbz	r3, 731e <sys_slist_find_and_remove+0x1c>
    7312:	4293      	cmp	r3, r2
    7314:	d1fa      	bne.n	730c <sys_slist_find_and_remove+0xa>
    7316:	f7ff ffe1 	bl	72dc <sys_slist_remove>
    731a:	2001      	movs	r0, #1
    731c:	e000      	b.n	7320 <sys_slist_find_and_remove+0x1e>
    731e:	2000      	movs	r0, #0
    7320:	bd08      	pop	{r3, pc}

00007322 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    7322:	b570      	push	{r4, r5, r6, lr}
    7324:	4604      	mov	r4, r0
    7326:	460d      	mov	r5, r1
    7328:	4616      	mov	r6, r2
	return list->head;
    732a:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    732c:	b133      	cbz	r3, 733c <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    732e:	f7ff ffe8 	bl	7302 <sys_slist_find_and_remove>
    7332:	b970      	cbnz	r0, 7352 <gpio_manage_callback+0x30>
			if (!set) {
    7334:	b91e      	cbnz	r6, 733e <gpio_manage_callback+0x1c>
				return -EINVAL;
    7336:	f06f 0015 	mvn.w	r0, #21
    733a:	e006      	b.n	734a <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
    733c:	b132      	cbz	r2, 734c <gpio_manage_callback+0x2a>
    733e:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    7340:	602b      	str	r3, [r5, #0]
	list->head = node;
    7342:	6025      	str	r5, [r4, #0]
	return list->tail;
    7344:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    7346:	b143      	cbz	r3, 735a <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    7348:	2000      	movs	r0, #0
}
    734a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    734c:	f06f 0015 	mvn.w	r0, #21
    7350:	e7fb      	b.n	734a <gpio_manage_callback+0x28>
	if (set) {
    7352:	2e00      	cmp	r6, #0
    7354:	d1f3      	bne.n	733e <gpio_manage_callback+0x1c>
	return 0;
    7356:	2000      	movs	r0, #0
    7358:	e7f7      	b.n	734a <gpio_manage_callback+0x28>
	list->tail = node;
    735a:	6065      	str	r5, [r4, #4]
    735c:	2000      	movs	r0, #0
}
    735e:	e7f4      	b.n	734a <gpio_manage_callback+0x28>

00007360 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    7360:	b570      	push	{r4, r5, r6, lr}
    7362:	460e      	mov	r6, r1
    7364:	4615      	mov	r5, r2
	return list->head;
    7366:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7368:	b121      	cbz	r1, 7374 <gpio_fire_callbacks+0x14>
	return node->next;
    736a:	680c      	ldr	r4, [r1, #0]
    736c:	b13c      	cbz	r4, 737e <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    736e:	b931      	cbnz	r1, 737e <gpio_fire_callbacks+0x1e>
    7370:	460c      	mov	r4, r1
    7372:	e004      	b.n	737e <gpio_fire_callbacks+0x1e>
    7374:	460c      	mov	r4, r1
    7376:	e002      	b.n	737e <gpio_fire_callbacks+0x1e>
    7378:	4623      	mov	r3, r4
    737a:	4621      	mov	r1, r4
    737c:	461c      	mov	r4, r3
    737e:	b171      	cbz	r1, 739e <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    7380:	688a      	ldr	r2, [r1, #8]
    7382:	402a      	ands	r2, r5
    7384:	d002      	beq.n	738c <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    7386:	684b      	ldr	r3, [r1, #4]
    7388:	4630      	mov	r0, r6
    738a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    738c:	2c00      	cmp	r4, #0
    738e:	d0f3      	beq.n	7378 <gpio_fire_callbacks+0x18>
	return node->next;
    7390:	6823      	ldr	r3, [r4, #0]
    7392:	2b00      	cmp	r3, #0
    7394:	d0f1      	beq.n	737a <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7396:	2c00      	cmp	r4, #0
    7398:	d1ef      	bne.n	737a <gpio_fire_callbacks+0x1a>
    739a:	4623      	mov	r3, r4
    739c:	e7ed      	b.n	737a <gpio_fire_callbacks+0x1a>
		}
	}
}
    739e:	bd70      	pop	{r4, r5, r6, pc}

000073a0 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    73a0:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    73a4:	0580      	lsls	r0, r0, #22
    73a6:	0d80      	lsrs	r0, r0, #22
    73a8:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    73ac:	d033      	beq.n	7416 <get_drive+0x76>
    73ae:	d816      	bhi.n	73de <get_drive+0x3e>
    73b0:	2806      	cmp	r0, #6
    73b2:	d02c      	beq.n	740e <get_drive+0x6e>
    73b4:	d906      	bls.n	73c4 <get_drive+0x24>
    73b6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    73ba:	d10d      	bne.n	73d8 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    73bc:	2301      	movs	r3, #1
    73be:	700b      	strb	r3, [r1, #0]
	return 0;
    73c0:	2000      	movs	r0, #0
		break;
    73c2:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    73c4:	b300      	cbz	r0, 7408 <get_drive+0x68>
    73c6:	2802      	cmp	r0, #2
    73c8:	d103      	bne.n	73d2 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    73ca:	2304      	movs	r3, #4
    73cc:	700b      	strb	r3, [r1, #0]
	return 0;
    73ce:	2000      	movs	r0, #0
		break;
    73d0:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    73d2:	f06f 0015 	mvn.w	r0, #21
    73d6:	4770      	bx	lr
    73d8:	f06f 0015 	mvn.w	r0, #21
    73dc:	4770      	bx	lr
    73de:	f240 2302 	movw	r3, #514	; 0x202
    73e2:	4298      	cmp	r0, r3
    73e4:	d01b      	beq.n	741e <get_drive+0x7e>
    73e6:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    73ea:	d103      	bne.n	73f4 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    73ec:	2303      	movs	r3, #3
    73ee:	700b      	strb	r3, [r1, #0]
	return 0;
    73f0:	2000      	movs	r0, #0
		break;
    73f2:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    73f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    73f8:	d103      	bne.n	7402 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    73fa:	2302      	movs	r3, #2
    73fc:	700b      	strb	r3, [r1, #0]
	return 0;
    73fe:	2000      	movs	r0, #0
		break;
    7400:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    7402:	f06f 0015 	mvn.w	r0, #21
    7406:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    7408:	2000      	movs	r0, #0
    740a:	7008      	strb	r0, [r1, #0]
		break;
    740c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    740e:	2306      	movs	r3, #6
    7410:	700b      	strb	r3, [r1, #0]
	return 0;
    7412:	2000      	movs	r0, #0
		break;
    7414:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    7416:	2307      	movs	r3, #7
    7418:	700b      	strb	r3, [r1, #0]
	return 0;
    741a:	2000      	movs	r0, #0
		break;
    741c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    741e:	2305      	movs	r3, #5
    7420:	700b      	strb	r3, [r1, #0]
	return 0;
    7422:	2000      	movs	r0, #0
}
    7424:	4770      	bx	lr

00007426 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    7426:	f010 0f10 	tst.w	r0, #16
    742a:	d104      	bne.n	7436 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    742c:	f010 0f20 	tst.w	r0, #32
    7430:	d103      	bne.n	743a <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    7432:	2000      	movs	r0, #0
    7434:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    7436:	2003      	movs	r0, #3
    7438:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    743a:	2001      	movs	r0, #1
}
    743c:	4770      	bx	lr

0000743e <gpio_nrfx_port_get_raw>:
	return port->config;
    743e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7440:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7442:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    7446:	600b      	str	r3, [r1, #0]
}
    7448:	2000      	movs	r0, #0
    744a:	4770      	bx	lr

0000744c <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    744c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    744e:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    7450:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    7454:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    7458:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    745c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    7460:	2000      	movs	r0, #0
    7462:	4770      	bx	lr

00007464 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    7464:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7466:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    7468:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    746c:	2000      	movs	r0, #0
    746e:	4770      	bx	lr

00007470 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    7470:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7472:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    7474:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    7478:	2000      	movs	r0, #0
    747a:	4770      	bx	lr

0000747c <gpio_nrfx_port_toggle_bits>:
	return port->config;
    747c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    747e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    7480:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    7484:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    7488:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    748a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    748e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    7492:	2000      	movs	r0, #0
    7494:	4770      	bx	lr

00007496 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    7496:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    749a:	d007      	beq.n	74ac <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    749c:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    74a0:	d00d      	beq.n	74be <get_trigger+0x28>
    74a2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    74a6:	d008      	beq.n	74ba <get_trigger+0x24>
    74a8:	2001      	movs	r0, #1
}
    74aa:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    74ac:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    74b0:	d001      	beq.n	74b6 <get_trigger+0x20>
    74b2:	2005      	movs	r0, #5
    74b4:	4770      	bx	lr
    74b6:	2004      	movs	r0, #4
    74b8:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    74ba:	2002      	movs	r0, #2
    74bc:	4770      	bx	lr
    74be:	2003      	movs	r0, #3
    74c0:	4770      	bx	lr

000074c2 <gpio_nrfx_manage_callback>:
{
    74c2:	b508      	push	{r3, lr}
	return port->data;
    74c4:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    74c6:	3004      	adds	r0, #4
    74c8:	f7ff ff2b 	bl	7322 <gpio_manage_callback>
}
    74cc:	bd08      	pop	{r3, pc}

000074ce <nrfx_gpio_handler>:
{
    74ce:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    74d0:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    74d4:	0940      	lsrs	r0, r0, #5
    74d6:	f7fb fb2f 	bl	2b38 <get_dev>
	if (port == NULL) {
    74da:	b130      	cbz	r0, 74ea <nrfx_gpio_handler+0x1c>
    74dc:	4601      	mov	r1, r0
	return port->data;
    74de:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    74e0:	2201      	movs	r2, #1
    74e2:	40a2      	lsls	r2, r4
    74e4:	3004      	adds	r0, #4
    74e6:	f7ff ff3b 	bl	7360 <gpio_fire_callbacks>
}
    74ea:	bd10      	pop	{r4, pc}

000074ec <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    74ec:	b500      	push	{lr}
	*state = &config->states[0];
    74ee:	6843      	ldr	r3, [r0, #4]
    74f0:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    74f2:	e001      	b.n	74f8 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    74f4:	3308      	adds	r3, #8
    74f6:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    74f8:	6813      	ldr	r3, [r2, #0]
    74fa:	f890 c008 	ldrb.w	ip, [r0, #8]
    74fe:	f8d0 e004 	ldr.w	lr, [r0, #4]
    7502:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
    7506:	4563      	cmp	r3, ip
    7508:	d205      	bcs.n	7516 <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
    750a:	f893 c005 	ldrb.w	ip, [r3, #5]
    750e:	458c      	cmp	ip, r1
    7510:	d1f0      	bne.n	74f4 <pinctrl_lookup_state+0x8>
			return 0;
    7512:	2000      	movs	r0, #0
    7514:	e001      	b.n	751a <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
    7516:	f06f 0001 	mvn.w	r0, #1
}
    751a:	f85d fb04 	ldr.w	pc, [sp], #4

0000751e <pwm_period_check_and_set>:
{
    751e:	b410      	push	{r4}
	const struct pwm_nrfx_config *config = dev->config;
    7520:	6844      	ldr	r4, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    7522:	6900      	ldr	r0, [r0, #16]
	if (period_cycles == data->period_cycles) {
    7524:	6803      	ldr	r3, [r0, #0]
    7526:	4293      	cmp	r3, r2
    7528:	d020      	beq.n	756c <pwm_period_check_and_set+0x4e>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
    752a:	f890 c00c 	ldrb.w	ip, [r0, #12]
    752e:	2301      	movs	r3, #1
    7530:	408b      	lsls	r3, r1
    7532:	ea3c 0c03 	bics.w	ip, ip, r3
    7536:	d11b      	bne.n	7570 <pwm_period_check_and_set+0x52>
	countertop = period_cycles;
    7538:	4611      	mov	r1, r2
	prescaler = 0;
    753a:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    753c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    7540:	d307      	bcc.n	7552 <pwm_period_check_and_set+0x34>
		countertop >>= 1;
    7542:	0849      	lsrs	r1, r1, #1
		++prescaler;
    7544:	3301      	adds	r3, #1
    7546:	b2db      	uxtb	r3, r3
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    7548:	2b07      	cmp	r3, #7
    754a:	d9f7      	bls.n	753c <pwm_period_check_and_set+0x1e>
	return false;
    754c:	2000      	movs	r0, #0
}
    754e:	bc10      	pop	{r4}
    7550:	4770      	bx	lr
			data->period_cycles = period_cycles;
    7552:	6002      	str	r2, [r0, #0]
			data->prescaler     = prescaler;
    7554:	7343      	strb	r3, [r0, #13]
			nrf_pwm_configure(config->pwm.p_registers,
    7556:	6822      	ldr	r2, [r4, #0]
					  config->initial_config.count_mode,
    7558:	7ba0      	ldrb	r0, [r4, #14]
    p_reg->PRESCALER  = base_clock;
    755a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    p_reg->MODE       = mode;
    755e:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    7562:	b289      	uxth	r1, r1
    7564:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
			return true;
    7568:	2001      	movs	r0, #1
    756a:	e7f0      	b.n	754e <pwm_period_check_and_set+0x30>
		return true;
    756c:	2001      	movs	r0, #1
    756e:	e7ee      	b.n	754e <pwm_period_check_and_set+0x30>
		return false;
    7570:	2000      	movs	r0, #0
    7572:	e7ec      	b.n	754e <pwm_period_check_and_set+0x30>

00007574 <channel_psel_get>:
	*psel = nrf_pwm_pin_get(config->pwm.p_registers, (uint8_t)channel);
    7574:	6813      	ldr	r3, [r2, #0]
    return p_reg->PSEL.OUT[channel];
    7576:	b2c0      	uxtb	r0, r0
    7578:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    757c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7580:	6008      	str	r0, [r1, #0]
}
    7582:	43c0      	mvns	r0, r0
    7584:	0fc0      	lsrs	r0, r0, #31
    7586:	4770      	bx	lr

00007588 <pwm_nrfx_set_cycles>:
{
    7588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    758c:	b082      	sub	sp, #8
	const struct pwm_nrfx_config *config = dev->config;
    758e:	6844      	ldr	r4, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    7590:	6906      	ldr	r6, [r0, #16]
	bool inverted = (flags & PWM_POLARITY_INVERTED);
    7592:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
    7596:	2903      	cmp	r1, #3
    7598:	d878      	bhi.n	768c <pwm_nrfx_set_cycles+0x104>
    759a:	460d      	mov	r5, r1
    759c:	461f      	mov	r7, r3
    759e:	f008 0801 	and.w	r8, r8, #1
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    75a2:	7ba3      	ldrb	r3, [r4, #14]
    75a4:	2b01      	cmp	r3, #1
    75a6:	d006      	beq.n	75b6 <pwm_nrfx_set_cycles+0x2e>
	if (pulse_cycles == 0) {
    75a8:	b19f      	cbz	r7, 75d2 <pwm_nrfx_set_cycles+0x4a>
	} else if (pulse_cycles >= period_cycles) {
    75aa:	42ba      	cmp	r2, r7
    75ac:	d806      	bhi.n	75bc <pwm_nrfx_set_cycles+0x34>
	bool needs_pwm = false;
    75ae:	2100      	movs	r1, #0
		compare_value = PWM_NRFX_CH_COMPARE_MASK;
    75b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
    75b4:	e00f      	b.n	75d6 <pwm_nrfx_set_cycles+0x4e>
		period_cycles /= 2;
    75b6:	0852      	lsrs	r2, r2, #1
		pulse_cycles /= 2;
    75b8:	087f      	lsrs	r7, r7, #1
    75ba:	e7f5      	b.n	75a8 <pwm_nrfx_set_cycles+0x20>
		if (!pwm_period_check_and_set(dev, channel, period_cycles)) {
    75bc:	4629      	mov	r1, r5
    75be:	f7ff ffae 	bl	751e <pwm_period_check_and_set>
    75c2:	4601      	mov	r1, r0
    75c4:	2800      	cmp	r0, #0
    75c6:	d064      	beq.n	7692 <pwm_nrfx_set_cycles+0x10a>
		compare_value = (uint16_t)(pulse_cycles >> data->prescaler);
    75c8:	7b72      	ldrb	r2, [r6, #13]
    75ca:	fa27 f202 	lsr.w	r2, r7, r2
    75ce:	b292      	uxth	r2, r2
		needs_pwm = true;
    75d0:	e001      	b.n	75d6 <pwm_nrfx_set_cycles+0x4e>
	bool needs_pwm = false;
    75d2:	2100      	movs	r1, #0
		compare_value = 0;
    75d4:	460a      	mov	r2, r1
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
    75d6:	f1b8 0f00 	cmp.w	r8, #0
    75da:	d021      	beq.n	7620 <pwm_nrfx_set_cycles+0x98>
    75dc:	2300      	movs	r3, #0
    75de:	4313      	orrs	r3, r2
    75e0:	eb06 0245 	add.w	r2, r6, r5, lsl #1
    75e4:	8093      	strh	r3, [r2, #4]
	if (!needs_pwm) {
    75e6:	b1f1      	cbz	r1, 7626 <pwm_nrfx_set_cycles+0x9e>
		data->pwm_needed |= BIT(channel);
    75e8:	7b33      	ldrb	r3, [r6, #12]
    75ea:	2201      	movs	r2, #1
    75ec:	40aa      	lsls	r2, r5
    75ee:	4313      	orrs	r3, r2
    75f0:	7333      	strb	r3, [r6, #12]
	if (data->pwm_needed == 0) {
    75f2:	7b33      	ldrb	r3, [r6, #12]
    75f4:	2b00      	cmp	r3, #0
    75f6:	d041      	beq.n	767c <pwm_nrfx_set_cycles+0xf4>
		if (data->stop_requested) {
    75f8:	7bb3      	ldrb	r3, [r6, #14]
    75fa:	b133      	cbz	r3, 760a <pwm_nrfx_set_cycles+0x82>
			data->stop_requested = false;
    75fc:	2300      	movs	r3, #0
    75fe:	73b3      	strb	r3, [r6, #14]
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    7600:	4620      	mov	r0, r4
    7602:	f7fc fe8d 	bl	4320 <nrfx_pwm_is_stopped>
    7606:	2800      	cmp	r0, #0
    7608:	d0fa      	beq.n	7600 <pwm_nrfx_set_cycles+0x78>
		nrfx_pwm_simple_playback(&config->pwm, &config->seq, 1, 0);
    760a:	2300      	movs	r3, #0
    760c:	2201      	movs	r2, #1
    760e:	f104 0118 	add.w	r1, r4, #24
    7612:	4620      	mov	r0, r4
    7614:	f7fc fe3a 	bl	428c <nrfx_pwm_simple_playback>
	return 0;
    7618:	2000      	movs	r0, #0
}
    761a:	b002      	add	sp, #8
    761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
    7620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    7624:	e7db      	b.n	75de <pwm_nrfx_set_cycles+0x56>
		if (channel_psel_get(channel, &psel, config)) {
    7626:	4622      	mov	r2, r4
    7628:	a901      	add	r1, sp, #4
    762a:	4628      	mov	r0, r5
    762c:	f7ff ffa2 	bl	7574 <channel_psel_get>
    7630:	b198      	cbz	r0, 765a <pwm_nrfx_set_cycles+0xd2>
			uint32_t out_level = (pulse_cycles == 0) ? 0 : 1;
    7632:	1e3a      	subs	r2, r7, #0
    7634:	bf18      	it	ne
    7636:	2201      	movne	r2, #1
			if (inverted) {
    7638:	f1b8 0f00 	cmp.w	r8, #0
    763c:	d002      	beq.n	7644 <pwm_nrfx_set_cycles+0xbc>
				out_level ^= 1;
    763e:	fab7 f287 	clz	r2, r7
    7642:	0952      	lsrs	r2, r2, #5
			nrf_gpio_pin_write(psel, out_level);
    7644:	9b01      	ldr	r3, [sp, #4]
    if (value == 0)
    7646:	b97a      	cbnz	r2, 7668 <pwm_nrfx_set_cycles+0xe0>
    *p_pin = pin_number & 0x1F;
    7648:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    764c:	2201      	movs	r2, #1
    764e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
    7652:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7656:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
		data->pwm_needed &= ~BIT(channel);
    765a:	7b33      	ldrb	r3, [r6, #12]
    765c:	2201      	movs	r2, #1
    765e:	40aa      	lsls	r2, r5
    7660:	ea23 0302 	bic.w	r3, r3, r2
    7664:	7333      	strb	r3, [r6, #12]
    7666:	e7c4      	b.n	75f2 <pwm_nrfx_set_cycles+0x6a>
    *p_pin = pin_number & 0x1F;
    7668:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    766c:	2201      	movs	r2, #1
    766e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    7672:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7676:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    767a:	e7ee      	b.n	765a <pwm_nrfx_set_cycles+0xd2>
		nrfx_pwm_stop(&config->pwm, false);
    767c:	2100      	movs	r1, #0
    767e:	4620      	mov	r0, r4
    7680:	f000 fe38 	bl	82f4 <nrfx_pwm_stop>
		data->stop_requested = true;
    7684:	2301      	movs	r3, #1
    7686:	73b3      	strb	r3, [r6, #14]
	return 0;
    7688:	2000      	movs	r0, #0
    768a:	e7c6      	b.n	761a <pwm_nrfx_set_cycles+0x92>
		return -EINVAL;
    768c:	f06f 0015 	mvn.w	r0, #21
    7690:	e7c3      	b.n	761a <pwm_nrfx_set_cycles+0x92>
			return -EINVAL;
    7692:	f06f 0015 	mvn.w	r0, #21
    7696:	e7c0      	b.n	761a <pwm_nrfx_set_cycles+0x92>

00007698 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    7698:	b510      	push	{r4, lr}
    769a:	b082      	sub	sp, #8
    769c:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    769e:	aa01      	add	r2, sp, #4
    76a0:	f7ff ff24 	bl	74ec <pinctrl_lookup_state>
	if (ret < 0) {
    76a4:	2800      	cmp	r0, #0
    76a6:	db05      	blt.n	76b4 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    76a8:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    76aa:	6822      	ldr	r2, [r4, #0]
    76ac:	7919      	ldrb	r1, [r3, #4]
    76ae:	6818      	ldr	r0, [r3, #0]
    76b0:	f7fb fb4e 	bl	2d50 <pinctrl_configure_pins>
}
    76b4:	b002      	add	sp, #8
    76b6:	bd10      	pop	{r4, pc}

000076b8 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    76b8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    76ba:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    76bc:	f04f 0120 	mov.w	r1, #32
    76c0:	f3ef 8311 	mrs	r3, BASEPRI
    76c4:	f381 8812 	msr	BASEPRI_MAX, r1
    76c8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    76cc:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    76d0:	b131      	cbz	r1, 76e0 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76d2:	2100      	movs	r1, #0
    76d4:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    76d8:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76dc:	2101      	movs	r1, #1
    76de:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    76e0:	f383 8811 	msr	BASEPRI, r3
    76e4:	f3bf 8f6f 	isb	sy
}
    76e8:	4770      	bx	lr

000076ea <uarte_nrfx_isr_int>:
{
    76ea:	b570      	push	{r4, r5, r6, lr}
    76ec:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    76ee:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    76f0:	6835      	ldr	r5, [r6, #0]
    return p_reg->INTENSET & mask;
    76f2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    76f6:	f413 7f80 	tst.w	r3, #256	; 0x100
    76fa:	d003      	beq.n	7704 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    76fc:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    7700:	2b00      	cmp	r3, #0
    7702:	d138      	bne.n	7776 <uarte_nrfx_isr_int+0x8c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7704:	6873      	ldr	r3, [r6, #4]
    7706:	f013 0f10 	tst.w	r3, #16
    770a:	d01a      	beq.n	7742 <uarte_nrfx_isr_int+0x58>
	__asm__ volatile(
    770c:	f04f 0220 	mov.w	r2, #32
    7710:	f3ef 8311 	mrs	r3, BASEPRI
    7714:	f382 8812 	msr	BASEPRI_MAX, r2
    7718:	f3bf 8f6f 	isb	sy
    771c:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    7720:	b112      	cbz	r2, 7728 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7722:	2200      	movs	r2, #0
    7724:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
		struct uarte_nrfx_data *data = dev->data;
    7728:	6922      	ldr	r2, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    772a:	68d2      	ldr	r2, [r2, #12]
    772c:	b10a      	cbz	r2, 7732 <uarte_nrfx_isr_int+0x48>
    772e:	6912      	ldr	r2, [r2, #16]
    7730:	b91a      	cbnz	r2, 773a <uarte_nrfx_isr_int+0x50>
    p_reg->INTENCLR = mask;
    7732:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    7736:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
    773a:	f383 8811 	msr	BASEPRI, r3
    773e:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
    7742:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
    7744:	68da      	ldr	r2, [r3, #12]
    7746:	b1aa      	cbz	r2, 7774 <uarte_nrfx_isr_int+0x8a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7748:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    774c:	b121      	cbz	r1, 7758 <uarte_nrfx_isr_int+0x6e>
		data->int_driven->fifo_fill_lock = 0;
    774e:	2100      	movs	r1, #0
    7750:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    7752:	68da      	ldr	r2, [r3, #12]
    7754:	7b92      	ldrb	r2, [r2, #14]
    7756:	b98a      	cbnz	r2, 777c <uarte_nrfx_isr_int+0x92>
    7758:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    775c:	b122      	cbz	r2, 7768 <uarte_nrfx_isr_int+0x7e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    775e:	2200      	movs	r2, #0
    7760:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
    7764:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
    7768:	68da      	ldr	r2, [r3, #12]
    776a:	6813      	ldr	r3, [r2, #0]
    776c:	b113      	cbz	r3, 7774 <uarte_nrfx_isr_int+0x8a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    776e:	6851      	ldr	r1, [r2, #4]
    7770:	4620      	mov	r0, r4
    7772:	4798      	blx	r3
}
    7774:	bd70      	pop	{r4, r5, r6, pc}
		endtx_isr(dev);
    7776:	f7ff ff9f 	bl	76b8 <endtx_isr>
    777a:	e7c3      	b.n	7704 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
    777c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    7780:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    7784:	68db      	ldr	r3, [r3, #12]
    7786:	7399      	strb	r1, [r3, #14]
			return;
    7788:	e7f4      	b.n	7774 <uarte_nrfx_isr_int+0x8a>

0000778a <uarte_nrfx_configure>:
{
    778a:	b570      	push	{r4, r5, r6, lr}
    778c:	b082      	sub	sp, #8
	struct uarte_nrfx_data *data = dev->data;
    778e:	6905      	ldr	r5, [r0, #16]
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    7790:	794b      	ldrb	r3, [r1, #5]
    7792:	2b01      	cmp	r3, #1
    7794:	d137      	bne.n	7806 <uarte_nrfx_configure+0x7c>
    7796:	4606      	mov	r6, r0
    7798:	460c      	mov	r4, r1
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    779a:	798b      	ldrb	r3, [r1, #6]
    779c:	2b03      	cmp	r3, #3
    779e:	d135      	bne.n	780c <uarte_nrfx_configure+0x82>
	switch (cfg->flow_ctrl) {
    77a0:	79cb      	ldrb	r3, [r1, #7]
    77a2:	b133      	cbz	r3, 77b2 <uarte_nrfx_configure+0x28>
    77a4:	2b01      	cmp	r3, #1
    77a6:	d00e      	beq.n	77c6 <uarte_nrfx_configure+0x3c>
    77a8:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    77ac:	4618      	mov	r0, r3
    77ae:	b002      	add	sp, #8
    77b0:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    77b2:	2300      	movs	r3, #0
    77b4:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    77b8:	7923      	ldrb	r3, [r4, #4]
    77ba:	b143      	cbz	r3, 77ce <uarte_nrfx_configure+0x44>
    77bc:	2b02      	cmp	r3, #2
    77be:	d01e      	beq.n	77fe <uarte_nrfx_configure+0x74>
    77c0:	f06f 0385 	mvn.w	r3, #133	; 0x85
    77c4:	e7f2      	b.n	77ac <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    77c6:	2301      	movs	r3, #1
    77c8:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    77cc:	e7f4      	b.n	77b8 <uarte_nrfx_configure+0x2e>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    77ce:	2300      	movs	r3, #0
    77d0:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    77d4:	6821      	ldr	r1, [r4, #0]
    77d6:	4630      	mov	r0, r6
    77d8:	f7fb fbca 	bl	2f70 <baudrate_set>
    77dc:	4603      	mov	r3, r0
    77de:	b9c0      	cbnz	r0, 7812 <uarte_nrfx_configure+0x88>
	const struct uarte_nrfx_config *config = dev->config;
    77e0:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    77e2:	6811      	ldr	r1, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    77e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
                    | (uint32_t)p_cfg->hwfc;
    77e8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    77ec:	4302      	orrs	r2, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    77ee:	f8c1 256c 	str.w	r2, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    77f2:	3504      	adds	r5, #4
    77f4:	e894 0003 	ldmia.w	r4, {r0, r1}
    77f8:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    77fc:	e7d6      	b.n	77ac <uarte_nrfx_configure+0x22>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    77fe:	230e      	movs	r3, #14
    7800:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    7804:	e7e6      	b.n	77d4 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
    7806:	f06f 0385 	mvn.w	r3, #133	; 0x85
    780a:	e7cf      	b.n	77ac <uarte_nrfx_configure+0x22>
		return -ENOTSUP;
    780c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    7810:	e7cc      	b.n	77ac <uarte_nrfx_configure+0x22>
		return -ENOTSUP;
    7812:	f06f 0385 	mvn.w	r3, #133	; 0x85
    7816:	e7c9      	b.n	77ac <uarte_nrfx_configure+0x22>

00007818 <uarte_nrfx_config_get>:
{
    7818:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    781a:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    781c:	3304      	adds	r3, #4
    781e:	e893 0003 	ldmia.w	r3, {r0, r1}
    7822:	e882 0003 	stmia.w	r2, {r0, r1}
}
    7826:	2000      	movs	r0, #0
    7828:	4770      	bx	lr

0000782a <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    782a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    782c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    782e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7832:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    7836:	4770      	bx	lr

00007838 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    7838:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    783a:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    783c:	685b      	ldr	r3, [r3, #4]
    783e:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7842:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7846:	b929      	cbnz	r1, 7854 <is_tx_ready+0x1c>
    7848:	b933      	cbnz	r3, 7858 <is_tx_ready+0x20>
    784a:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    784e:	b92b      	cbnz	r3, 785c <is_tx_ready+0x24>
    7850:	2000      	movs	r0, #0
    7852:	4770      	bx	lr
    7854:	2001      	movs	r0, #1
    7856:	4770      	bx	lr
    7858:	2000      	movs	r0, #0
    785a:	4770      	bx	lr
    785c:	2001      	movs	r0, #1
}
    785e:	4770      	bx	lr

00007860 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    7860:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7862:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    7864:	2208      	movs	r2, #8
    7866:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    786a:	4770      	bx	lr

0000786c <tx_start>:
{
    786c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    786e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7870:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    7872:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    7876:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    787a:	2200      	movs	r2, #0
    787c:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    7880:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    7884:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    7888:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    788c:	685b      	ldr	r3, [r3, #4]
    788e:	f013 0f10 	tst.w	r3, #16
    7892:	d102      	bne.n	789a <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7894:	2301      	movs	r3, #1
    7896:	60a3      	str	r3, [r4, #8]
}
    7898:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    789a:	2101      	movs	r1, #1
    789c:	f7ff ffe0 	bl	7860 <uarte_enable>
    p_reg->INTENSET = mask;
    78a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    78a4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    78a8:	e7f4      	b.n	7894 <tx_start+0x28>

000078aa <uarte_nrfx_poll_in>:
{
    78aa:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    78ac:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    78ae:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    78b0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    78b2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    78b6:	b15a      	cbz	r2, 78d0 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    78b8:	69a2      	ldr	r2, [r4, #24]
    78ba:	7812      	ldrb	r2, [r2, #0]
    78bc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    78be:	2000      	movs	r0, #0
    78c0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    78c4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    78c8:	2201      	movs	r2, #1
    78ca:	601a      	str	r2, [r3, #0]
}
    78cc:	bc10      	pop	{r4}
    78ce:	4770      	bx	lr
		return -1;
    78d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    78d4:	e7fa      	b.n	78cc <uarte_nrfx_poll_in+0x22>

000078d6 <uarte_nrfx_fifo_read>:
	const struct uarte_nrfx_config *config = dev->config;
    78d6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    78d8:	681b      	ldr	r3, [r3, #0]
	const struct uarte_nrfx_data *data = dev->data;
    78da:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    78dc:	2a00      	cmp	r2, #0
    78de:	dd0d      	ble.n	78fc <uarte_nrfx_fifo_read+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    78e0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    78e4:	b162      	cbz	r2, 7900 <uarte_nrfx_fifo_read+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    78e6:	2200      	movs	r2, #0
    78e8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    78ec:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = *data->rx_data;
    78f0:	6982      	ldr	r2, [r0, #24]
    78f2:	7812      	ldrb	r2, [r2, #0]
    78f4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    78f6:	2001      	movs	r0, #1
    78f8:	6018      	str	r0, [r3, #0]
}
    78fa:	4770      	bx	lr
	int num_rx = 0;
    78fc:	2000      	movs	r0, #0
    78fe:	4770      	bx	lr
    7900:	2000      	movs	r0, #0
}
    7902:	4770      	bx	lr

00007904 <uarte_nrfx_irq_tx_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    7904:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7906:	681a      	ldr	r2, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    7908:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
    790a:	f04f 0020 	mov.w	r0, #32
    790e:	f3ef 8311 	mrs	r3, BASEPRI
    7912:	f380 8812 	msr	BASEPRI_MAX, r0
    7916:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    791a:	68c9      	ldr	r1, [r1, #12]
    791c:	2000      	movs	r0, #0
    791e:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    7920:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7924:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    7928:	f383 8811 	msr	BASEPRI, r3
    792c:	f3bf 8f6f 	isb	sy
}
    7930:	4770      	bx	lr

00007932 <uarte_nrfx_irq_tx_disable>:
	struct uarte_nrfx_data *data = dev->data;
    7932:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
    7934:	68db      	ldr	r3, [r3, #12]
    7936:	2201      	movs	r2, #1
    7938:	739a      	strb	r2, [r3, #14]
}
    793a:	4770      	bx	lr

0000793c <uarte_nrfx_irq_tx_ready_complete>:
	const struct uarte_nrfx_config *config = dev->config;
    793c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    793e:	6819      	ldr	r1, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    7940:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
    7942:	68db      	ldr	r3, [r3, #12]
    7944:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    7946:	b95a      	cbnz	r2, 7960 <uarte_nrfx_irq_tx_ready_complete+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7948:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    794c:	b152      	cbz	r2, 7964 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    794e:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    7952:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    7956:	d007      	beq.n	7968 <uarte_nrfx_irq_tx_ready_complete+0x2c>
		data->int_driven->fifo_fill_lock = 0;
    7958:	2200      	movs	r2, #0
    795a:	611a      	str	r2, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    795c:	2001      	movs	r0, #1
    795e:	4770      	bx	lr
    7960:	2000      	movs	r0, #0
    7962:	4770      	bx	lr
    7964:	2000      	movs	r0, #0
    7966:	4770      	bx	lr
    7968:	2000      	movs	r0, #0
}
    796a:	4770      	bx	lr

0000796c <uarte_nrfx_irq_rx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    796c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    796e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7970:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    7974:	3800      	subs	r0, #0
    7976:	bf18      	it	ne
    7978:	2001      	movne	r0, #1
    797a:	4770      	bx	lr

0000797c <uarte_nrfx_irq_rx_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    797c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    797e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    7980:	2210      	movs	r2, #16
    7982:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7986:	4770      	bx	lr

00007988 <uarte_nrfx_irq_rx_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    7988:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    798a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    798c:	2210      	movs	r2, #16
    798e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    7992:	4770      	bx	lr

00007994 <uarte_nrfx_irq_err_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    7994:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7996:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    7998:	f44f 7200 	mov.w	r2, #512	; 0x200
    799c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    79a0:	4770      	bx	lr

000079a2 <uarte_nrfx_irq_err_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    79a2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    79a4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    79a6:	f44f 7200 	mov.w	r2, #512	; 0x200
    79aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    79ae:	4770      	bx	lr

000079b0 <uarte_nrfx_irq_is_pending>:
{
    79b0:	b538      	push	{r3, r4, r5, lr}
    79b2:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    79b4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    79b6:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    79b8:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    79bc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    79c0:	d106      	bne.n	79d0 <uarte_nrfx_irq_is_pending+0x20>
    79c2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    79c6:	f013 0f10 	tst.w	r3, #16
    79ca:	d107      	bne.n	79dc <uarte_nrfx_irq_is_pending+0x2c>
    79cc:	2000      	movs	r0, #0
}
    79ce:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    79d0:	f7ff ffb4 	bl	793c <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    79d4:	2800      	cmp	r0, #0
    79d6:	d0f4      	beq.n	79c2 <uarte_nrfx_irq_is_pending+0x12>
		||
    79d8:	2001      	movs	r0, #1
    79da:	e7f8      	b.n	79ce <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
    79dc:	4620      	mov	r0, r4
    79de:	f7ff ffc5 	bl	796c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    79e2:	2800      	cmp	r0, #0
    79e4:	d0f3      	beq.n	79ce <uarte_nrfx_irq_is_pending+0x1e>
		||
    79e6:	2001      	movs	r0, #1
    79e8:	e7f1      	b.n	79ce <uarte_nrfx_irq_is_pending+0x1e>

000079ea <uarte_nrfx_irq_update>:
}
    79ea:	2001      	movs	r0, #1
    79ec:	4770      	bx	lr

000079ee <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    79ee:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    79f0:	68d8      	ldr	r0, [r3, #12]
    79f2:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    79f4:	68db      	ldr	r3, [r3, #12]
    79f6:	605a      	str	r2, [r3, #4]
}
    79f8:	4770      	bx	lr

000079fa <uarte_nrfx_fifo_fill>:
{
    79fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79fc:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
    79fe:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    7a00:	68fb      	ldr	r3, [r7, #12]
    7a02:	899c      	ldrh	r4, [r3, #12]
    7a04:	4294      	cmp	r4, r2
    7a06:	bfa8      	it	ge
    7a08:	4614      	movge	r4, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    7a0a:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7a0c:	2201      	movs	r2, #1
    7a0e:	f3bf 8f5b 	dmb	ish
    7a12:	e853 0f00 	ldrex	r0, [r3]
    7a16:	2800      	cmp	r0, #0
    7a18:	d103      	bne.n	7a22 <uarte_nrfx_fifo_fill+0x28>
    7a1a:	e843 2500 	strex	r5, r2, [r3]
    7a1e:	2d00      	cmp	r5, #0
    7a20:	d1f7      	bne.n	7a12 <uarte_nrfx_fifo_fill+0x18>
    7a22:	f3bf 8f5b 	dmb	ish
    7a26:	d120      	bne.n	7a6a <uarte_nrfx_fifo_fill+0x70>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
    7a28:	68fb      	ldr	r3, [r7, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7a2a:	4622      	mov	r2, r4
    7a2c:	6898      	ldr	r0, [r3, #8]
    7a2e:	f001 f860 	bl	8af2 <memcpy>
	__asm__ volatile(
    7a32:	f04f 0320 	mov.w	r3, #32
    7a36:	f3ef 8511 	mrs	r5, BASEPRI
    7a3a:	f383 8812 	msr	BASEPRI_MAX, r3
    7a3e:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    7a42:	4630      	mov	r0, r6
    7a44:	f7ff fef8 	bl	7838 <is_tx_ready>
    7a48:	b940      	cbnz	r0, 7a5c <uarte_nrfx_fifo_fill+0x62>
		data->int_driven->fifo_fill_lock = 0;
    7a4a:	68fb      	ldr	r3, [r7, #12]
    7a4c:	2400      	movs	r4, #0
    7a4e:	611c      	str	r4, [r3, #16]
	__asm__ volatile(
    7a50:	f385 8811 	msr	BASEPRI, r5
    7a54:	f3bf 8f6f 	isb	sy
}
    7a58:	4620      	mov	r0, r4
    7a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    7a5c:	68fb      	ldr	r3, [r7, #12]
    7a5e:	4622      	mov	r2, r4
    7a60:	6899      	ldr	r1, [r3, #8]
    7a62:	4630      	mov	r0, r6
    7a64:	f7ff ff02 	bl	786c <tx_start>
    7a68:	e7f2      	b.n	7a50 <uarte_nrfx_fifo_fill+0x56>
		return 0;
    7a6a:	2400      	movs	r4, #0
    7a6c:	e7f4      	b.n	7a58 <uarte_nrfx_fifo_fill+0x5e>

00007a6e <k_msleep>:
{
    7a6e:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    7a70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    7a74:	17c1      	asrs	r1, r0, #31
    7a76:	03c9      	lsls	r1, r1, #15
    7a78:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    7a7c:	03c0      	lsls	r0, r0, #15
    7a7e:	f240 33e7 	movw	r3, #999	; 0x3e7
    7a82:	18c0      	adds	r0, r0, r3
    7a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7a88:	f04f 0300 	mov.w	r3, #0
    7a8c:	f141 0100 	adc.w	r1, r1, #0
    7a90:	f7f8 fb76 	bl	180 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    7a94:	f7fd fb6e 	bl	5174 <z_impl_k_sleep>
}
    7a98:	bd08      	pop	{r3, pc}

00007a9a <wait_tx_ready>:
{
    7a9a:	b570      	push	{r4, r5, r6, lr}
    7a9c:	4606      	mov	r6, r0
    7a9e:	e013      	b.n	7ac8 <wait_tx_ready+0x2e>
		if (res) {
    7aa0:	b17d      	cbz	r5, 7ac2 <wait_tx_ready+0x28>
	__asm__ volatile(
    7aa2:	f04f 0320 	mov.w	r3, #32
    7aa6:	f3ef 8411 	mrs	r4, BASEPRI
    7aaa:	f383 8812 	msr	BASEPRI_MAX, r3
    7aae:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    7ab2:	4630      	mov	r0, r6
    7ab4:	f7ff fec0 	bl	7838 <is_tx_ready>
    7ab8:	b998      	cbnz	r0, 7ae2 <wait_tx_ready+0x48>
	__asm__ volatile(
    7aba:	f384 8811 	msr	BASEPRI, r4
    7abe:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    7ac2:	2001      	movs	r0, #1
    7ac4:	f7ff ffd3 	bl	7a6e <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    7ac8:	2464      	movs	r4, #100	; 0x64
    7aca:	4630      	mov	r0, r6
    7acc:	f7ff feb4 	bl	7838 <is_tx_ready>
    7ad0:	4605      	mov	r5, r0
    7ad2:	2800      	cmp	r0, #0
    7ad4:	d1e4      	bne.n	7aa0 <wait_tx_ready+0x6>
    7ad6:	2001      	movs	r0, #1
    7ad8:	f000 f9ce 	bl	7e78 <nrfx_busy_wait>
    7adc:	3c01      	subs	r4, #1
    7ade:	d1f4      	bne.n	7aca <wait_tx_ready+0x30>
    7ae0:	e7de      	b.n	7aa0 <wait_tx_ready+0x6>
}
    7ae2:	4620      	mov	r0, r4
    7ae4:	bd70      	pop	{r4, r5, r6, pc}

00007ae6 <pinctrl_apply_state>:
{
    7ae6:	b510      	push	{r4, lr}
    7ae8:	b082      	sub	sp, #8
    7aea:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    7aec:	aa01      	add	r2, sp, #4
    7aee:	f7ff fcfd 	bl	74ec <pinctrl_lookup_state>
	if (ret < 0) {
    7af2:	2800      	cmp	r0, #0
    7af4:	db05      	blt.n	7b02 <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
    7af6:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    7af8:	6822      	ldr	r2, [r4, #0]
    7afa:	7919      	ldrb	r1, [r3, #4]
    7afc:	6818      	ldr	r0, [r3, #0]
    7afe:	f7fb f927 	bl	2d50 <pinctrl_configure_pins>
}
    7b02:	b002      	add	sp, #8
    7b04:	bd10      	pop	{r4, pc}

00007b06 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    7b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b0a:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    7b0c:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    7b0e:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    7b10:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7b14:	2100      	movs	r1, #0
    7b16:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    7b1a:	f8c8 0000 	str.w	r0, [r8]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    7b1e:	68f8      	ldr	r0, [r7, #12]
    7b20:	f7ff ffe1 	bl	7ae6 <pinctrl_apply_state>
	if (err < 0) {
    7b24:	1e05      	subs	r5, r0, #0
    7b26:	db35      	blt.n	7b94 <uarte_instance_init+0x8e>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
    7b28:	f108 0104 	add.w	r1, r8, #4
    7b2c:	4620      	mov	r0, r4
    7b2e:	f7ff fe2c 	bl	778a <uarte_nrfx_configure>
	if (err) {
    7b32:	4605      	mov	r5, r0
    7b34:	bb70      	cbnz	r0, 7b94 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    7b36:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    7b38:	f013 0f02 	tst.w	r3, #2
    7b3c:	d12d      	bne.n	7b9a <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    7b3e:	2308      	movs	r3, #8
    7b40:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    7b44:	7a3b      	ldrb	r3, [r7, #8]
    7b46:	b95b      	cbnz	r3, 7b60 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7b48:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    7b4c:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    7b50:	f8d8 3018 	ldr.w	r3, [r8, #24]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7b54:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    7b58:	2301      	movs	r3, #1
    7b5a:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7b5e:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    7b60:	687b      	ldr	r3, [r7, #4]
    7b62:	f013 0f02 	tst.w	r3, #2
    7b66:	d103      	bne.n	7b70 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
    7b68:	f44f 7380 	mov.w	r3, #256	; 0x100
    7b6c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7b70:	687b      	ldr	r3, [r7, #4]
    7b72:	f013 0f10 	tst.w	r3, #16
    7b76:	d003      	beq.n	7b80 <uarte_instance_init+0x7a>
    7b78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    7b7c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    7b80:	f8d8 3014 	ldr.w	r3, [r8, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    7b84:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    7b88:	2300      	movs	r3, #0
    7b8a:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7b8e:	2301      	movs	r3, #1
    7b90:	60b3      	str	r3, [r6, #8]
    7b92:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    7b94:	4628      	mov	r0, r5
    7b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    7b9a:	4641      	mov	r1, r8
    7b9c:	4630      	mov	r0, r6
    7b9e:	f7fb fabd 	bl	311c <endtx_stoptx_ppi_init>
		if (err < 0) {
    7ba2:	2800      	cmp	r0, #0
    7ba4:	dacb      	bge.n	7b3e <uarte_instance_init+0x38>
			return err;
    7ba6:	4605      	mov	r5, r0
    7ba8:	e7f4      	b.n	7b94 <uarte_instance_init+0x8e>

00007baa <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    7baa:	b510      	push	{r4, lr}
    7bac:	4604      	mov	r4, r0
    7bae:	2200      	movs	r2, #0
    7bb0:	2101      	movs	r1, #1
    7bb2:	2002      	movs	r0, #2
    7bb4:	f7ff f870 	bl	6c98 <z_arm_irq_priority_set>
    7bb8:	2002      	movs	r0, #2
    7bba:	f7ff f868 	bl	6c8e <arch_irq_enable>
    7bbe:	2101      	movs	r1, #1
    7bc0:	4620      	mov	r0, r4
    7bc2:	f7ff ffa0 	bl	7b06 <uarte_instance_init>
    7bc6:	bd10      	pop	{r4, pc}

00007bc8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7bc8:	4770      	bx	lr

00007bca <counter_sub>:
	return (a - b) & COUNTER_MAX;
    7bca:	1a40      	subs	r0, r0, r1
}
    7bcc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7bd0:	4770      	bx	lr

00007bd2 <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7bd2:	f100 0350 	add.w	r3, r0, #80	; 0x50
    7bd6:	009b      	lsls	r3, r3, #2
    7bd8:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7bda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7bde:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    7be2:	6818      	ldr	r0, [r3, #0]
}
    7be4:	3800      	subs	r0, #0
    7be6:	bf18      	it	ne
    7be8:	2001      	movne	r0, #1
    7bea:	4770      	bx	lr

00007bec <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7bec:	f100 0350 	add.w	r3, r0, #80	; 0x50
    7bf0:	009b      	lsls	r3, r3, #2
    7bf2:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7bf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7bf8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    7bfc:	2200      	movs	r2, #0
    7bfe:	601a      	str	r2, [r3, #0]
    7c00:	681b      	ldr	r3, [r3, #0]
}
    7c02:	4770      	bx	lr

00007c04 <absolute_time_to_cc>:
}
    7c04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7c08:	4770      	bx	lr

00007c0a <full_int_lock>:
	__asm__ volatile(
    7c0a:	f04f 0320 	mov.w	r3, #32
    7c0e:	f3ef 8011 	mrs	r0, BASEPRI
    7c12:	f383 8812 	msr	BASEPRI_MAX, r3
    7c16:	f3bf 8f6f 	isb	sy
}
    7c1a:	4770      	bx	lr

00007c1c <full_int_unlock>:
	__asm__ volatile(
    7c1c:	f380 8811 	msr	BASEPRI, r0
    7c20:	f3bf 8f6f 	isb	sy
}
    7c24:	4770      	bx	lr

00007c26 <compare_set>:
{
    7c26:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c28:	b083      	sub	sp, #12
    7c2a:	4604      	mov	r4, r0
    7c2c:	4617      	mov	r7, r2
    7c2e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    7c30:	f7fb fafe 	bl	3230 <compare_int_lock>
    7c34:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    7c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c38:	9301      	str	r3, [sp, #4]
    7c3a:	9b08      	ldr	r3, [sp, #32]
    7c3c:	9300      	str	r3, [sp, #0]
    7c3e:	463a      	mov	r2, r7
    7c40:	462b      	mov	r3, r5
    7c42:	4620      	mov	r0, r4
    7c44:	f7fb fbc2 	bl	33cc <compare_set_nolocks>
    7c48:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    7c4a:	4631      	mov	r1, r6
    7c4c:	4620      	mov	r0, r4
    7c4e:	f7fb fb45 	bl	32dc <compare_int_unlock>
}
    7c52:	4628      	mov	r0, r5
    7c54:	b003      	add	sp, #12
    7c56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007c58 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7c58:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    7c5a:	2000      	movs	r0, #0
    7c5c:	f7ff f8d6 	bl	6e0c <sys_arch_reboot>

00007c60 <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    7c60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7c64:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7c6c:	d003      	beq.n	7c76 <nrf52_errata_12+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7c6e:	2b06      	cmp	r3, #6
    7c70:	d006      	beq.n	7c80 <nrf52_errata_12+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7c72:	2000      	movs	r0, #0
    7c74:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    7c76:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    7c7a:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    7c7e:	e7f6      	b.n	7c6e <nrf52_errata_12+0xe>
                        return true;
    7c80:	2001      	movs	r0, #1
    #endif
}
    7c82:	4770      	bx	lr

00007c84 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    7c84:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    7c88:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    7c8c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    7c90:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7c94:	2a06      	cmp	r2, #6
    7c96:	d001      	beq.n	7c9c <nrf52_errata_16+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    7c98:	2000      	movs	r0, #0
    7c9a:	4770      	bx	lr
                switch(var2)
    7c9c:	3b03      	subs	r3, #3
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	d804      	bhi.n	7cac <nrf52_errata_16+0x28>
    7ca2:	e8df f003 	tbb	[pc, r3]
    7ca6:	01          	.byte	0x01
    7ca7:	00          	.byte	0x00
    7ca8:	2001      	movs	r0, #1
    7caa:	4770      	bx	lr
                        return false;
    7cac:	2000      	movs	r0, #0
    #endif
}
    7cae:	4770      	bx	lr

00007cb0 <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    7cb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7cb4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7cbc:	d003      	beq.n	7cc6 <nrf52_errata_31+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7cbe:	2b06      	cmp	r3, #6
    7cc0:	d006      	beq.n	7cd0 <nrf52_errata_31+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7cc2:	2000      	movs	r0, #0
    7cc4:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    7cc6:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    7cca:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    7cce:	e7f6      	b.n	7cbe <nrf52_errata_31+0xe>
                        return true;
    7cd0:	2001      	movs	r0, #1
    #endif
}
    7cd2:	4770      	bx	lr

00007cd4 <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    7cd4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    7cd8:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    7cdc:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    7ce0:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7ce4:	2a06      	cmp	r2, #6
    7ce6:	d001      	beq.n	7cec <nrf52_errata_32+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    7ce8:	2000      	movs	r0, #0
    7cea:	4770      	bx	lr
                switch(var2)
    7cec:	3b03      	subs	r3, #3
    7cee:	2b00      	cmp	r3, #0
    7cf0:	d804      	bhi.n	7cfc <nrf52_errata_32+0x28>
    7cf2:	e8df f003 	tbb	[pc, r3]
    7cf6:	01          	.byte	0x01
    7cf7:	00          	.byte	0x00
    7cf8:	2001      	movs	r0, #1
    7cfa:	4770      	bx	lr
                        return false;
    7cfc:	2000      	movs	r0, #0
    #endif
}
    7cfe:	4770      	bx	lr

00007d00 <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    7d00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7d04:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7d0c:	d003      	beq.n	7d16 <nrf52_errata_36+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7d0e:	2b06      	cmp	r3, #6
    7d10:	d006      	beq.n	7d20 <nrf52_errata_36+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7d12:	2000      	movs	r0, #0
    7d14:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    7d16:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    7d1a:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    7d1e:	e7f6      	b.n	7d0e <nrf52_errata_36+0xe>
                        return true;
    7d20:	2001      	movs	r0, #1
    #endif
}
    7d22:	4770      	bx	lr

00007d24 <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    7d24:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    7d28:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    7d2c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    7d30:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7d34:	2a06      	cmp	r2, #6
    7d36:	d001      	beq.n	7d3c <nrf52_errata_37+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    7d38:	2000      	movs	r0, #0
    7d3a:	4770      	bx	lr
                switch(var2)
    7d3c:	3b03      	subs	r3, #3
    7d3e:	2b00      	cmp	r3, #0
    7d40:	d804      	bhi.n	7d4c <nrf52_errata_37+0x28>
    7d42:	e8df f003 	tbb	[pc, r3]
    7d46:	01          	.byte	0x01
    7d47:	00          	.byte	0x00
    7d48:	2001      	movs	r0, #1
    7d4a:	4770      	bx	lr
                        return false;
    7d4c:	2000      	movs	r0, #0
    #endif
}
    7d4e:	4770      	bx	lr

00007d50 <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    7d50:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    7d54:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    7d58:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    7d5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7d60:	2a06      	cmp	r2, #6
    7d62:	d001      	beq.n	7d68 <nrf52_errata_57+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    7d64:	2000      	movs	r0, #0
    7d66:	4770      	bx	lr
                switch(var2)
    7d68:	3b03      	subs	r3, #3
    7d6a:	2b00      	cmp	r3, #0
    7d6c:	d804      	bhi.n	7d78 <nrf52_errata_57+0x28>
    7d6e:	e8df f003 	tbb	[pc, r3]
    7d72:	01          	.byte	0x01
    7d73:	00          	.byte	0x00
    7d74:	2001      	movs	r0, #1
    7d76:	4770      	bx	lr
                        return false;
    7d78:	2000      	movs	r0, #0
    #endif
}
    7d7a:	4770      	bx	lr

00007d7c <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    7d7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7d80:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7d88:	d007      	beq.n	7d9a <nrf52_errata_66+0x1e>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    7d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7d8e:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7d92:	2b06      	cmp	r3, #6
    7d94:	d00a      	beq.n	7dac <nrf52_errata_66+0x30>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7d96:	2000      	movs	r0, #0
    7d98:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    7d9a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
    7d9e:	f892 3fe0 	ldrb.w	r3, [r2, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    7da2:	f8d2 2fe8 	ldr.w	r2, [r2, #4072]	; 0xfe8
    7da6:	f3c2 1203 	ubfx	r2, r2, #4, #4
    7daa:	e7f2      	b.n	7d92 <nrf52_errata_66+0x16>
                switch(var2)
    7dac:	3a03      	subs	r2, #3
    7dae:	2a01      	cmp	r2, #1
    7db0:	d804      	bhi.n	7dbc <nrf52_errata_66+0x40>
    7db2:	e8df f002 	tbb	[pc, r2]
    7db6:	0101      	.short	0x0101
    7db8:	2000      	movs	r0, #0
    7dba:	4770      	bx	lr
                        return true;
    7dbc:	2001      	movs	r0, #1
    #endif
}
    7dbe:	4770      	bx	lr

00007dc0 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    7dc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7dc4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7dcc:	d003      	beq.n	7dd6 <nrf52_errata_108+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7dce:	2b06      	cmp	r3, #6
    7dd0:	d006      	beq.n	7de0 <nrf52_errata_108+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7dd2:	2000      	movs	r0, #0
    7dd4:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    7dd6:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    7dda:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    7dde:	e7f6      	b.n	7dce <nrf52_errata_108+0xe>
                        return true;
    7de0:	2001      	movs	r0, #1
    #endif
}
    7de2:	4770      	bx	lr

00007de4 <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    7de4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7de8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7df0:	d003      	beq.n	7dfa <nrf52_errata_136+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7df2:	2b06      	cmp	r3, #6
    7df4:	d006      	beq.n	7e04 <nrf52_errata_136+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7df6:	2000      	movs	r0, #0
    7df8:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    7dfa:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    7dfe:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    7e02:	e7f6      	b.n	7df2 <nrf52_errata_136+0xe>
                        return true;
    7e04:	2001      	movs	r0, #1
    #endif
}
    7e06:	4770      	bx	lr

00007e08 <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7e08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7e0c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7e10:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7e14:	2a06      	cmp	r2, #6
    7e16:	d001      	beq.n	7e1c <nrf52_errata_182+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7e18:	2000      	movs	r0, #0
    7e1a:	4770      	bx	lr
                switch(var2)
    7e1c:	2b05      	cmp	r3, #5
    7e1e:	d803      	bhi.n	7e28 <nrf52_errata_182+0x20>
    7e20:	2b03      	cmp	r3, #3
    7e22:	d303      	bcc.n	7e2c <nrf52_errata_182+0x24>
    7e24:	2000      	movs	r0, #0
    7e26:	4770      	bx	lr
                        return true;
    7e28:	2001      	movs	r0, #1
    7e2a:	4770      	bx	lr
                        return true;
    7e2c:	2001      	movs	r0, #1
    #endif
}
    7e2e:	4770      	bx	lr

00007e30 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7e30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7e34:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7e38:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7e3c:	2a06      	cmp	r2, #6
    7e3e:	d001      	beq.n	7e44 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7e40:	2000      	movs	r0, #0
    7e42:	4770      	bx	lr
                switch(var2)
    7e44:	2b06      	cmp	r3, #6
    7e46:	d803      	bhi.n	7e50 <nrf52_configuration_249+0x20>
    7e48:	2b03      	cmp	r3, #3
    7e4a:	d303      	bcc.n	7e54 <nrf52_configuration_249+0x24>
    7e4c:	2000      	movs	r0, #0
    7e4e:	4770      	bx	lr
                        return true;
    7e50:	2001      	movs	r0, #1
    7e52:	4770      	bx	lr
                        return true;
    7e54:	2001      	movs	r0, #1
    #endif
}
    7e56:	4770      	bx	lr

00007e58 <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
    7e58:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    7e5a:	f7ff ffe9 	bl	7e30 <nrf52_configuration_249>
    7e5e:	b138      	cbz	r0, 7e70 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    7e60:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7e64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    7e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7e6c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
    7e70:	bd08      	pop	{r3, pc}

00007e72 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    7e72:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    7e74:	4780      	blx	r0
}
    7e76:	bd08      	pop	{r3, pc}

00007e78 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    7e78:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    7e7a:	f000 fd46 	bl	890a <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    7e7e:	bd08      	pop	{r3, pc}

00007e80 <nrf_clock_is_running>:
    switch (domain)
    7e80:	b119      	cbz	r1, 7e8a <nrf_clock_is_running+0xa>
    7e82:	2901      	cmp	r1, #1
    7e84:	d00e      	beq.n	7ea4 <nrf_clock_is_running+0x24>
    7e86:	2000      	movs	r0, #0
    7e88:	4770      	bx	lr
            if (p_clk_src != NULL)
    7e8a:	b122      	cbz	r2, 7e96 <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7e8c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7e90:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    7e94:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7e96:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    7e9a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7e9e:	d10e      	bne.n	7ebe <nrf_clock_is_running+0x3e>
    return false;
    7ea0:	2000      	movs	r0, #0
    7ea2:	4770      	bx	lr
            if (p_clk_src != NULL)
    7ea4:	b122      	cbz	r2, 7eb0 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7ea6:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    7eaa:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    7eae:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7eb0:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    7eb4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7eb8:	d103      	bne.n	7ec2 <nrf_clock_is_running+0x42>
    return false;
    7eba:	2000      	movs	r0, #0
    7ebc:	4770      	bx	lr
                return true;
    7ebe:	2001      	movs	r0, #1
    7ec0:	4770      	bx	lr
                return true;
    7ec2:	2001      	movs	r0, #1
}
    7ec4:	4770      	bx	lr

00007ec6 <clock_initial_lfclksrc_get>:
}
    7ec6:	2000      	movs	r0, #0
    7ec8:	4770      	bx	lr

00007eca <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    7eca:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7ecc:	2000      	movs	r0, #0
    7ece:	f7f9 fbaf 	bl	1630 <arch_irq_is_enabled>
    7ed2:	b100      	cbz	r0, 7ed6 <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    7ed4:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7ed6:	f7fe feda 	bl	6c8e <arch_irq_enable>
}
    7eda:	e7fb      	b.n	7ed4 <nrfx_power_clock_irq_init+0xa>

00007edc <clock_lfclksrc_tweak>:
{
    7edc:	b538      	push	{r3, r4, r5, lr}
    7ede:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    7ee0:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    7ee2:	2b01      	cmp	r3, #1
    7ee4:	d002      	beq.n	7eec <clock_lfclksrc_tweak+0x10>
    7ee6:	b933      	cbnz	r3, 7ef6 <clock_lfclksrc_tweak+0x1a>
    7ee8:	2301      	movs	r3, #1
    7eea:	e000      	b.n	7eee <clock_lfclksrc_tweak+0x12>
    7eec:	2301      	movs	r3, #1
    if (!is_correct_clk)
    7eee:	461d      	mov	r5, r3
    7ef0:	b11b      	cbz	r3, 7efa <clock_lfclksrc_tweak+0x1e>
}
    7ef2:	4628      	mov	r0, r5
    7ef4:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    7ef6:	2300      	movs	r3, #0
    7ef8:	e7f9      	b.n	7eee <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7efa:	2000      	movs	r0, #0
    7efc:	f7fb fd1e 	bl	393c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    7f00:	f7ff ffe1 	bl	7ec6 <clock_initial_lfclksrc_get>
    7f04:	6020      	str	r0, [r4, #0]
    7f06:	e7f4      	b.n	7ef2 <clock_lfclksrc_tweak+0x16>

00007f08 <nrfx_clock_enable>:
{
    7f08:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
    7f0a:	f7ff ffde 	bl	7eca <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    7f0e:	f7ff ffda 	bl	7ec6 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7f12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7f16:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}
    7f1a:	bd08      	pop	{r3, pc}

00007f1c <nrfx_clock_start>:
    switch (domain)
    7f1c:	b110      	cbz	r0, 7f24 <nrfx_clock_start+0x8>
    7f1e:	2801      	cmp	r0, #1
    7f20:	d041      	beq.n	7fa6 <nrfx_clock_start+0x8a>
    7f22:	4770      	bx	lr
{
    7f24:	b510      	push	{r4, lr}
    7f26:	b082      	sub	sp, #8
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7f28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7f2c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7f30:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    7f34:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7f36:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    7f3a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7f3e:	d11c      	bne.n	7f7a <nrfx_clock_start+0x5e>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    7f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7f44:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    7f48:	f013 0f01 	tst.w	r3, #1
    7f4c:	d119      	bne.n	7f82 <nrfx_clock_start+0x66>
                    lfclksrc = clock_initial_lfclksrc_get();
    7f4e:	f7ff ffba 	bl	7ec6 <clock_initial_lfclksrc_get>
    7f52:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    7f54:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    7f58:	9b01      	ldr	r3, [sp, #4]
    7f5a:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f5e:	2300      	movs	r3, #0
    7f60:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    7f64:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->INTENSET = mask;
    7f68:	2302      	movs	r3, #2
    7f6a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrfx_clock_anomaly_132();
    7f6e:	f7fb fcc5 	bl	38fc <nrfx_clock_anomaly_132>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7f72:	2301      	movs	r3, #1
    7f74:	60a3      	str	r3, [r4, #8]
}
    7f76:	b002      	add	sp, #8
    7f78:	bd10      	pop	{r4, pc}
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    7f7a:	a801      	add	r0, sp, #4
    7f7c:	f7ff ffae 	bl	7edc <clock_lfclksrc_tweak>
    7f80:	e7e8      	b.n	7f54 <nrfx_clock_start+0x38>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7f82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7f86:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    7f8a:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    7f8e:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    7f90:	a801      	add	r0, sp, #4
    7f92:	f7ff ffa3 	bl	7edc <clock_lfclksrc_tweak>
    7f96:	2800      	cmp	r0, #0
    7f98:	d0dc      	beq.n	7f54 <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
    7f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7f9e:	2202      	movs	r2, #2
    7fa0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    7fa4:	e7e7      	b.n	7f76 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7fa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7faa:	2200      	movs	r2, #0
    7fac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7fb0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    7fb4:	2201      	movs	r2, #1
    7fb6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7fba:	601a      	str	r2, [r3, #0]
    7fbc:	4770      	bx	lr

00007fbe <nrfx_clock_stop>:
{
    7fbe:	b508      	push	{r3, lr}
    clock_stop(domain);
    7fc0:	f7fb fcbc 	bl	393c <clock_stop>
}
    7fc4:	bd08      	pop	{r3, pc}

00007fc6 <nrf_gpiote_event_configure>:
{
    7fc6:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    7fc8:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    7fcc:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    7fd0:	f424 3447 	bic.w	r4, r4, #203776	; 0x31c00
    7fd4:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    7fd8:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7fdc:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    7fe0:	0212      	lsls	r2, r2, #8
    7fe2:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    7fe6:	041b      	lsls	r3, r3, #16
    7fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7fec:	431a      	orrs	r2, r3
    7fee:	4314      	orrs	r4, r2
    7ff0:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    7ff4:	bc10      	pop	{r4}
    7ff6:	4770      	bx	lr

00007ff8 <nrf_gpiote_task_configure>:
{
    7ff8:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    7ffa:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    7ffe:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    8002:	f424 1498 	bic.w	r4, r4, #1245184	; 0x130000
    8006:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    800a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    800e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    8012:	0212      	lsls	r2, r2, #8
    8014:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    8018:	041b      	lsls	r3, r3, #16
    801a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    801e:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    8020:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8024:	051b      	lsls	r3, r3, #20
    8026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    802a:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    802c:	4314      	orrs	r4, r2
    802e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    8032:	bc10      	pop	{r4}
    8034:	4770      	bx	lr

00008036 <nrf_gpio_reconfigure>:
{
    8036:	b4f0      	push	{r4, r5, r6, r7}
    8038:	461c      	mov	r4, r3
    803a:	9e04      	ldr	r6, [sp, #16]
    803c:	9d05      	ldr	r5, [sp, #20]
    *p_pin = pin_number & 0x1F;
    803e:	f000 001f 	and.w	r0, r0, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8042:	f500 77e0 	add.w	r7, r0, #448	; 0x1c0
    8046:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    804a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    804e:	460b      	mov	r3, r1
    8050:	b389      	cbz	r1, 80b6 <nrf_gpio_reconfigure+0x80>
    8052:	2101      	movs	r1, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8054:	b38a      	cbz	r2, 80ba <nrf_gpio_reconfigure+0x84>
    8056:	f04f 0c02 	mov.w	ip, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    805a:	ea41 010c 	orr.w	r1, r1, ip
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    805e:	b37c      	cbz	r4, 80c0 <nrf_gpio_reconfigure+0x8a>
    8060:	f04f 0c0c 	mov.w	ip, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8064:	ea41 010c 	orr.w	r1, r1, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8068:	b36e      	cbz	r6, 80c6 <nrf_gpio_reconfigure+0x90>
    806a:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    806e:	ea41 010c 	orr.w	r1, r1, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8072:	b35d      	cbz	r5, 80cc <nrf_gpio_reconfigure+0x96>
    8074:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8078:	ea41 010c 	orr.w	r1, r1, ip
    cnf &= ~to_update;
    807c:	ea27 0101 	bic.w	r1, r7, r1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8080:	b33b      	cbz	r3, 80d2 <nrf_gpio_reconfigure+0x9c>
    8082:	781b      	ldrb	r3, [r3, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    8084:	b33a      	cbz	r2, 80d6 <nrf_gpio_reconfigure+0xa0>
    8086:	7812      	ldrb	r2, [r2, #0]
    8088:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    808a:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    808c:	b32c      	cbz	r4, 80da <nrf_gpio_reconfigure+0xa4>
    808e:	7822      	ldrb	r2, [r4, #0]
    8090:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    8092:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8094:	b31e      	cbz	r6, 80de <nrf_gpio_reconfigure+0xa8>
    8096:	7832      	ldrb	r2, [r6, #0]
    8098:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    809a:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    809c:	b30d      	cbz	r5, 80e2 <nrf_gpio_reconfigure+0xac>
    809e:	782a      	ldrb	r2, [r5, #0]
    80a0:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    80a2:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    80a4:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    80a6:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    80aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    80ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    80b2:	bcf0      	pop	{r4, r5, r6, r7}
    80b4:	4770      	bx	lr
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    80b6:	2100      	movs	r1, #0
    80b8:	e7cc      	b.n	8054 <nrf_gpio_reconfigure+0x1e>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    80ba:	f04f 0c00 	mov.w	ip, #0
    80be:	e7cc      	b.n	805a <nrf_gpio_reconfigure+0x24>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    80c0:	f04f 0c00 	mov.w	ip, #0
    80c4:	e7ce      	b.n	8064 <nrf_gpio_reconfigure+0x2e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    80c6:	f04f 0c00 	mov.w	ip, #0
    80ca:	e7d0      	b.n	806e <nrf_gpio_reconfigure+0x38>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    80cc:	f04f 0c00 	mov.w	ip, #0
    80d0:	e7d2      	b.n	8078 <nrf_gpio_reconfigure+0x42>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    80d2:	2300      	movs	r3, #0
    80d4:	e7d6      	b.n	8084 <nrf_gpio_reconfigure+0x4e>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    80d6:	2200      	movs	r2, #0
    80d8:	e7d7      	b.n	808a <nrf_gpio_reconfigure+0x54>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    80da:	2200      	movs	r2, #0
    80dc:	e7d9      	b.n	8092 <nrf_gpio_reconfigure+0x5c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    80de:	2200      	movs	r2, #0
    80e0:	e7db      	b.n	809a <nrf_gpio_reconfigure+0x64>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    80e2:	2200      	movs	r2, #0
    80e4:	e7dd      	b.n	80a2 <nrf_gpio_reconfigure+0x6c>

000080e6 <pin_is_task_output>:
{
    80e6:	b510      	push	{r4, lr}
    80e8:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    80ea:	f7fb fcdf 	bl	3aac <pin_is_output>
    80ee:	b128      	cbz	r0, 80fc <pin_is_task_output+0x16>
    80f0:	4620      	mov	r0, r4
    80f2:	f7fb fcc5 	bl	3a80 <pin_in_use_by_te>
    80f6:	b118      	cbz	r0, 8100 <pin_is_task_output+0x1a>
    80f8:	2001      	movs	r0, #1
    80fa:	e000      	b.n	80fe <pin_is_task_output+0x18>
    80fc:	2000      	movs	r0, #0
}
    80fe:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    8100:	2000      	movs	r0, #0
    8102:	e7fc      	b.n	80fe <pin_is_task_output+0x18>

00008104 <pin_is_input>:
{
    8104:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    8106:	f7fb fcd1 	bl	3aac <pin_is_output>
    810a:	f080 0001 	eor.w	r0, r0, #1
}
    810e:	b2c0      	uxtb	r0, r0
    8110:	bd08      	pop	{r3, pc}

00008112 <gpiote_polarity_to_trigger>:
}
    8112:	4770      	bx	lr

00008114 <gpiote_trigger_to_polarity>:
}
    8114:	4770      	bx	lr

00008116 <is_level>:
}
    8116:	2803      	cmp	r0, #3
    8118:	bf94      	ite	ls
    811a:	2000      	movls	r0, #0
    811c:	2001      	movhi	r0, #1
    811e:	4770      	bx	lr

00008120 <next_sense_cond_call_handler>:
{
    8120:	b570      	push	{r4, r5, r6, lr}
    8122:	4604      	mov	r4, r0
    8124:	460d      	mov	r5, r1
    8126:	4616      	mov	r6, r2
    if (is_level(trigger))
    8128:	4608      	mov	r0, r1
    812a:	f7ff fff4 	bl	8116 <is_level>
    812e:	b9b8      	cbnz	r0, 8160 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8130:	2e02      	cmp	r6, #2
    8132:	d038      	beq.n	81a6 <next_sense_cond_call_handler+0x86>
    8134:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    8136:	f004 031f 	and.w	r3, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    813a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    813e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8142:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    8146:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    814a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    814e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    8152:	2d03      	cmp	r5, #3
    8154:	d02b      	beq.n	81ae <next_sense_cond_call_handler+0x8e>
    8156:	2e02      	cmp	r6, #2
    8158:	d027      	beq.n	81aa <next_sense_cond_call_handler+0x8a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    815a:	2e03      	cmp	r6, #3
    815c:	d02c      	beq.n	81b8 <next_sense_cond_call_handler+0x98>
}
    815e:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    8160:	4629      	mov	r1, r5
    8162:	4620      	mov	r0, r4
    8164:	f7fb fd14 	bl	3b90 <call_handler>
    *p_pin = pin_number & 0x1F;
    8168:	f004 041f 	and.w	r4, r4, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    816c:	f504 72e0 	add.w	r2, r4, #448	; 0x1c0
    8170:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8178:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    817c:	429e      	cmp	r6, r3
    817e:	d1ee      	bne.n	815e <next_sense_cond_call_handler+0x3e>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8180:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8184:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    8188:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    818c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    8190:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8194:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    8198:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    819c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    81a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    81a4:	e7db      	b.n	815e <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    81a6:	2003      	movs	r0, #3
    81a8:	e7c5      	b.n	8136 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    81aa:	2d01      	cmp	r5, #1
    81ac:	d1d5      	bne.n	815a <next_sense_cond_call_handler+0x3a>
            call_handler(pin, trigger);
    81ae:	4629      	mov	r1, r5
    81b0:	4620      	mov	r0, r4
    81b2:	f7fb fced 	bl	3b90 <call_handler>
}
    81b6:	e7d2      	b.n	815e <next_sense_cond_call_handler+0x3e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    81b8:	2d02      	cmp	r5, #2
    81ba:	d1d0      	bne.n	815e <next_sense_cond_call_handler+0x3e>
    81bc:	e7f7      	b.n	81ae <next_sense_cond_call_handler+0x8e>

000081be <latch_pending_read_and_check>:
    for (i = start_port; i < (start_port + length); i++)
    81be:	4684      	mov	ip, r0
    81c0:	2300      	movs	r3, #0
    81c2:	e008      	b.n	81d6 <latch_pending_read_and_check+0x18>
        *p_masks = gpio_regs[i]->LATCH;
    81c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    81c8:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    81cc:	f84c 1b04 	str.w	r1, [ip], #4
        gpio_regs[i]->LATCH = *p_masks;
    81d0:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    81d4:	3301      	adds	r3, #1
    81d6:	2b00      	cmp	r3, #0
    81d8:	d0f4      	beq.n	81c4 <latch_pending_read_and_check+0x6>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    81da:	2300      	movs	r3, #0
    81dc:	b10b      	cbz	r3, 81e2 <latch_pending_read_and_check+0x24>
    return false;
    81de:	2000      	movs	r0, #0
    81e0:	4770      	bx	lr
        if (latch[port_idx])
    81e2:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    81e6:	b90a      	cbnz	r2, 81ec <latch_pending_read_and_check+0x2e>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    81e8:	3301      	adds	r3, #1
    81ea:	e7f7      	b.n	81dc <latch_pending_read_and_check+0x1e>
            return true;
    81ec:	2001      	movs	r0, #1
}
    81ee:	4770      	bx	lr

000081f0 <configure_pins>:
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    81f0:	7b0b      	ldrb	r3, [r1, #12]
    81f2:	2b00      	cmp	r3, #0
    81f4:	d03c      	beq.n	8270 <configure_pins+0x80>
    81f6:	7b4b      	ldrb	r3, [r1, #13]
    81f8:	b90b      	cbnz	r3, 81fe <configure_pins+0xe>
    81fa:	2300      	movs	r3, #0
    81fc:	e039      	b.n	8272 <configure_pins+0x82>
    81fe:	4770      	bx	lr
    *p_pin = pin_number & 0x1F;
    8200:	f002 051f 	and.w	r5, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8204:	2401      	movs	r4, #1
    8206:	40ac      	lsls	r4, r5
    p_reg->OUTSET = set_mask;
    8208:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    820c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
}
    8210:	e024      	b.n	825c <configure_pins+0x6c>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    8212:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    8216:	aa04      	add	r2, sp, #16
    8218:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    821c:	f842 4c10 	str.w	r4, [r2, #-16]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    8220:	3301      	adds	r3, #1
    8222:	b2db      	uxtb	r3, r3
    8224:	2b03      	cmp	r3, #3
    8226:	d827      	bhi.n	8278 <configure_pins+0x88>
        uint8_t output_pin = p_config->output_pins[i];
    8228:	5cca      	ldrb	r2, [r1, r3]
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    822a:	2aff      	cmp	r2, #255	; 0xff
    822c:	d0f1      	beq.n	8212 <configure_pins+0x22>
            bool inverted = output_pin &  NRFX_PWM_PIN_INVERTED;
    822e:	fa4f fe82 	sxtb.w	lr, r2
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    8232:	f022 0480 	bic.w	r4, r2, #128	; 0x80
    8236:	ad04      	add	r5, sp, #16
    8238:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
    823c:	f84c 4c10 	str.w	r4, [ip, #-16]
            if (!p_config->skip_gpio_cfg)
    8240:	7b0c      	ldrb	r4, [r1, #12]
    8242:	2c00      	cmp	r4, #0
    8244:	d1ec      	bne.n	8220 <configure_pins+0x30>
    if (value == 0)
    8246:	f1be 0f00 	cmp.w	lr, #0
    824a:	dbd9      	blt.n	8200 <configure_pins+0x10>
    *p_pin = pin_number & 0x1F;
    824c:	f002 051f 	and.w	r5, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8250:	2401      	movs	r4, #1
    8252:	40ac      	lsls	r4, r5
    p_reg->OUTCLR = clr_mask;
    8254:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    8258:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    825c:	f002 021f 	and.w	r2, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
    8260:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    8264:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    8268:	2503      	movs	r5, #3
    826a:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
}
    826e:	e7d7      	b.n	8220 <configure_pins+0x30>
    8270:	2300      	movs	r3, #0
{
    8272:	b530      	push	{r4, r5, lr}
    8274:	b085      	sub	sp, #20
    8276:	e7d5      	b.n	8224 <configure_pins+0x34>
    if (!p_config->skip_psel_cfg)
    8278:	7b4b      	ldrb	r3, [r1, #13]
    827a:	b973      	cbnz	r3, 829a <configure_pins+0xaa>
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
    827c:	6800      	ldr	r0, [r0, #0]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    827e:	2b03      	cmp	r3, #3
    8280:	d80b      	bhi.n	829a <configure_pins+0xaa>
        p_reg->PSEL.OUT[i] = out_pins[i];
    8282:	aa04      	add	r2, sp, #16
    8284:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    8288:	f852 1c10 	ldr.w	r1, [r2, #-16]
    828c:	f503 72ac 	add.w	r2, r3, #344	; 0x158
    8290:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    8294:	3301      	adds	r3, #1
    8296:	b2db      	uxtb	r3, r3
    8298:	e7f1      	b.n	827e <configure_pins+0x8e>
}
    829a:	b005      	add	sp, #20
    829c:	bd30      	pop	{r4, r5, pc}

0000829e <start_playback>:
{
    829e:	b410      	push	{r4}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    82a0:	2402      	movs	r4, #2
    82a2:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    82a4:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    82a6:	6809      	ldr	r1, [r1, #0]
    82a8:	b181      	cbz	r1, 82cc <start_playback+0x2e>
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ0)
    82aa:	f012 0f04 	tst.w	r2, #4
    82ae:	d11c      	bne.n	82ea <start_playback+0x4c>
        uint32_t int_mask = NRF_PWM_INT_LOOPSDONE_MASK |
    82b0:	2182      	movs	r1, #130	; 0x82
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    82b2:	f012 0f08 	tst.w	r2, #8
    82b6:	d001      	beq.n	82bc <start_playback+0x1e>
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    82b8:	f041 0120 	orr.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    82bc:	f012 0f10 	tst.w	r2, #16
    82c0:	d001      	beq.n	82c6 <start_playback+0x28>
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    82c2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
    82c6:	6804      	ldr	r4, [r0, #0]
    p_reg->INTEN = mask;
    82c8:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    82cc:	6801      	ldr	r1, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    82ce:	2400      	movs	r4, #0
    82d0:	f8c1 4104 	str.w	r4, [r1, #260]	; 0x104
    82d4:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    82d8:	f012 0f80 	tst.w	r2, #128	; 0x80
    82dc:	d107      	bne.n	82ee <start_playback+0x50>
    nrf_pwm_task_trigger(p_instance->p_registers, starting_task);
    82de:	6802      	ldr	r2, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    82e0:	2101      	movs	r1, #1
    82e2:	50d1      	str	r1, [r2, r3]
    return 0;
    82e4:	2000      	movs	r0, #0
}
    82e6:	bc10      	pop	{r4}
    82e8:	4770      	bx	lr
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    82ea:	2192      	movs	r1, #146	; 0x92
    82ec:	e7e1      	b.n	82b2 <start_playback+0x14>
            nrf_pwm_task_address_get(p_instance->p_registers, starting_task);
    82ee:	6800      	ldr	r0, [r0, #0]
    return ((uint32_t)p_reg + (uint32_t)task);
    82f0:	4418      	add	r0, r3
        return starting_task_address;
    82f2:	e7f8      	b.n	82e6 <start_playback+0x48>

000082f4 <nrfx_pwm_stop>:
{
    82f4:	b538      	push	{r3, r4, r5, lr}
    82f6:	4604      	mov	r4, r0
    82f8:	460d      	mov	r5, r1
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    82fa:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
    82fc:	2200      	movs	r2, #0
    82fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
    8302:	6803      	ldr	r3, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8304:	2201      	movs	r2, #1
    8306:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    8308:	f7fc f80a 	bl	4320 <nrfx_pwm_is_stopped>
    830c:	4603      	mov	r3, r0
    830e:	b938      	cbnz	r0, 8320 <nrfx_pwm_stop+0x2c>
            if (nrfx_pwm_is_stopped(p_instance))
    8310:	4620      	mov	r0, r4
    8312:	f7fc f805 	bl	4320 <nrfx_pwm_is_stopped>
    8316:	4603      	mov	r3, r0
    8318:	b910      	cbnz	r0, 8320 <nrfx_pwm_stop+0x2c>
        } while (wait_until_stopped);
    831a:	2d00      	cmp	r5, #0
    831c:	d1f8      	bne.n	8310 <nrfx_pwm_stop+0x1c>
    bool ret_val = false;
    831e:	462b      	mov	r3, r5
}
    8320:	4618      	mov	r0, r3
    8322:	bd38      	pop	{r3, r4, r5, pc}

00008324 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    8324:	b508      	push	{r3, lr}
  _DoInit();
    8326:	f7fc f817 	bl	4358 <_DoInit>
}
    832a:	bd08      	pop	{r3, pc}

0000832c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    832c:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    832e:	f7ff fff9 	bl	8324 <SEGGER_RTT_Init>

	return 0;
}
    8332:	2000      	movs	r0, #0
    8334:	bd08      	pop	{r3, pc}

00008336 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    8336:	b160      	cbz	r0, 8352 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8338:	68c3      	ldr	r3, [r0, #12]
    833a:	785a      	ldrb	r2, [r3, #1]
    833c:	f012 0f01 	tst.w	r2, #1
    8340:	d003      	beq.n	834a <z_device_is_ready+0x14>
    8342:	781b      	ldrb	r3, [r3, #0]
    8344:	b11b      	cbz	r3, 834e <z_device_is_ready+0x18>
    8346:	2000      	movs	r0, #0
    8348:	4770      	bx	lr
    834a:	2000      	movs	r0, #0
    834c:	4770      	bx	lr
    834e:	2001      	movs	r0, #1
    8350:	4770      	bx	lr
		return false;
    8352:	2000      	movs	r0, #0
}
    8354:	4770      	bx	lr

00008356 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    8356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8358:	4605      	mov	r5, r0
    835a:	460e      	mov	r6, r1
	__asm__ volatile(
    835c:	f04f 0320 	mov.w	r3, #32
    8360:	f3ef 8711 	mrs	r7, BASEPRI
    8364:	f383 8812 	msr	BASEPRI_MAX, r3
    8368:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    836c:	f7fc ff2c 	bl	51c8 <z_impl_z_current_get>
    8370:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    8372:	4631      	mov	r1, r6
    8374:	4628      	mov	r0, r5
    8376:	f7ff fc6f 	bl	7c58 <k_sys_fatal_error_handler>
	__asm__ volatile(
    837a:	f387 8811 	msr	BASEPRI, r7
    837e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    8382:	4620      	mov	r0, r4
    8384:	f7f9 fc8c 	bl	1ca0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    8388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000838a <z_early_memset>:
{
    838a:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
    838c:	f000 fbbf 	bl	8b0e <memset>
}
    8390:	bd08      	pop	{r3, pc}

00008392 <z_early_memcpy>:
{
    8392:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    8394:	f000 fbad 	bl	8af2 <memcpy>
}
    8398:	bd08      	pop	{r3, pc}

0000839a <setup_thread_stack>:
{
    839a:	b410      	push	{r4}
    839c:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    839e:	3207      	adds	r2, #7
    83a0:	f022 0207 	bic.w	r2, r2, #7
    83a4:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    83a8:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    83ac:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    83b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    83b4:	2200      	movs	r2, #0
    83b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
    83ba:	4408      	add	r0, r1
    83bc:	bc10      	pop	{r4}
    83be:	4770      	bx	lr

000083c0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    83c0:	f3ef 8005 	mrs	r0, IPSR
}
    83c4:	3800      	subs	r0, #0
    83c6:	bf18      	it	ne
    83c8:	2001      	movne	r0, #1
    83ca:	4770      	bx	lr

000083cc <z_impl_k_thread_start>:
{
    83cc:	b508      	push	{r3, lr}
	z_sched_start(thread);
    83ce:	f7fc fcf7 	bl	4dc0 <z_sched_start>
}
    83d2:	bd08      	pop	{r3, pc}

000083d4 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    83d4:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    83d6:	2400      	movs	r4, #0
    83d8:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    83da:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    83dc:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    83de:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    83e0:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    83e2:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    83e4:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    83e6:	bc10      	pop	{r4}
    83e8:	4770      	bx	lr

000083ea <z_pm_save_idle_exit>:
{
    83ea:	b508      	push	{r3, lr}
	pm_system_resume();
    83ec:	f7f8 ffb2 	bl	1354 <pm_system_resume>
	sys_clock_idle_exit();
    83f0:	f7ff fbea 	bl	7bc8 <sys_clock_idle_exit>
}
    83f4:	bd08      	pop	{r3, pc}

000083f6 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    83f6:	4288      	cmp	r0, r1
    83f8:	da00      	bge.n	83fc <new_prio_for_inheritance+0x6>
    83fa:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    83fc:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    8400:	db01      	blt.n	8406 <new_prio_for_inheritance+0x10>
    8402:	4608      	mov	r0, r1
    8404:	4770      	bx	lr
    8406:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    840a:	4770      	bx	lr

0000840c <adjust_owner_prio>:
{
    840c:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    840e:	6880      	ldr	r0, [r0, #8]
    8410:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8414:	428b      	cmp	r3, r1
    8416:	d101      	bne.n	841c <adjust_owner_prio+0x10>
	return false;
    8418:	2000      	movs	r0, #0
}
    841a:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    841c:	f7fc fd26 	bl	4e6c <z_set_prio>
    8420:	e7fb      	b.n	841a <adjust_owner_prio+0xe>

00008422 <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    8422:	680b      	ldr	r3, [r1, #0]
    8424:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    8428:	600b      	str	r3, [r1, #0]
	return list->tail;
    842a:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    842c:	b132      	cbz	r2, 843c <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    842e:	6813      	ldr	r3, [r2, #0]
    8430:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    8434:	430b      	orrs	r3, r1
    8436:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8438:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    843a:	4770      	bx	lr
	list->tail = node;
    843c:	6041      	str	r1, [r0, #4]
	list->head = node;
    843e:	6001      	str	r1, [r0, #0]
}
    8440:	4770      	bx	lr

00008442 <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
    8442:	b508      	push	{r3, lr}
    8444:	b191      	cbz	r1, 846c <sys_sflist_insert+0x2a>
    8446:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    8448:	680b      	ldr	r3, [r1, #0]
    844a:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
    844e:	2b03      	cmp	r3, #3
    8450:	d918      	bls.n	8484 <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    8452:	6813      	ldr	r3, [r2, #0]
    8454:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    8458:	430b      	orrs	r3, r1
    845a:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    845c:	f8dc 3000 	ldr.w	r3, [ip]
    8460:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    8464:	4313      	orrs	r3, r2
    8466:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
    846a:	bd08      	pop	{r3, pc}
	return list->head;
    846c:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    846e:	6813      	ldr	r3, [r2, #0]
    8470:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    8474:	430b      	orrs	r3, r1
    8476:	6013      	str	r3, [r2, #0]
	list->head = node;
    8478:	6002      	str	r2, [r0, #0]
	return list->tail;
    847a:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
    847c:	2b00      	cmp	r3, #0
    847e:	d1f4      	bne.n	846a <sys_sflist_insert+0x28>
	list->tail = node;
    8480:	6042      	str	r2, [r0, #4]
}
    8482:	e7f2      	b.n	846a <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
    8484:	4611      	mov	r1, r2
    8486:	f7ff ffcc 	bl	8422 <sys_sflist_append>
    848a:	e7ee      	b.n	846a <sys_sflist_insert+0x28>

0000848c <prepare_thread_to_run>:
{
    848c:	b508      	push	{r3, lr}
    848e:	2200      	movs	r2, #0
    8490:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8494:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
    8496:	f000 f8db 	bl	8650 <z_ready_thread>
}
    849a:	bd08      	pop	{r3, pc}

0000849c <queue_insert>:
{
    849c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    84a0:	4604      	mov	r4, r0
    84a2:	460e      	mov	r6, r1
    84a4:	4615      	mov	r5, r2
    84a6:	461f      	mov	r7, r3
    84a8:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    84ac:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
    84b0:	f04f 0220 	mov.w	r2, #32
    84b4:	f3ef 8911 	mrs	r9, BASEPRI
    84b8:	f382 8812 	msr	BASEPRI_MAX, r2
    84bc:	f3bf 8f6f 	isb	sy
    84c0:	46ca      	mov	sl, r9
	if (is_append) {
    84c2:	b103      	cbz	r3, 84c6 <queue_insert+0x2a>
	return list->tail;
    84c4:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    84c6:	4640      	mov	r0, r8
    84c8:	f000 f978 	bl	87bc <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    84cc:	b970      	cbnz	r0, 84ec <queue_insert+0x50>
	if (alloc) {
    84ce:	b9b7      	cbnz	r7, 84fe <queue_insert+0x62>
	node->next_and_flags = flags;
    84d0:	2300      	movs	r3, #0
    84d2:	602b      	str	r3, [r5, #0]
	sys_sflist_insert(&queue->data_q, prev, data);
    84d4:	462a      	mov	r2, r5
    84d6:	4631      	mov	r1, r6
    84d8:	4620      	mov	r0, r4
    84da:	f7ff ffb2 	bl	8442 <sys_sflist_insert>
	z_reschedule(&queue->lock, key);
    84de:	4649      	mov	r1, r9
    84e0:	4640      	mov	r0, r8
    84e2:	f7fc fb59 	bl	4b98 <z_reschedule>
	return 0;
    84e6:	2000      	movs	r0, #0
}
    84e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prepare_thread_to_run(first_pending_thread, data);
    84ec:	4629      	mov	r1, r5
    84ee:	f7ff ffcd 	bl	848c <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
    84f2:	4649      	mov	r1, r9
    84f4:	4640      	mov	r0, r8
    84f6:	f7fc fb4f 	bl	4b98 <z_reschedule>
		return 0;
    84fa:	2000      	movs	r0, #0
    84fc:	e7f4      	b.n	84e8 <queue_insert+0x4c>
	return z_thread_aligned_alloc(0, size);
    84fe:	2108      	movs	r1, #8
    8500:	2000      	movs	r0, #0
    8502:	f7fd f88f 	bl	5624 <z_thread_aligned_alloc>
		if (anode == NULL) {
    8506:	b120      	cbz	r0, 8512 <queue_insert+0x76>
		anode->data = data;
    8508:	6045      	str	r5, [r0, #4]
    850a:	2201      	movs	r2, #1
    850c:	6002      	str	r2, [r0, #0]
		data = anode;
    850e:	4605      	mov	r5, r0
    8510:	e7e0      	b.n	84d4 <queue_insert+0x38>
	__asm__ volatile(
    8512:	f38a 8811 	msr	BASEPRI, sl
    8516:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    851a:	f06f 000b 	mvn.w	r0, #11
    851e:	e7e3      	b.n	84e8 <queue_insert+0x4c>

00008520 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    8520:	b160      	cbz	r0, 853c <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    8522:	6803      	ldr	r3, [r0, #0]
    8524:	f013 0f03 	tst.w	r3, #3
    8528:	d008      	beq.n	853c <z_queue_node_peek+0x1c>
{
    852a:	b510      	push	{r4, lr}
		ret = anode->data;
    852c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    852e:	b909      	cbnz	r1, 8534 <z_queue_node_peek+0x14>
		ret = anode->data;
    8530:	4620      	mov	r0, r4
}
    8532:	bd10      	pop	{r4, pc}
			k_free(anode);
    8534:	f000 fa54 	bl	89e0 <k_free>
		ret = anode->data;
    8538:	4620      	mov	r0, r4
    853a:	e7fa      	b.n	8532 <z_queue_node_peek+0x12>
}
    853c:	4770      	bx	lr

0000853e <k_queue_append>:
{
    853e:	b500      	push	{lr}
    8540:	b083      	sub	sp, #12
    8542:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    8544:	2301      	movs	r3, #1
    8546:	9300      	str	r3, [sp, #0]
    8548:	2300      	movs	r3, #0
    854a:	4619      	mov	r1, r3
    854c:	f7ff ffa6 	bl	849c <queue_insert>
}
    8550:	b003      	add	sp, #12
    8552:	f85d fb04 	ldr.w	pc, [sp], #4

00008556 <thread_active_elsewhere>:
}
    8556:	2000      	movs	r0, #0
    8558:	4770      	bx	lr

0000855a <pended_on_thread>:
}
    855a:	6880      	ldr	r0, [r0, #8]
    855c:	4770      	bx	lr

0000855e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    855e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    8562:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    8566:	4283      	cmp	r3, r0
    8568:	d001      	beq.n	856e <z_sched_prio_cmp+0x10>
		return b2 - b1;
    856a:	1ac0      	subs	r0, r0, r3
    856c:	4770      	bx	lr
	return 0;
    856e:	2000      	movs	r0, #0
}
    8570:	4770      	bx	lr

00008572 <z_unpend_thread_no_timeout>:
{
    8572:	b538      	push	{r3, r4, r5, lr}
    8574:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    8576:	2300      	movs	r3, #0
	__asm__ volatile(
    8578:	f04f 0220 	mov.w	r2, #32
    857c:	f3ef 8511 	mrs	r5, BASEPRI
    8580:	f382 8812 	msr	BASEPRI_MAX, r2
    8584:	f3bf 8f6f 	isb	sy
    8588:	e004      	b.n	8594 <z_unpend_thread_no_timeout+0x22>
	__asm__ volatile(
    858a:	f385 8811 	msr	BASEPRI, r5
    858e:	f3bf 8f6f 	isb	sy
    8592:	2301      	movs	r3, #1
    8594:	b933      	cbnz	r3, 85a4 <z_unpend_thread_no_timeout+0x32>
		if (thread->base.pended_on != NULL) {
    8596:	68a3      	ldr	r3, [r4, #8]
    8598:	2b00      	cmp	r3, #0
    859a:	d0f6      	beq.n	858a <z_unpend_thread_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
    859c:	4620      	mov	r0, r4
    859e:	f000 f824 	bl	85ea <unpend_thread_no_timeout>
    85a2:	e7f2      	b.n	858a <z_unpend_thread_no_timeout+0x18>
}
    85a4:	bd38      	pop	{r3, r4, r5, pc}

000085a6 <z_reschedule_irqlock>:
{
    85a6:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    85a8:	4603      	mov	r3, r0
    85aa:	b928      	cbnz	r0, 85b8 <z_reschedule_irqlock+0x12>
    85ac:	f3ef 8205 	mrs	r2, IPSR
    85b0:	b912      	cbnz	r2, 85b8 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    85b2:	f7f9 f86b 	bl	168c <arch_swap>
	return ret;
    85b6:	e003      	b.n	85c0 <z_reschedule_irqlock+0x1a>
    85b8:	f383 8811 	msr	BASEPRI, r3
    85bc:	f3bf 8f6f 	isb	sy
}
    85c0:	bd08      	pop	{r3, pc}

000085c2 <z_reschedule_unlocked>:
{
    85c2:	b508      	push	{r3, lr}
	__asm__ volatile(
    85c4:	f04f 0320 	mov.w	r3, #32
    85c8:	f3ef 8011 	mrs	r0, BASEPRI
    85cc:	f383 8812 	msr	BASEPRI_MAX, r3
    85d0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    85d4:	f7ff ffe7 	bl	85a6 <z_reschedule_irqlock>
}
    85d8:	bd08      	pop	{r3, pc}

000085da <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    85da:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    85dc:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    85de:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    85e0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    85e2:	2300      	movs	r3, #0
    85e4:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    85e6:	604b      	str	r3, [r1, #4]
}
    85e8:	4770      	bx	lr

000085ea <unpend_thread_no_timeout>:
{
    85ea:	b510      	push	{r4, lr}
    85ec:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    85ee:	f7ff ffb4 	bl	855a <pended_on_thread>
    85f2:	4621      	mov	r1, r4
    85f4:	f7ff fff1 	bl	85da <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    85f8:	7b63      	ldrb	r3, [r4, #13]
    85fa:	f023 0302 	bic.w	r3, r3, #2
    85fe:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8600:	2300      	movs	r3, #0
    8602:	60a3      	str	r3, [r4, #8]
}
    8604:	bd10      	pop	{r4, pc}

00008606 <z_unpend_thread>:
{
    8606:	b538      	push	{r3, r4, r5, lr}
    8608:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    860a:	2300      	movs	r3, #0
    860c:	f04f 0220 	mov.w	r2, #32
    8610:	f3ef 8511 	mrs	r5, BASEPRI
    8614:	f382 8812 	msr	BASEPRI_MAX, r2
    8618:	f3bf 8f6f 	isb	sy
    861c:	e004      	b.n	8628 <z_unpend_thread+0x22>
	__asm__ volatile(
    861e:	f385 8811 	msr	BASEPRI, r5
    8622:	f3bf 8f6f 	isb	sy
    8626:	2301      	movs	r3, #1
    8628:	b933      	cbnz	r3, 8638 <z_unpend_thread+0x32>
		if (thread->base.pended_on != NULL) {
    862a:	68a3      	ldr	r3, [r4, #8]
    862c:	2b00      	cmp	r3, #0
    862e:	d0f6      	beq.n	861e <z_unpend_thread+0x18>
			unpend_thread_no_timeout(thread);
    8630:	4620      	mov	r0, r4
    8632:	f7ff ffda 	bl	85ea <unpend_thread_no_timeout>
    8636:	e7f2      	b.n	861e <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
    8638:	f104 0018 	add.w	r0, r4, #24
    863c:	f000 f928 	bl	8890 <z_abort_timeout>
}
    8640:	bd38      	pop	{r3, r4, r5, pc}

00008642 <z_priq_dumb_best>:
{
    8642:	4603      	mov	r3, r0
	return list->head == list;
    8644:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8646:	4283      	cmp	r3, r0
    8648:	d000      	beq.n	864c <z_priq_dumb_best+0xa>
}
    864a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    864c:	2000      	movs	r0, #0
	return thread;
    864e:	e7fc      	b.n	864a <z_priq_dumb_best+0x8>

00008650 <z_ready_thread>:
{
    8650:	b538      	push	{r3, r4, r5, lr}
    8652:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    8654:	2300      	movs	r3, #0
	__asm__ volatile(
    8656:	f04f 0220 	mov.w	r2, #32
    865a:	f3ef 8511 	mrs	r5, BASEPRI
    865e:	f382 8812 	msr	BASEPRI_MAX, r2
    8662:	f3bf 8f6f 	isb	sy
    8666:	e004      	b.n	8672 <z_ready_thread+0x22>
	__asm__ volatile(
    8668:	f385 8811 	msr	BASEPRI, r5
    866c:	f3bf 8f6f 	isb	sy
    8670:	2301      	movs	r3, #1
    8672:	b943      	cbnz	r3, 8686 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    8674:	4620      	mov	r0, r4
    8676:	f7ff ff6e 	bl	8556 <thread_active_elsewhere>
    867a:	2800      	cmp	r0, #0
    867c:	d1f4      	bne.n	8668 <z_ready_thread+0x18>
			ready_thread(thread);
    867e:	4620      	mov	r0, r4
    8680:	f7fc fb62 	bl	4d48 <ready_thread>
    8684:	e7f0      	b.n	8668 <z_ready_thread+0x18>
}
    8686:	bd38      	pop	{r3, r4, r5, pc}

00008688 <z_sched_wake_thread>:
{
    8688:	b570      	push	{r4, r5, r6, lr}
    868a:	4604      	mov	r4, r0
    868c:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    868e:	2300      	movs	r3, #0
	__asm__ volatile(
    8690:	f04f 0220 	mov.w	r2, #32
    8694:	f3ef 8511 	mrs	r5, BASEPRI
    8698:	f382 8812 	msr	BASEPRI_MAX, r2
    869c:	f3bf 8f6f 	isb	sy
    86a0:	e007      	b.n	86b2 <z_sched_wake_thread+0x2a>
			ready_thread(thread);
    86a2:	4620      	mov	r0, r4
    86a4:	f7fc fb50 	bl	4d48 <ready_thread>
	__asm__ volatile(
    86a8:	f385 8811 	msr	BASEPRI, r5
    86ac:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    86b0:	2301      	movs	r3, #1
    86b2:	b993      	cbnz	r3, 86da <z_sched_wake_thread+0x52>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    86b4:	7b63      	ldrb	r3, [r4, #13]
		if (!killed) {
    86b6:	f013 0f28 	tst.w	r3, #40	; 0x28
    86ba:	d1f5      	bne.n	86a8 <z_sched_wake_thread+0x20>
			if (thread->base.pended_on != NULL) {
    86bc:	68a3      	ldr	r3, [r4, #8]
    86be:	b113      	cbz	r3, 86c6 <z_sched_wake_thread+0x3e>
				unpend_thread_no_timeout(thread);
    86c0:	4620      	mov	r0, r4
    86c2:	f7ff ff92 	bl	85ea <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    86c6:	7b63      	ldrb	r3, [r4, #13]
    86c8:	f023 0204 	bic.w	r2, r3, #4
    86cc:	7362      	strb	r2, [r4, #13]
			if (is_timeout) {
    86ce:	2e00      	cmp	r6, #0
    86d0:	d0e7      	beq.n	86a2 <z_sched_wake_thread+0x1a>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    86d2:	f023 0314 	bic.w	r3, r3, #20
    86d6:	7363      	strb	r3, [r4, #13]
}
    86d8:	e7e3      	b.n	86a2 <z_sched_wake_thread+0x1a>
}
    86da:	bd70      	pop	{r4, r5, r6, pc}

000086dc <z_thread_timeout>:
{
    86dc:	b508      	push	{r3, lr}
	z_sched_wake_thread(thread, true);
    86de:	2101      	movs	r1, #1
    86e0:	3818      	subs	r0, #24
    86e2:	f7ff ffd1 	bl	8688 <z_sched_wake_thread>
}
    86e6:	bd08      	pop	{r3, pc}

000086e8 <unpend_all>:
{
    86e8:	b538      	push	{r3, r4, r5, lr}
    86ea:	4605      	mov	r5, r0
	return list->head == list;
    86ec:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    86ee:	42a5      	cmp	r5, r4
    86f0:	d00e      	beq.n	8710 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    86f2:	b16c      	cbz	r4, 8710 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    86f4:	4620      	mov	r0, r4
    86f6:	f7ff ff78 	bl	85ea <unpend_thread_no_timeout>
    86fa:	f104 0018 	add.w	r0, r4, #24
    86fe:	f000 f8c7 	bl	8890 <z_abort_timeout>
    8702:	2300      	movs	r3, #0
    8704:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
    8708:	4620      	mov	r0, r4
    870a:	f7fc fb1d 	bl	4d48 <ready_thread>
    870e:	e7ed      	b.n	86ec <unpend_all+0x4>
}
    8710:	bd38      	pop	{r3, r4, r5, pc}

00008712 <add_to_waitq_locked>:
{
    8712:	b570      	push	{r4, r5, r6, lr}
    8714:	4605      	mov	r5, r0
    8716:	460e      	mov	r6, r1
	unready_thread(thread);
    8718:	f7fc fb70 	bl	4dfc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    871c:	7b6b      	ldrb	r3, [r5, #13]
    871e:	f043 0302 	orr.w	r3, r3, #2
    8722:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    8724:	b1fe      	cbz	r6, 8766 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    8726:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    8728:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    872a:	42a6      	cmp	r6, r4
    872c:	d108      	bne.n	8740 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    872e:	2400      	movs	r4, #0
    8730:	e006      	b.n	8740 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    8732:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8734:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8736:	602c      	str	r4, [r5, #0]
	prev->next = node;
    8738:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    873a:	6065      	str	r5, [r4, #4]
}
    873c:	e013      	b.n	8766 <add_to_waitq_locked+0x54>
    873e:	2400      	movs	r4, #0
    8740:	b164      	cbz	r4, 875c <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8742:	4621      	mov	r1, r4
    8744:	4628      	mov	r0, r5
    8746:	f7ff ff0a 	bl	855e <z_sched_prio_cmp>
    874a:	2800      	cmp	r0, #0
    874c:	dcf1      	bgt.n	8732 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    874e:	2c00      	cmp	r4, #0
    8750:	d0f6      	beq.n	8740 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    8752:	6873      	ldr	r3, [r6, #4]
    8754:	429c      	cmp	r4, r3
    8756:	d0f2      	beq.n	873e <add_to_waitq_locked+0x2c>
    8758:	6824      	ldr	r4, [r4, #0]
    875a:	e7f1      	b.n	8740 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    875c:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    875e:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    8760:	606b      	str	r3, [r5, #4]
	tail->next = node;
    8762:	601d      	str	r5, [r3, #0]
	list->tail = node;
    8764:	6075      	str	r5, [r6, #4]
}
    8766:	bd70      	pop	{r4, r5, r6, pc}

00008768 <pend_locked>:
{
    8768:	b570      	push	{r4, r5, r6, lr}
    876a:	4604      	mov	r4, r0
    876c:	4616      	mov	r6, r2
    876e:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
    8770:	f7ff ffcf 	bl	8712 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    8774:	4632      	mov	r2, r6
    8776:	462b      	mov	r3, r5
    8778:	4620      	mov	r0, r4
    877a:	f7fc f9d5 	bl	4b28 <add_thread_timeout>
}
    877e:	bd70      	pop	{r4, r5, r6, pc}

00008780 <z_unpend1_no_timeout>:
{
    8780:	b570      	push	{r4, r5, r6, lr}
    8782:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    8784:	2300      	movs	r3, #0
	__asm__ volatile(
    8786:	f04f 0220 	mov.w	r2, #32
    878a:	f3ef 8511 	mrs	r5, BASEPRI
    878e:	f382 8812 	msr	BASEPRI_MAX, r2
    8792:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    8796:	461c      	mov	r4, r3
    8798:	e004      	b.n	87a4 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
    879a:	f385 8811 	msr	BASEPRI, r5
    879e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    87a2:	2301      	movs	r3, #1
    87a4:	b943      	cbnz	r3, 87b8 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
    87a6:	4630      	mov	r0, r6
    87a8:	f7ff ff4b 	bl	8642 <z_priq_dumb_best>
		if (thread != NULL) {
    87ac:	4604      	mov	r4, r0
    87ae:	2800      	cmp	r0, #0
    87b0:	d0f3      	beq.n	879a <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    87b2:	f7ff ff1a 	bl	85ea <unpend_thread_no_timeout>
    87b6:	e7f0      	b.n	879a <z_unpend1_no_timeout+0x1a>
}
    87b8:	4620      	mov	r0, r4
    87ba:	bd70      	pop	{r4, r5, r6, pc}

000087bc <z_unpend_first_thread>:
{
    87bc:	b570      	push	{r4, r5, r6, lr}
    87be:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    87c0:	2300      	movs	r3, #0
	__asm__ volatile(
    87c2:	f04f 0220 	mov.w	r2, #32
    87c6:	f3ef 8511 	mrs	r5, BASEPRI
    87ca:	f382 8812 	msr	BASEPRI_MAX, r2
    87ce:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    87d2:	461c      	mov	r4, r3
    87d4:	e004      	b.n	87e0 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    87d6:	f385 8811 	msr	BASEPRI, r5
    87da:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    87de:	2301      	movs	r3, #1
    87e0:	b963      	cbnz	r3, 87fc <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    87e2:	4630      	mov	r0, r6
    87e4:	f7ff ff2d 	bl	8642 <z_priq_dumb_best>
		if (thread != NULL) {
    87e8:	4604      	mov	r4, r0
    87ea:	2800      	cmp	r0, #0
    87ec:	d0f3      	beq.n	87d6 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    87ee:	f7ff fefc 	bl	85ea <unpend_thread_no_timeout>
    87f2:	f104 0018 	add.w	r0, r4, #24
    87f6:	f000 f84b 	bl	8890 <z_abort_timeout>
    87fa:	e7ec      	b.n	87d6 <z_unpend_first_thread+0x1a>
}
    87fc:	4620      	mov	r0, r4
    87fe:	bd70      	pop	{r4, r5, r6, pc}

00008800 <z_unpend_all>:
{
    8800:	b538      	push	{r3, r4, r5, lr}
    8802:	4605      	mov	r5, r0
	int need_sched = 0;
    8804:	2000      	movs	r0, #0
	return list->head == list;
    8806:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8808:	42a5      	cmp	r5, r4
    880a:	d008      	beq.n	881e <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    880c:	b13c      	cbz	r4, 881e <z_unpend_all+0x1e>
		z_unpend_thread(thread);
    880e:	4620      	mov	r0, r4
    8810:	f7ff fef9 	bl	8606 <z_unpend_thread>
		z_ready_thread(thread);
    8814:	4620      	mov	r0, r4
    8816:	f7ff ff1b 	bl	8650 <z_ready_thread>
		need_sched = 1;
    881a:	2001      	movs	r0, #1
    881c:	e7f3      	b.n	8806 <z_unpend_all+0x6>
}
    881e:	bd38      	pop	{r3, r4, r5, pc}

00008820 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    8820:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    8822:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    8824:	6083      	str	r3, [r0, #8]
}
    8826:	4770      	bx	lr

00008828 <remove_timeout>:
{
    8828:	b510      	push	{r4, lr}
    882a:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    882c:	f7fc fd2e 	bl	528c <next>
    8830:	b148      	cbz	r0, 8846 <remove_timeout+0x1e>
    8832:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    8834:	6903      	ldr	r3, [r0, #16]
    8836:	6941      	ldr	r1, [r0, #20]
    8838:	6920      	ldr	r0, [r4, #16]
    883a:	181b      	adds	r3, r3, r0
    883c:	6960      	ldr	r0, [r4, #20]
    883e:	eb41 0100 	adc.w	r1, r1, r0
    8842:	6113      	str	r3, [r2, #16]
    8844:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    8846:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    8848:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    884a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    884c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    884e:	2300      	movs	r3, #0
    8850:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    8852:	6063      	str	r3, [r4, #4]
}
    8854:	bd10      	pop	{r4, pc}

00008856 <next_timeout>:
{
    8856:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    8858:	f7fc fd0e 	bl	5278 <first>
    885c:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    885e:	f7fc fd21 	bl	52a4 <elapsed>
	if ((to == NULL) ||
    8862:	b17c      	cbz	r4, 8884 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    8864:	6923      	ldr	r3, [r4, #16]
    8866:	6962      	ldr	r2, [r4, #20]
    8868:	1a1b      	subs	r3, r3, r0
    886a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    886e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8872:	f172 0100 	sbcs.w	r1, r2, #0
    8876:	da08      	bge.n	888a <next_timeout+0x34>
		ret = MAX(0, to->dticks - ticks_elapsed);
    8878:	2a00      	cmp	r2, #0
    887a:	db01      	blt.n	8880 <next_timeout+0x2a>
    887c:	4618      	mov	r0, r3
}
    887e:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
    8880:	2300      	movs	r3, #0
    8882:	e7fb      	b.n	887c <next_timeout+0x26>
		ret = MAX_WAIT;
    8884:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8888:	e7f9      	b.n	887e <next_timeout+0x28>
    888a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
    888e:	e7f6      	b.n	887e <next_timeout+0x28>

00008890 <z_abort_timeout>:
{
    8890:	b570      	push	{r4, r5, r6, lr}
    8892:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    8894:	2300      	movs	r3, #0
	__asm__ volatile(
    8896:	f04f 0220 	mov.w	r2, #32
    889a:	f3ef 8611 	mrs	r6, BASEPRI
    889e:	f382 8812 	msr	BASEPRI_MAX, r2
    88a2:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    88a6:	f06f 0015 	mvn.w	r0, #21
    88aa:	e004      	b.n	88b6 <z_abort_timeout+0x26>
	__asm__ volatile(
    88ac:	f386 8811 	msr	BASEPRI, r6
    88b0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    88b4:	2301      	movs	r3, #1
    88b6:	461d      	mov	r5, r3
    88b8:	b93b      	cbnz	r3, 88ca <z_abort_timeout+0x3a>
	return node->next != NULL;
    88ba:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    88bc:	2b00      	cmp	r3, #0
    88be:	d0f5      	beq.n	88ac <z_abort_timeout+0x1c>
			remove_timeout(to);
    88c0:	4620      	mov	r0, r4
    88c2:	f7ff ffb1 	bl	8828 <remove_timeout>
			ret = 0;
    88c6:	4628      	mov	r0, r5
    88c8:	e7f0      	b.n	88ac <z_abort_timeout+0x1c>
}
    88ca:	bd70      	pop	{r4, r5, r6, pc}

000088cc <z_get_next_timeout_expiry>:
{
    88cc:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    88ce:	2300      	movs	r3, #0
	__asm__ volatile(
    88d0:	f04f 0220 	mov.w	r2, #32
    88d4:	f3ef 8411 	mrs	r4, BASEPRI
    88d8:	f382 8812 	msr	BASEPRI_MAX, r2
    88dc:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    88e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    88e4:	e006      	b.n	88f4 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    88e6:	f7ff ffb6 	bl	8856 <next_timeout>
	__asm__ volatile(
    88ea:	f384 8811 	msr	BASEPRI, r4
    88ee:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    88f2:	2301      	movs	r3, #1
    88f4:	2b00      	cmp	r3, #0
    88f6:	d0f6      	beq.n	88e6 <z_get_next_timeout_expiry+0x1a>
}
    88f8:	bd10      	pop	{r4, pc}

000088fa <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    88fa:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    88fc:	f7fc fdc2 	bl	5484 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8900:	bd08      	pop	{r3, pc}

00008902 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    8902:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    8904:	f7fc fdbe 	bl	5484 <sys_clock_tick_get>
}
    8908:	bd08      	pop	{r3, pc}

0000890a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    890a:	b900      	cbnz	r0, 890e <z_impl_k_busy_wait+0x4>
    890c:	4770      	bx	lr
{
    890e:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8910:	f7f9 fab6 	bl	1e80 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8914:	bd08      	pop	{r3, pc}

00008916 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
    8916:	b538      	push	{r3, r4, r5, lr}
    8918:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    891a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    891e:	bf08      	it	eq
    8920:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    8924:	d020      	beq.n	8968 <sys_clock_timeout_end_calc+0x52>
    8926:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8928:	ea51 0300 	orrs.w	r3, r1, r0
    892c:	d009      	beq.n	8942 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    892e:	f06f 0301 	mvn.w	r3, #1
    8932:	1a18      	subs	r0, r3, r0
    8934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8938:	eb63 0101 	sbc.w	r1, r3, r1
    893c:	2900      	cmp	r1, #0
    893e:	db03      	blt.n	8948 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    8940:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
    8942:	f7fc fd9f 	bl	5484 <sys_clock_tick_get>
    8946:	e7fb      	b.n	8940 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
    8948:	f7fc fd9c 	bl	5484 <sys_clock_tick_get>
    894c:	4603      	mov	r3, r0
    894e:	462a      	mov	r2, r5
    8950:	46a4      	mov	ip, r4
    8952:	2d01      	cmp	r5, #1
    8954:	f174 0400 	sbcs.w	r4, r4, #0
    8958:	da02      	bge.n	8960 <sys_clock_timeout_end_calc+0x4a>
    895a:	2201      	movs	r2, #1
    895c:	f04f 0c00 	mov.w	ip, #0
    8960:	1898      	adds	r0, r3, r2
    8962:	eb41 010c 	adc.w	r1, r1, ip
    8966:	e7eb      	b.n	8940 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
    8968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    896c:	4601      	mov	r1, r0
    896e:	e7e7      	b.n	8940 <sys_clock_timeout_end_calc+0x2a>

00008970 <z_reschedule_unlocked>:
{
    8970:	b508      	push	{r3, lr}
	__asm__ volatile(
    8972:	f04f 0320 	mov.w	r3, #32
    8976:	f3ef 8011 	mrs	r0, BASEPRI
    897a:	f383 8812 	msr	BASEPRI_MAX, r3
    897e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8982:	f7ff fe10 	bl	85a6 <z_reschedule_irqlock>
}
    8986:	bd08      	pop	{r3, pc}

00008988 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    8988:	b510      	push	{r4, lr}
    898a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    898c:	f7ff ff80 	bl	8890 <z_abort_timeout>

	if (inactive) {
    8990:	b960      	cbnz	r0, 89ac <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
    8992:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8994:	b10b      	cbz	r3, 899a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    8996:	4620      	mov	r0, r4
    8998:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    899a:	f104 0018 	add.w	r0, r4, #24
    899e:	f7ff feef 	bl	8780 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    89a2:	b118      	cbz	r0, 89ac <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
    89a4:	f7ff fe54 	bl	8650 <z_ready_thread>
			z_reschedule_unlocked();
    89a8:	f7ff ffe2 	bl	8970 <z_reschedule_unlocked>
		}
	}
}
    89ac:	bd10      	pop	{r4, pc}

000089ae <z_heap_aligned_alloc>:
{
    89ae:	b5d0      	push	{r4, r6, r7, lr}
    89b0:	b082      	sub	sp, #8
    89b2:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    89b4:	2300      	movs	r3, #0
    89b6:	3204      	adds	r2, #4
    89b8:	d20e      	bcs.n	89d8 <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
    89ba:	b97b      	cbnz	r3, 89dc <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    89bc:	2600      	movs	r6, #0
    89be:	2700      	movs	r7, #0
    89c0:	e9cd 6700 	strd	r6, r7, [sp]
    89c4:	f041 0104 	orr.w	r1, r1, #4
    89c8:	4620      	mov	r0, r4
    89ca:	f000 f81a 	bl	8a02 <k_heap_aligned_alloc>
	if (mem == NULL) {
    89ce:	b108      	cbz	r0, 89d4 <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
    89d0:	f840 4b04 	str.w	r4, [r0], #4
}
    89d4:	b002      	add	sp, #8
    89d6:	bdd0      	pop	{r4, r6, r7, pc}
    89d8:	2301      	movs	r3, #1
    89da:	e7ee      	b.n	89ba <z_heap_aligned_alloc+0xc>
		return NULL;
    89dc:	2000      	movs	r0, #0
    89de:	e7f9      	b.n	89d4 <z_heap_aligned_alloc+0x26>

000089e0 <k_free>:
	if (ptr != NULL) {
    89e0:	b130      	cbz	r0, 89f0 <k_free+0x10>
{
    89e2:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
    89e4:	1f01      	subs	r1, r0, #4
    89e6:	f850 0c04 	ldr.w	r0, [r0, #-4]
    89ea:	f000 f860 	bl	8aae <k_heap_free>
}
    89ee:	bd08      	pop	{r3, pc}
    89f0:	4770      	bx	lr

000089f2 <k_heap_init>:
{
    89f2:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
    89f4:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    89f8:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    89fa:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    89fc:	f7fd fd7d 	bl	64fa <sys_heap_init>
}
    8a00:	bd10      	pop	{r4, pc}

00008a02 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    8a02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a06:	b085      	sub	sp, #20
    8a08:	4607      	mov	r7, r0
    8a0a:	9103      	str	r1, [sp, #12]
    8a0c:	4692      	mov	sl, r2
    8a0e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8a10:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    8a12:	4628      	mov	r0, r5
    8a14:	4621      	mov	r1, r4
    8a16:	f7ff ff7e 	bl	8916 <sys_clock_timeout_end_calc>
    8a1a:	4606      	mov	r6, r0
    8a1c:	4689      	mov	r9, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    8a1e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    8a22:	bf08      	it	eq
    8a24:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    8a28:	d00d      	beq.n	8a46 <k_heap_aligned_alloc+0x44>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    8a2a:	f107 0b14 	add.w	fp, r7, #20
    8a2e:	f04f 0320 	mov.w	r3, #32
    8a32:	f3ef 8511 	mrs	r5, BASEPRI
    8a36:	f383 8812 	msr	BASEPRI_MAX, r3
    8a3a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
    8a3e:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
    8a42:	4644      	mov	r4, r8

	while (ret == NULL) {
    8a44:	e014      	b.n	8a70 <k_heap_aligned_alloc+0x6e>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    8a46:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    8a4a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    8a4e:	e7ec      	b.n	8a2a <k_heap_aligned_alloc+0x28>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    8a50:	9000      	str	r0, [sp, #0]
    8a52:	9101      	str	r1, [sp, #4]
    8a54:	f107 020c 	add.w	r2, r7, #12
    8a58:	4629      	mov	r1, r5
    8a5a:	4658      	mov	r0, fp
    8a5c:	f7fc f9ea 	bl	4e34 <z_pend_curr>
    8a60:	f04f 0320 	mov.w	r3, #32
    8a64:	f3ef 8511 	mrs	r5, BASEPRI
    8a68:	f383 8812 	msr	BASEPRI_MAX, r3
    8a6c:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
    8a70:	b9ac      	cbnz	r4, 8a9e <k_heap_aligned_alloc+0x9c>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    8a72:	4652      	mov	r2, sl
    8a74:	9903      	ldr	r1, [sp, #12]
    8a76:	4638      	mov	r0, r7
    8a78:	f7fd fcc9 	bl	640e <sys_heap_aligned_alloc>
    8a7c:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
    8a7e:	f7fc fd01 	bl	5484 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    8a82:	b964      	cbnz	r4, 8a9e <k_heap_aligned_alloc+0x9c>
		    (ret != NULL) || ((end - now) <= 0)) {
    8a84:	1a30      	subs	r0, r6, r0
    8a86:	eb69 0101 	sbc.w	r1, r9, r1
    8a8a:	2801      	cmp	r0, #1
    8a8c:	f171 0300 	sbcs.w	r3, r1, #0
    8a90:	db05      	blt.n	8a9e <k_heap_aligned_alloc+0x9c>
		if (!blocked_alloc) {
    8a92:	f1b8 0f00 	cmp.w	r8, #0
    8a96:	d1db      	bne.n	8a50 <k_heap_aligned_alloc+0x4e>
			blocked_alloc = true;
    8a98:	f04f 0801 	mov.w	r8, #1
    8a9c:	e7d8      	b.n	8a50 <k_heap_aligned_alloc+0x4e>
	__asm__ volatile(
    8a9e:	f385 8811 	msr	BASEPRI, r5
    8aa2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    8aa6:	4620      	mov	r0, r4
    8aa8:	b005      	add	sp, #20
    8aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008aae <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    8aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ab0:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    8ab2:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    8ab6:	f04f 0320 	mov.w	r3, #32
    8aba:	f3ef 8511 	mrs	r5, BASEPRI
    8abe:	f383 8812 	msr	BASEPRI_MAX, r3
    8ac2:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
    8ac6:	f7fd fc5e 	bl	6386 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    8aca:	f104 000c 	add.w	r0, r4, #12
    8ace:	f7ff fe97 	bl	8800 <z_unpend_all>
    8ad2:	b920      	cbnz	r0, 8ade <k_heap_free+0x30>
	__asm__ volatile(
    8ad4:	f385 8811 	msr	BASEPRI, r5
    8ad8:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    8adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_reschedule(&h->lock, key);
    8ade:	4629      	mov	r1, r5
    8ae0:	4638      	mov	r0, r7
    8ae2:	f7fc f859 	bl	4b98 <z_reschedule>
    8ae6:	e7f9      	b.n	8adc <k_heap_free+0x2e>

00008ae8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8ae8:	4770      	bx	lr

00008aea <atoi>:
    8aea:	220a      	movs	r2, #10
    8aec:	2100      	movs	r1, #0
    8aee:	f7fc bf23 	b.w	5938 <strtol>

00008af2 <memcpy>:
    8af2:	440a      	add	r2, r1
    8af4:	4291      	cmp	r1, r2
    8af6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    8afa:	d100      	bne.n	8afe <memcpy+0xc>
    8afc:	4770      	bx	lr
    8afe:	b510      	push	{r4, lr}
    8b00:	f811 4b01 	ldrb.w	r4, [r1], #1
    8b04:	f803 4f01 	strb.w	r4, [r3, #1]!
    8b08:	4291      	cmp	r1, r2
    8b0a:	d1f9      	bne.n	8b00 <memcpy+0xe>
    8b0c:	bd10      	pop	{r4, pc}

00008b0e <memset>:
    8b0e:	4402      	add	r2, r0
    8b10:	4603      	mov	r3, r0
    8b12:	4293      	cmp	r3, r2
    8b14:	d100      	bne.n	8b18 <memset+0xa>
    8b16:	4770      	bx	lr
    8b18:	f803 1b01 	strb.w	r1, [r3], #1
    8b1c:	e7f9      	b.n	8b12 <memset+0x4>

00008b1e <__seofread>:
    8b1e:	2000      	movs	r0, #0
    8b20:	4770      	bx	lr

00008b22 <strncpy>:
    8b22:	b510      	push	{r4, lr}
    8b24:	3901      	subs	r1, #1
    8b26:	4603      	mov	r3, r0
    8b28:	b132      	cbz	r2, 8b38 <strncpy+0x16>
    8b2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    8b2e:	f803 4b01 	strb.w	r4, [r3], #1
    8b32:	3a01      	subs	r2, #1
    8b34:	2c00      	cmp	r4, #0
    8b36:	d1f7      	bne.n	8b28 <strncpy+0x6>
    8b38:	441a      	add	r2, r3
    8b3a:	2100      	movs	r1, #0
    8b3c:	4293      	cmp	r3, r2
    8b3e:	d100      	bne.n	8b42 <strncpy+0x20>
    8b40:	bd10      	pop	{r4, pc}
    8b42:	f803 1b01 	strb.w	r1, [r3], #1
    8b46:	e7f9      	b.n	8b3c <strncpy+0x1a>

00008b48 <strnlen>:
    8b48:	b510      	push	{r4, lr}
    8b4a:	4602      	mov	r2, r0
    8b4c:	4401      	add	r1, r0
    8b4e:	428a      	cmp	r2, r1
    8b50:	4613      	mov	r3, r2
    8b52:	d003      	beq.n	8b5c <strnlen+0x14>
    8b54:	781c      	ldrb	r4, [r3, #0]
    8b56:	3201      	adds	r2, #1
    8b58:	2c00      	cmp	r4, #0
    8b5a:	d1f8      	bne.n	8b4e <strnlen+0x6>
    8b5c:	1a18      	subs	r0, r3, r0
    8b5e:	bd10      	pop	{r4, pc}

00008b60 <_strtol_r>:
    8b60:	f7fc be6c 	b.w	583c <_strtol_l.constprop.0>

00008b64 <_sungetc_r>:
    8b64:	b538      	push	{r3, r4, r5, lr}
    8b66:	1c4b      	adds	r3, r1, #1
    8b68:	4614      	mov	r4, r2
    8b6a:	d103      	bne.n	8b74 <_sungetc_r+0x10>
    8b6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    8b70:	4628      	mov	r0, r5
    8b72:	bd38      	pop	{r3, r4, r5, pc}
    8b74:	8993      	ldrh	r3, [r2, #12]
    8b76:	f023 0320 	bic.w	r3, r3, #32
    8b7a:	8193      	strh	r3, [r2, #12]
    8b7c:	6853      	ldr	r3, [r2, #4]
    8b7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
    8b80:	b2cd      	uxtb	r5, r1
    8b82:	b18a      	cbz	r2, 8ba8 <_sungetc_r+0x44>
    8b84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    8b86:	429a      	cmp	r2, r3
    8b88:	dd08      	ble.n	8b9c <_sungetc_r+0x38>
    8b8a:	6823      	ldr	r3, [r4, #0]
    8b8c:	1e5a      	subs	r2, r3, #1
    8b8e:	6022      	str	r2, [r4, #0]
    8b90:	f803 5c01 	strb.w	r5, [r3, #-1]
    8b94:	6863      	ldr	r3, [r4, #4]
    8b96:	3301      	adds	r3, #1
    8b98:	6063      	str	r3, [r4, #4]
    8b9a:	e7e9      	b.n	8b70 <_sungetc_r+0xc>
    8b9c:	4621      	mov	r1, r4
    8b9e:	f000 f874 	bl	8c8a <__submore>
    8ba2:	2800      	cmp	r0, #0
    8ba4:	d0f1      	beq.n	8b8a <_sungetc_r+0x26>
    8ba6:	e7e1      	b.n	8b6c <_sungetc_r+0x8>
    8ba8:	6921      	ldr	r1, [r4, #16]
    8baa:	6822      	ldr	r2, [r4, #0]
    8bac:	b141      	cbz	r1, 8bc0 <_sungetc_r+0x5c>
    8bae:	4291      	cmp	r1, r2
    8bb0:	d206      	bcs.n	8bc0 <_sungetc_r+0x5c>
    8bb2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    8bb6:	42a9      	cmp	r1, r5
    8bb8:	d102      	bne.n	8bc0 <_sungetc_r+0x5c>
    8bba:	3a01      	subs	r2, #1
    8bbc:	6022      	str	r2, [r4, #0]
    8bbe:	e7ea      	b.n	8b96 <_sungetc_r+0x32>
    8bc0:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
    8bc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    8bc8:	6363      	str	r3, [r4, #52]	; 0x34
    8bca:	2303      	movs	r3, #3
    8bcc:	63a3      	str	r3, [r4, #56]	; 0x38
    8bce:	4623      	mov	r3, r4
    8bd0:	f803 5f46 	strb.w	r5, [r3, #70]!
    8bd4:	6023      	str	r3, [r4, #0]
    8bd6:	2301      	movs	r3, #1
    8bd8:	e7de      	b.n	8b98 <_sungetc_r+0x34>

00008bda <__ssrefill_r>:
    8bda:	b510      	push	{r4, lr}
    8bdc:	460c      	mov	r4, r1
    8bde:	6b49      	ldr	r1, [r1, #52]	; 0x34
    8be0:	b169      	cbz	r1, 8bfe <__ssrefill_r+0x24>
    8be2:	f104 0344 	add.w	r3, r4, #68	; 0x44
    8be6:	4299      	cmp	r1, r3
    8be8:	d001      	beq.n	8bee <__ssrefill_r+0x14>
    8bea:	f7fc fd49 	bl	5680 <_free_r>
    8bee:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8bf0:	6063      	str	r3, [r4, #4]
    8bf2:	2000      	movs	r0, #0
    8bf4:	6360      	str	r0, [r4, #52]	; 0x34
    8bf6:	b113      	cbz	r3, 8bfe <__ssrefill_r+0x24>
    8bf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    8bfa:	6023      	str	r3, [r4, #0]
    8bfc:	bd10      	pop	{r4, pc}
    8bfe:	6923      	ldr	r3, [r4, #16]
    8c00:	6023      	str	r3, [r4, #0]
    8c02:	2300      	movs	r3, #0
    8c04:	6063      	str	r3, [r4, #4]
    8c06:	89a3      	ldrh	r3, [r4, #12]
    8c08:	f043 0320 	orr.w	r3, r3, #32
    8c0c:	81a3      	strh	r3, [r4, #12]
    8c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8c12:	e7f3      	b.n	8bfc <__ssrefill_r+0x22>

00008c14 <__sccl>:
    8c14:	b570      	push	{r4, r5, r6, lr}
    8c16:	780b      	ldrb	r3, [r1, #0]
    8c18:	4604      	mov	r4, r0
    8c1a:	2b5e      	cmp	r3, #94	; 0x5e
    8c1c:	bf0b      	itete	eq
    8c1e:	784b      	ldrbeq	r3, [r1, #1]
    8c20:	1c4a      	addne	r2, r1, #1
    8c22:	1c8a      	addeq	r2, r1, #2
    8c24:	2100      	movne	r1, #0
    8c26:	bf08      	it	eq
    8c28:	2101      	moveq	r1, #1
    8c2a:	3801      	subs	r0, #1
    8c2c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
    8c30:	f800 1f01 	strb.w	r1, [r0, #1]!
    8c34:	42a8      	cmp	r0, r5
    8c36:	d1fb      	bne.n	8c30 <__sccl+0x1c>
    8c38:	b90b      	cbnz	r3, 8c3e <__sccl+0x2a>
    8c3a:	1e50      	subs	r0, r2, #1
    8c3c:	bd70      	pop	{r4, r5, r6, pc}
    8c3e:	f081 0101 	eor.w	r1, r1, #1
    8c42:	54e1      	strb	r1, [r4, r3]
    8c44:	4610      	mov	r0, r2
    8c46:	4602      	mov	r2, r0
    8c48:	f812 5b01 	ldrb.w	r5, [r2], #1
    8c4c:	2d2d      	cmp	r5, #45	; 0x2d
    8c4e:	d005      	beq.n	8c5c <__sccl+0x48>
    8c50:	2d5d      	cmp	r5, #93	; 0x5d
    8c52:	d016      	beq.n	8c82 <__sccl+0x6e>
    8c54:	2d00      	cmp	r5, #0
    8c56:	d0f1      	beq.n	8c3c <__sccl+0x28>
    8c58:	462b      	mov	r3, r5
    8c5a:	e7f2      	b.n	8c42 <__sccl+0x2e>
    8c5c:	7846      	ldrb	r6, [r0, #1]
    8c5e:	2e5d      	cmp	r6, #93	; 0x5d
    8c60:	d0fa      	beq.n	8c58 <__sccl+0x44>
    8c62:	42b3      	cmp	r3, r6
    8c64:	dcf8      	bgt.n	8c58 <__sccl+0x44>
    8c66:	3002      	adds	r0, #2
    8c68:	461a      	mov	r2, r3
    8c6a:	3201      	adds	r2, #1
    8c6c:	4296      	cmp	r6, r2
    8c6e:	54a1      	strb	r1, [r4, r2]
    8c70:	dcfb      	bgt.n	8c6a <__sccl+0x56>
    8c72:	1af2      	subs	r2, r6, r3
    8c74:	3a01      	subs	r2, #1
    8c76:	1c5d      	adds	r5, r3, #1
    8c78:	42b3      	cmp	r3, r6
    8c7a:	bfa8      	it	ge
    8c7c:	2200      	movge	r2, #0
    8c7e:	18ab      	adds	r3, r5, r2
    8c80:	e7e1      	b.n	8c46 <__sccl+0x32>
    8c82:	4610      	mov	r0, r2
    8c84:	e7da      	b.n	8c3c <__sccl+0x28>

00008c86 <_strtoul_r>:
    8c86:	f7fd b94f 	b.w	5f28 <_strtoul_l.constprop.0>

00008c8a <__submore>:
    8c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c8e:	460c      	mov	r4, r1
    8c90:	6b49      	ldr	r1, [r1, #52]	; 0x34
    8c92:	f104 0344 	add.w	r3, r4, #68	; 0x44
    8c96:	4299      	cmp	r1, r3
    8c98:	d11d      	bne.n	8cd6 <__submore+0x4c>
    8c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8c9e:	f7fc fd39 	bl	5714 <_malloc_r>
    8ca2:	b918      	cbnz	r0, 8cac <__submore+0x22>
    8ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
    8cb0:	63a3      	str	r3, [r4, #56]	; 0x38
    8cb2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    8cb6:	6360      	str	r0, [r4, #52]	; 0x34
    8cb8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
    8cbc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    8cc0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
    8cc4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    8cc8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
    8ccc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
    8cd0:	6020      	str	r0, [r4, #0]
    8cd2:	2000      	movs	r0, #0
    8cd4:	e7e8      	b.n	8ca8 <__submore+0x1e>
    8cd6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    8cd8:	0077      	lsls	r7, r6, #1
    8cda:	463a      	mov	r2, r7
    8cdc:	f000 f80f 	bl	8cfe <_realloc_r>
    8ce0:	4605      	mov	r5, r0
    8ce2:	2800      	cmp	r0, #0
    8ce4:	d0de      	beq.n	8ca4 <__submore+0x1a>
    8ce6:	eb00 0806 	add.w	r8, r0, r6
    8cea:	4601      	mov	r1, r0
    8cec:	4632      	mov	r2, r6
    8cee:	4640      	mov	r0, r8
    8cf0:	f7ff feff 	bl	8af2 <memcpy>
    8cf4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
    8cf8:	f8c4 8000 	str.w	r8, [r4]
    8cfc:	e7e9      	b.n	8cd2 <__submore+0x48>

00008cfe <_realloc_r>:
    8cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d00:	4607      	mov	r7, r0
    8d02:	4615      	mov	r5, r2
    8d04:	460c      	mov	r4, r1
    8d06:	b921      	cbnz	r1, 8d12 <_realloc_r+0x14>
    8d08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8d0c:	4611      	mov	r1, r2
    8d0e:	f7fc bd01 	b.w	5714 <_malloc_r>
    8d12:	b922      	cbnz	r2, 8d1e <_realloc_r+0x20>
    8d14:	f7fc fcb4 	bl	5680 <_free_r>
    8d18:	2400      	movs	r4, #0
    8d1a:	4620      	mov	r0, r4
    8d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8d1e:	f000 f813 	bl	8d48 <_malloc_usable_size_r>
    8d22:	42a8      	cmp	r0, r5
    8d24:	d2f9      	bcs.n	8d1a <_realloc_r+0x1c>
    8d26:	4629      	mov	r1, r5
    8d28:	4638      	mov	r0, r7
    8d2a:	f7fc fcf3 	bl	5714 <_malloc_r>
    8d2e:	4606      	mov	r6, r0
    8d30:	2800      	cmp	r0, #0
    8d32:	d0f1      	beq.n	8d18 <_realloc_r+0x1a>
    8d34:	4621      	mov	r1, r4
    8d36:	462a      	mov	r2, r5
    8d38:	f7ff fedb 	bl	8af2 <memcpy>
    8d3c:	4621      	mov	r1, r4
    8d3e:	4638      	mov	r0, r7
    8d40:	f7fc fc9e 	bl	5680 <_free_r>
    8d44:	4634      	mov	r4, r6
    8d46:	e7e8      	b.n	8d1a <_realloc_r+0x1c>

00008d48 <_malloc_usable_size_r>:
    8d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
    8d4c:	1f18      	subs	r0, r3, #4
    8d4e:	2b00      	cmp	r3, #0
    8d50:	bfbc      	itt	lt
    8d52:	580b      	ldrlt	r3, [r1, r0]
    8d54:	18c0      	addlt	r0, r0, r3
    8d56:	4770      	bx	lr
